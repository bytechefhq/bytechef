/*
 * This file was generated by the Gradle "init" task.
 *
 * The settings file is used to specify which projects to include in your build.
 *
 * Detailed information about configuring a multi-project build in Gradle can be found
 * in the user manual at https://docs.gradle.org/7.1/userguide/multi_project_builds.html
 */

pluginManagement {
    plugins {
        id "com.diffplug.spotless" version "${spotlessPluginVersion}"
        id "com.github.ben-manes.versions" version "${versionsPluginVersion}"
        id "com.github.spotbugs" version "${spotbugsPluginVersion}"
        id "com.google.cloud.tools.jib" version "${jibPluginVersion}"
        id "com.gorylenko.gradle-git-properties" version "${gitPropertiesPluginVersion}"
        id "org.flywaydb.flyway" version "${flywaydbPluginVersion}"
        id "org.openapi.generator" version "${openAPIGeneratorPluginVersion}"
        id "org.sonarqube" version "${sonarqubePluginVersion}"
        id "org.springframework.boot" version "${springBootVersion}"
    }

    repositories {
        gradlePluginPortal()

        mavenCentral()

        maven { url "https://repo.spring.io/release" }
    }
}

rootProject.name = "bytechef"

dependencyResolutionManagement {
    versionCatalogs {
        libs {
            library("awssdk-s3", "software.amazon.awssdk:s3:2.19.26")
            library("swagger-parser", "io.swagger.parser.v3:swagger-parser:2.1.11")
            library("jackson-databind-nullable", "org.openapitools:jackson-databind-nullable:0.2.4")
            library("jackson-dataformat-xml", "com.fasterxml.jackson.dataformat:jackson-dataformat-xml:2.14.2")
            library("jackson-dataformat-yaml", "com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.14.2")
            library("jgit", "org.eclipse.jgit:org.eclipse.jgit:6.4.0.202211300538-r")
            library("jobrunr", "org.jobrunr:jobrunr:6.0.0")
            library("jobrunr-spring-boot-starter", "org.jobrunr:jobrunr-spring-boot-starter:6.0.0")
            library("json", "org.json:json:20220924")
            library("json-path", "com.jayway.jsonpath:json-path:2.7.0")
            library("logback-core", "ch.qos.logback:logback-core:1.4.5")
            library("logback-classic", "ch.qos.logback:logback-classic:1.4.5")
            library("mapstruct", "org.mapstruct:mapstruct:1.5.3.Final")
            library("mapstruct-processor", "org.mapstruct:mapstruct-processor:1.5.3.Final")
            library("mapstruct-spring-annotations", "org.mapstruct.extensions.spring:mapstruct-spring-annotations:0.1.2")
            library("mapstruct-spring-extensions", "org.mapstruct.extensions.spring:mapstruct-spring-extensions:0.1.2")
            library("methanol", "com.github.mizosoft.methanol:methanol:1.7.0")
            library("javapoet", "com.squareup:javapoet:1.13.0")
            library("jupiter-engine", "org.junit.jupiter:junit-jupiter-engine:5.9.1")
            library("picocli", "info.picocli:picocli:4.7.1")
            library("picocli-codegen", "info.picocli:picocli-codegen:4.7.1")
            library("poi-ooxml", "org.apache.poi:poi-ooxml:5.2.3")
            library("sods", "com.github.miachm.sods:SODS:1.5.2")
            library("spotbugs-annotations", "com.github.spotbugs:spotbugs-annotations:4.7.3")
            library("springdoc-openapi-starter-webflux-ui", "org.springdoc:springdoc-openapi-starter-webflux-ui:2.0.2")
            library("swagger-annotations", "io.swagger.core.v3:swagger-annotations:2.2.8")
            library("zt-exec", "org.zeroturnaround:zt-exec:1.12")
            library("testcontainers", "org.testcontainers:testcontainers:1.17.6")
            library("testcontainers-postgresql", "org.testcontainers:postgresql:1.17.6")
            library("testcontainers-junit-jupiter", "org.testcontainers:junit-jupiter:1.17.6")
            library("tika-core", "org.apache.tika:tika-core:2.6.0")
        }
    }
}

include("cli:cli-app")
include("cli:commands:component")
include("server:apps:server-app")
include("server:apps:services:coordinator-service-app")
include("server:apps:services:platform-service-app")
include("server:apps:services:worker-service-app")
include("server:libs:atlas:atlas-api")
include("server:libs:atlas:atlas-config")
include("server:libs:atlas:atlas-coordinator:atlas-coordinator-api")
include("server:libs:atlas:atlas-coordinator:atlas-coordinator-config")
include("server:libs:atlas:atlas-coordinator:atlas-coordinator-impl")
include("server:libs:atlas:atlas-event:atlas-event-api")
include("server:libs:atlas:atlas-event:atlas-event-impl")
include("server:libs:atlas:atlas-message-broker:atlas-message-broker-api")
include("server:libs:atlas:atlas-message-broker:atlas-message-broker-amqp")
include("server:libs:atlas:atlas-message-broker:atlas-message-broker-jms")
include("server:libs:atlas:atlas-message-broker:atlas-message-broker-kafka")
include("server:libs:atlas:atlas-message-broker:atlas-message-broker-redis")
include("server:libs:atlas:atlas-message-broker:atlas-message-broker-sync")
include("server:libs:atlas:atlas-repository:atlas-repository-api")
include("server:libs:atlas:atlas-repository:atlas-repository-git")
include("server:libs:atlas:atlas-repository:atlas-repository-impl")
include("server:libs:atlas:atlas-repository:atlas-repository-jdbc")
include("server:libs:atlas:atlas-repository:atlas-repository-memory")
include("server:libs:atlas:atlas-repository:atlas-repository-resource")
include("server:libs:atlas:atlas-rest:atlas-rest-api")
include("server:libs:atlas:atlas-rest:atlas-rest-impl")
include("server:libs:atlas:atlas-rsocket")
include("server:libs:atlas:atlas-rsocket-client")
include("server:libs:atlas:atlas-service")
include("server:libs:atlas:atlas-sync-executor")
include("server:libs:atlas:atlas-worker:atlas-worker-api")
include("server:libs:atlas:atlas-worker:atlas-worker-config")
include("server:libs:atlas:atlas-worker:atlas-worker-impl")
include("server:libs:core:autoconfigure-annotations")
include("server:libs:core:commons:commons-data")
include("server:libs:core:commons:commons-utils")
include("server:libs:core:config-post-processor")
include("server:libs:core:discovery:discovery-metadata-api")
include("server:libs:core:discovery:discovery-redis")
include("server:libs:core:encryption:encryption-api")
include("server:libs:core:encryption:encryption-filesystem")
include("server:libs:core:rest:rest-api")
include("server:libs:core:rest:rest-impl")
include("server:libs:core:tag:tag-api")
include("server:libs:core:tag:tag-service")
include("server:libs:db-migration")
include("server:libs:hermes:hermes-component:hermes-component-api")
include("server:libs:hermes:hermes-component:hermes-component-registrar")
include("server:libs:hermes:hermes-component:hermes-component-rest")
include("server:libs:hermes:hermes-component:hermes-component-service:hermes-component-service-api")
include("server:libs:hermes:hermes-component:hermes-component-service:hermes-component-service-local")
include("server:libs:hermes:hermes-component:hermes-component-service:hermes-component-service-remote")
include("server:libs:hermes:hermes-component:hermes-component-test:hermes-component-test-int-support")
include("server:libs:hermes:hermes-connection:hermes-connection-api")
include("server:libs:hermes:hermes-connection:hermes-connection-rest")
include("server:libs:hermes:hermes-connection:hermes-connection-rsocket")
include("server:libs:hermes:hermes-connection:hermes-connection-rsocket-client")
include("server:libs:hermes:hermes-connection:hermes-connection-service")
include("server:libs:hermes:hermes-definition-api")
include("server:libs:hermes:hermes-file-storage:hermes-file-storage-api")
include("server:libs:hermes:hermes-file-storage:hermes-file-storage-base64")
include("server:libs:hermes:hermes-file-storage:hermes-file-storage-filesystem")
include("server:libs:hermes:hermes-integration:hermes-integration-api")
include("server:libs:hermes:hermes-integration:hermes-integration-rest")
include("server:libs:hermes:hermes-integration:hermes-integration-service")
include("server:libs:hermes:hermes-task-dispatcher:hermes-task-dispatcher-api")
include("server:libs:hermes:hermes-task-dispatcher:hermes-task-dispatcher-rest")
include("server:libs:hermes:hermes-task-dispatcher:hermes-task-dispatcher-service:hermes-task-dispatcher-service-api")
include("server:libs:hermes:hermes-task-dispatcher:hermes-task-dispatcher-service:hermes-task-dispatcher-service-local")
include("server:libs:hermes:hermes-task-dispatcher:hermes-task-dispatcher-service:hermes-task-dispatcher-service-remote")
include("server:libs:hermes:hermes-task-dispatcher:hermes-task-dispatcher-test-int-support")
include("server:libs:modules:components:aws:aws-s3")
include("server:libs:modules:components:bash")
include("server:libs:modules:components:csvfile")
include("server:libs:modules:components:delay")
include("server:libs:modules:components:filestorage")
include("server:libs:modules:components:httpclient")
include("server:libs:modules:components:jira")
include("server:libs:modules:components:jsonfile")
include("server:libs:modules:components:jsonhelper")
include("server:libs:modules:components:filesystem")
include("server:libs:modules:components:logger")
include("server:libs:modules:components:map")
include("server:libs:modules:components:mysql")
include("server:libs:modules:components:odsfile")
include("server:libs:modules:components:petstore")
include("server:libs:modules:components:pipedrive")
include("server:libs:modules:components:postgresql")
include("server:libs:modules:components:randomhelper")
include("server:libs:modules:components:script")
include("server:libs:modules:components:shopify")
include("server:libs:modules:components:var")
include("server:libs:modules:components:xlsxfile")
include("server:libs:modules:components:xmlfile")
include("server:libs:modules:components:xmlhelper")
include("server:libs:modules:task-dispatchers:each")
include("server:libs:modules:task-dispatchers:forkjoin")
include("server:libs:modules:task-dispatchers:if")
include("server:libs:modules:task-dispatchers:loop")
include("server:libs:modules:task-dispatchers:map")
include("server:libs:modules:task-dispatchers:parallel")
include("server:libs:modules:task-dispatchers:sequence")
include("server:libs:modules:task-dispatchers:subflow")
include("server:libs:modules:task-dispatchers:switch")
include("server:libs:test:test-support")
include("server:libs:test:test-int-support")
