# Default values for bytechef-monolith.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

image:
  repository: docker.bytechef.io/bytechef/bytechef
  pullPolicy: Always
  # Overrides the image tag whose default is the chart appVersion.
  tag: "latest"

env:
  normal:
    BYTECHEF_ENCRYPTION_PROVIDER: property
    BYTECHEF_FEATURE_FLAGS_0: ff-1057
    BYTECHEF_PUBLIC_URL: "" ## Place your public endpoint here if using ingress
    BYTECHEF_SIGN_UP_ACTIVATION_REQUIRED: false

    ## Optional env for smtp setup
    BYTECHEF_MAIL_SMTP_AUTH: false
    BYTECHEF_MAIL_SMTP_STARTTLS_ENABLE: false
    BYTECHEF_MAIL_SMTP_STARTTLS_REQUIRED: false

  secret:
    BYTECHEF_DATASOURCE_PASSWORD: "" ## Place your postgresql password here
    BYTECHEF_DATASOURCE_URL: "" ## Place your jdbc postgresql endpoint here
    BYTECHEF_DATASOURCE_USERNAME: "" ## Place your postgresql username here
    BYTECHEF_ENCRYPTION_PROPERTY_KEY: "" ## Place your encryption value here
    BYTECHEF_SECURITY_REMEMBER_ME_KEY: "" ## Place your remember me key here
    BYTECHEF_MAIL_USERNAME: ""
    BYTECHEF_MAIL_HOST: ""
    BYTECHEF_MAIL_PASSWORD: ""
    BYTECHEF_MAIL_PORT: 22


imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Automatically mount a ServiceAccount's API credentials?
  automount: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}
podLabels: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: ClusterIP
  port: 8080

ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

livenessProbe:
  httpGet:
    path: /actuator/health/liveness
    port: 9555
  initialDelaySeconds: 30
  timeoutSeconds: 20
  periodSeconds: 30
  failureThreshold: 6
readinessProbe:
  httpGet:
    path: /actuator/health/readiness/
    port: 9555
  initialDelaySeconds: 30
  timeoutSeconds: 20
  periodSeconds: 30
  failureThreshold: 6
startupProbe:
  failureThreshold: 180
  periodSeconds: 20
  timeoutSeconds: 60

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

# Additional volumes on the output Deployment definition.
volumes: []
# - name: foo
#   secret:
#     secretName: mysecret
#     optional: false

# Additional volumeMounts on the output Deployment definition.
volumeMounts: []
# - name: foo
#   mountPath: "/etc/foo"
#   readOnly: true

nodeSelector: {}

tolerations: []

affinity: {}
