plugins {
    id "checkstyle"
    alias(libs.plugins.com.diffplug.spotless)
    alias(libs.plugins.com.github.ben.manes.versions)
    alias(libs.plugins.com.github.spotbugs)
    id "com.bytechef.java-common-conventions"
    alias(libs.plugins.nl.littlerobots.version.catalog.update)
    id "pmd"
}

versionCatalogUpdate {
    keep {
        versions = ["checkstyle", "org-springframework-cloud-dependencies", "pmd", "spotbugs"]
    }
}

subprojects {
    apply plugin: "checkstyle"
    apply plugin: "com.diffplug.spotless"
    apply plugin: "com.github.spotbugs"
    apply plugin: "com.bytechef.java-common-conventions"
    apply plugin: "pmd"

    idea {
        module {
            excludeDirs += files("node_modules")
        }
    }

    checkstyle {
        toolVersion "${libs.versions.checkstyle.get()}"
        configFile file("${rootDir}/config/checkstyle/checkstyle.xml")
    }

    pmd {
        toolVersion = "${libs.versions.pmd.get()}"
        ruleSetFiles = files("${rootDir}/config/pmd/pmd-ruleset.xml")
        ruleSets = []
    }

    spotbugs {
        toolVersion = "${libs.versions.spotbugs.get()}"
        reportsDir = file("$buildDir/reports/spotbugs")
        excludeFilter = file("${rootDir}/config/spotbugs/spotbugs-exclude.xml")
    }

    [spotbugsMain, spotbugsTest].each { task ->
        task.configure {
            reports {
                html {
                    enabled = true
                    stylesheet = 'fancy-hist.xsl'
                }
            }
        }
    }

    spotless {
        format "misc", {
            // define the files to apply `misc` to
            target "*.gradle", "*.md", ".gitignore"

            trimTrailingWhitespace()
            indentWithSpaces(4)
            endWithNewline()
        }
        java {
            target "src/*/java/**/*.java"

            licenseHeader(
                '''
                /*
                 * Copyright 2021 <your company/name>.
                 *
                 * Licensed under the Apache License, Version 2.0 (the "License");
                 * you may not use this file except in compliance with the License.
                 * You may obtain a copy of the License at
                 *
                 *      https://www.apache.org/licenses/LICENSE-2.0
                 *
                 * Unless required by applicable law or agreed to in writing, software
                 * distributed under the License is distributed on an "AS IS" BASIS,
                 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
                 * See the License for the specific language governing permissions and
                 * limitations under the License.
                 */
                '''
            ).named(
                "standard"
            )
            licenseHeader(
                '''
                /*
                 * Copyright 2016-2018 the original author or authors.
                 *
                 * Licensed under the Apache License, Version 2.0 (the "License");
                 * you may not use this file except in compliance with the License.
                 * You may obtain a copy of the License at
                 *
                 *      https://www.apache.org/licenses/LICENSE-2.0
                 *
                 * Unless required by applicable law or agreed to in writing, software
                 * distributed under the License is distributed on an "AS IS" BASIS,
                 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
                 * See the License for the specific language governing permissions and
                 * limitations under the License.
                 *
                 * Modifications copyright (C) 2021 <your company/name>
                 */
                '''
            ).named(
                "original"
            ).onlyIfContentMatches(
                "author\\sArik\\sCohen"
            )
            eclipse().configFile("$rootDir/config/eclipse/eclipse-code-formatter-settings.xml")
            removeUnusedImports()
            trimTrailingWhitespace()
            indentWithSpaces(4)
            endWithNewline()
        }
        yaml {
            target "**/*.yaml"
            jackson()
        }
        json {
            target "**/*.json"
            jackson()
        }
    }

    check.dependsOn 'spotlessCheck'

    test {
        useJUnitPlatform()
        exclude "**/*IntTest*"
        testLogging {
            events "standardOut", "passed", "skipped", "failed"
            showExceptions true
            exceptionFormat "full"
            showCauses true
            showStackTraces true
        }
        jvmArgs += "-Djava.security.egd=file:/dev/./urandom -Xmx256m"
        // uncomment if the tests reports are not generated
        // ignoreFailures true
        reports.html.getRequired().set(true)

        afterSuite { desc, result ->
            if (!desc.parent) { // will match the outermost suite
                def output = "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
                def startItem = '|  ', endItem = '  |'
                def repeatLength = startItem.length() + output.length() + endItem.length()
                println('\n' + ('-' * repeatLength) + '\n' + startItem + output + endItem + '\n' + ('-' * repeatLength))
            }
        }
    }

    task testIntegration(type: Test) {
        useJUnitPlatform()
        description = "Execute integration tests."
        group = "verification"
        include "**/*IntTest*"
        testLogging {
            events "standardOut", "passed", "skipped", "failed"
            showExceptions true
            exceptionFormat "full"
            showCauses true
            showStackTraces true
        }
        jvmArgs += "-Djava.security.egd=file:/dev/./urandom -Xmx256m"

        environment "spring.profiles.active", "testint"

        // uncomment if the tests reports are not generated
        // ignoreFailures true
        reports.html.getRequired().set(true)

        afterSuite { desc, result ->
            if (!desc.parent) { // will match the outermost suite
                def output = "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
                def startItem = '|  ', endItem = '  |'
                def repeatLength = startItem.length() + output.length() + endItem.length()
                println('\n' + ('-' * repeatLength) + '\n' + startItem + output + endItem + '\n' + ('-' * repeatLength))
            }
        }
    }

    check.dependsOn testIntegration

    task testReport(type: TestReport) {
        destinationDir = file("$buildDir/reports/tests")
        reportOn test
    }

    task testIntegrationReport(type: TestReport) {
        destinationDir = file("$buildDir/reports/tests")
        reportOn testIntegration
    }

    task cleanResources(type: Delete) {
        delete "build/resources"
    }

    configurations {
        all {
            // https://github.com/testcontainers/testcontainers-java/issues/970
            /* exclude junit 4 dependencies */
            // exclude group: 'junit', module: 'junit'
            // exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
        }
    }

    dependencies {
        compileOnly libs.org.graalvm.sdk.graal.sdk

        implementation libs.com.github.spotbugs.spotbugs.annotations
    }
}

def publishedProjects = subprojects.findAll()

task jacocoRootReport(type: JacocoReport, group: 'Coverage reports') {
    description = 'Generates an aggregate report from all subprojects'

    dependsOn(publishedProjects.test)

    getAdditionalSourceDirs().setFrom(files(publishedProjects.sourceSets.main.allSource.srcDirs))
    getSourceDirectories().setFrom(files(publishedProjects.sourceSets.main.allSource.srcDirs))
    getClassDirectories().setFrom(files(publishedProjects.sourceSets.main.output))
    getExecutionData().setFrom(files(publishedProjects.jacocoTestReport.executionData))

    reports {
        html.getRequired().set(true) // human readable
        xml.getRequired().set(true) // required by codecov
    }
}

wrapper {
    gradleVersion = "8.3"
}
