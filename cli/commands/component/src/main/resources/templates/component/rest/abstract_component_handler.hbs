package {{packageName}};

import static com.bytechef.hermes.component.ComponentDSL.*;

import com.bytechef.hermes.component.OpenApiComponentHandler;

import com.bytechef.hermes.component.ComponentHandler;
import com.bytechef.hermes.component.Context;
import com.bytechef.hermes.component.ExecutionParameters;
import com.bytechef.hermes.component.definition.ComponentDefinition;

import java.util.Map;

public abstract class Abstract{{capitalizedComponentName}}ComponentHandler implements OpenApiComponentHandler {

    private final ComponentDefinition componentDefinition = createComponent({{componentName}})
        .display(
            display("{{openAPI.info.title}}")
                {{#if openApi.info.description}}
                    .description("{{openApi.info.description}}")
                {{/if}}
        )
        .actions(
            {{#each openApi.paths.entrySet}}
                {{#if value.delete}}
                    {{> action requestMethod="DELETE" operation=value.delete path=key}}
                {{/if}}
                {{#if value.head}}
                    {{> action requestMethod="HEAD" operation=value.head path=key}}
                {{/if}}
                {{#if value.get}}
                   {{> action requestMethod="GET" operation=value.get path=key}}
                {{/if}}
                {{#if value.patch}}
                    {{> action requestMethod="PATCH" operation=value.patch path=key}}
                {{/if}}
                {{#if value.post}}
                    {{> action requestMethod="POST" operation=value.post path=key}}
                {{/if}}
                {{#if value.put}}
                    {{> action requestMethod="PUT" operation=value.put path=key}}
                {{/if}}
            {{/each}}
        );

    @Override
    public ComponentDefinition getDefinition() {
        return componentDefinition;
    }
}

{{#*inline "action"}}
    action("{{operation.operationId}}")
        .display(
            display("{{operation.summary}}")
        )
        .metadata(
            Map.of(
                "requestMethod", "{{requestMethod}}",
                "path", "{{path}}"
            )
        )
        .properties(
            {{#each operation.parameters}}
                {{#ifEquals schema.type "array"}}
                    {{> typeArray }}
                {{/ifEquals}}

                {{#ifEquals schema.type "boolean"}}
                    {{> typeBoolean }}
                {{/ifEquals}}

                {{#ifEquals schema.type "integer"}}
                    {{> typeInteger }}
                {{/ifEquals}}

                {{#ifEquals schema.type "number"}}
                    {{> typeNumber }}
                {{/ifEquals}}

                {{#ifEquals schema.type "object"}}
                    {{> typeObject }}
                {{/ifEquals}}

                {{#ifEquals schema.type "string"}}
                    {{> typeString }}
                {{/ifEquals}}
            {{/each}}
        )
{{/inline}}

{{#*inline "typeArray"}}

{{/inline}}

{{#*inline "typeBoolean"}}
    bool("{{name}}")
        .label("{{name}}")
        .description("{{description}}")

        {{#if required}}
            .required(true)
        {{/if}}
{{/inline}}

{{#*inline "typeDate"}}
    date("{{name}}")
        .label("{{name}}")
        .description("{{description}}")

        {{#if required}}
            .required(true)
        {{/if}}
{{/inline}}

{{#*inline "typeDateTime"}}
    dateTime("{{name}}")
        .label("{{name}}")
        .description("{{description}}")

        {{#if required}}
            .required(true)
        {{/if}}
{{/inline}}

{{#*inline "typeInteger"}}
    integer("{{name}}")
        .label("{{name}}")
        .description("{{description}}")

        {{#if required}}
            .required(true)
        {{/if}}
{{/inline}}

{{#*inline "typeNumber"}}
    number("{{name}}")
        .label("{{name}}")
        .description("{{description}}")

        {{#if required}}
            .required(true)
        {{/if}}
{{/inline}}

{{#*inline "typeObject"}}

{{/inline}}

{{#*inline "typeString"}}
    string("{{name}}")
        .label("{{name}}")
        .description("{{description}}")

        {{#if required}}
            .required(true)
        {{/if}}
{{/inline}}
