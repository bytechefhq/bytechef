---
# Conditionally disable springdoc on missing api-docs profile
spring:
  config:
    activate:
      on-profile: '!api-docs'
springdoc:
  api-docs:
    enabled: false
---

info:
  ai:
    copilot:
      enabled: ${bytechef.ai.copilot.enabled}
  analytics:
    enabled: ${bytechef.analytics.enabled}
    postHog:
      apiKey: ${post-hog.api-key:}
      host: ${post-hog.host:}
  application:
    edition: ${bytechef.edition:}
  featureFlags: ${bytechef.feature-flags}
  helpHub:
    enabled: ${bytechef.help-hub.enabled}
    commandBar:
      orgId: ${command-bar.org-id:}
  signUp:
    activationRequired: ${bytechef.sign-up.activation-required}
    enabled: ${bytechef.sign-up.enabled}

management:
  endpoints:
    web:
      exposure:
        include:
          - configprops
          - env
          - health
          - info
          - logfile
          - loggers
          - prometheus
          - threaddump
          - caches
          - liquibase
  endpoint:
    env:
      show-values: when_authorized
    health:
      showDetails: always
      probes:
        enabled: true
      group:
        liveness:
          include: livenessState
        readiness:
          include: readinessState,db
  health:
    neo4j:
      enabled: false
  info:
    git:
      mode: full
    env:
      enabled: true
  metrics:
    enable:
      http: true
      jvm: true
      logback: true
      process: true
      system: true
    distribution:
      percentiles-histogram:
        all: true
      percentiles:
        all: 0, 0.5, 0.75, 0.95, 0.99, 1.0
    tags:
      application: ${spring.application.name}
  observations:
    key-values:
      application: ${spring.application.name}
  # Prometheus is the default metrics backend
  prometheus:
    metrics:
      export:
        enabled: true
        step: 60
  tracing:
    sampling:
      probability: 1.0
  otlp:
    tracing:
      endpoint: ${bytechef.tracing.otlp.endpoint}

openapi:
  openAPIDefinition:
    base-path:
      automation: /api/automation
      embedded: /api/embedded
      platform: /api/platform

spring:
  ai:
    mcp:
      server:
        name: bytechef-mcp-server
        sse-endpoint: /api/sse
        sse-message-endpoint: /api/v1/mcp/message
        request-timeout: 300000
  application:
    name: server-app
  cache:
    type: ${bytechef.cache.provider}
  cloud:
    aws:
      secretsmanager:
        enabled: false
  datasource:
    type: com.zaxxer.hikari.HikariDataSource
    url: ${bytechef.datasource.url}
    username: ${bytechef.datasource.username}
    password: ${bytechef.datasource.password}
    hikari:
      connection-test-query: SELECT 1
      poolName: Hikari
  h2:
    console:
      enabled: false
  graphql:
    schema:
      locations: classpath*:graphql/**/
  jmx:
    enabled: false
  mail:
    host: ${bytechef.mail.host}
    port: ${bytechef.mail.port}
    username: ${bytechef.mail.username}
    password: ${bytechef.mail.password}
    properties:
      mail:
        debug: ${bytechef.mail.debug}
        smtp:
          auth: ${bytechef.mail.auth}
          starttls:
            enable: ${bytechef.mail.starttls.enable}
            required: ${bytechef.mail.starttls.required}
        transport:
          protocol: ${bytechef.mail.protocol}
    protocol: ${bytechef.mail.protocol}
    ssl:
      enabled: ${bytechef.mail.ssl.enabled}
  liquibase:
    contexts: mono, #spring.profiles.active#
  output:
    ansi:
      enabled: always
  profiles:
    active: #spring.profiles.active#
    group:
      dev:
        - dev
        - api-docs
  rabbitmq:
    listener:
      direct:
        prefetch: 1
  shell:
    noninteractive:
      enabled: false
  quartz:
    job-store-type: jdbc
    jdbc:
      initialize-schema: never
    properties:
      org.quartz.jobStore.driverDelegateClass: org.quartz.impl.jdbcjobstore.PostgreSQLDelegate
  task:
    execution:
      thread-name-prefix: server-app-task-
      pool:
#        core-size: 2
        max-size: 50
        queue-capacity: 10000
    scheduling:
      thread-name-prefix: server-app-scheduling-
      pool:
        size: 2
  threads:
    virtual:
#      enabled: true

server:
  servlet:
    session:
      cookie:
        http-only: true

springdoc:
  show-actuator: true
  swagger-ui:
    operationsSorter: method
    tags-sorter: alpha

templates:
  owner: bytechefhq
  ref: master
  repo: bytechef-workflows
  submission-form:
    projects: https://forms.gle/W6zsUuwd7qPtoE836
    workflows: https://forms.gle/xA8yyUSzKkHYajHx5

######################################################################

bytechef:
  ai:
    copilot:
      enabled: false
  analytics:
    enabled: false
  cache:
    # Cache provider (redis | caffeine) default: caffeine
    provider: caffeine
  coordinator:
    trigger:
      polling:
        # Trigger polling interval in minutes (default: 5)
        check-period: 5
      scheduler:
        # Trigger scheduler provider (aws(ee) | quartz) default: quartz
        provider: quartz
  data-storage:
    # Data storage provider (aws(ee) | filesystem | jdbc) default: jdbc
    provider: jdbc
  # Edition (CE - Community Edition | EE - Enterprise Edition) default: EE
  edition: EE
  # Encryption key provider (filesystem - the key generated on filesystem, property - the key read from property) default: filesystem
  encryption:
    provider: filesystem
  file-storage:
    # File storage provider (aws(ee) | filesystem | jdbc) default: filesystem
    provider: filesystem
    filesystem:
      basedir: ${user.home}/bytechef/data/file-storage
  help-hub:
    enabled: false
  mail:
    auth: false
    base-url: ${bytechef.public-url}
    debug: false
    from: noreply@app.bytechef.io
    host: localhost
    port: 25
    protocol: smtp
    ssl:
      enabled: false
    starttls:
      enable: false
      required: false
  message-broker:
    # Messaging provider between Coordinator and Workers (amqp | jms | kafka | redis) default: jms
    provider: jms
  oauth2:
#    predefinedApps:
#      mailchimp:
#        clientId: 123456789
#        clientSecret: 123456789
    redirect-uri: ${bytechef.public-url}/callback
  observability:
    loki:
      appender:
        level: "ALL"
        http:
          url: http://localhost:3100/loki/api/v1/push
    enabled: false
  public-url:
  resources:
    web: file:///opt/bytechef/client/
  security:
    content-security-policy: "default-src 'self'; frame-src 'self' https://*.command.ai data:; script-src 'self' 'unsafe-inline' 'unsafe-eval' https://*.command.ai https://*.commandbar.com https://*.i.posthog.com https://cdn.jsdelivr.net https://storage.googleapis.com https://unpkg.com; style-src 'self' 'unsafe-inline' https://*.commandbar.com https://cdn.jsdelivr.net https://*.command.ai https://unpkg.com; img-src 'self' https://*.command.ai data:; font-src 'self' data:; media-src 'self' https://*.command.ai; connect-src 'self' https://*.command.ai https://*.i.posthog.com https://*.commandbar.com; worker-src blob: 'self';"
    system:
      username: system_admin
      password:
  sign-up:
    activation-required: false
  # Tenant support mode (single | multi - ee only) default: single
  tenant:
    mode: single
  tracing:
    otlp:
      endpoint: http://localhost:4318/v1/traces
  webhook-url:
  # When the worker is enabled, subscribe to the default "default" queue with 10 concurrent consumers.
  # You may also route workflow tasks to other arbitrarily named task queues by specifying the "node"
  # property on any given task.
  # E.g. node: captions will route to the captions queue which a worker would subscribe to with workflow.worker.subscriptions.captions.
  # Note: queue must be created before tasks can be routed to it. ByteChef will create the queue if it isn't already there when the worker
  # bootstraps.
  worker:
    task:
      subscriptions:
        default: 10
  workflow:
    output-storage:
      # Output storage provider for workflow output data (aws(ee) | filesystem | jdbc) default: jdbc
      provider: jdbc
    repository:
      jdbc:
        enabled: true
