---
# Conditionally disable springdoc on missing api-docs profile
spring:
  config:
    activate:
      on-profile: '!api-docs'
springdoc:
  api-docs:
    enabled: false
---

management:
  endpoints:
    web:
      exposure:
        include: '*'
  endpoint:
    health:
      show-details: when_authorized
      roles: 'ROLE_ADMIN'
      probes:
        enabled: true
      group:
        liveness:
          include: livenessState
        readiness:
          include: readinessState,db
  info:
    git:
      mode: full
    env:
      enabled: true
  health:
    mail:
      enabled: false # When using the MailService, configure an SMTP server and set this to true
  metrics:
    export:
      # Prometheus is the default metrics backend
      prometheus:
        enabled: true
        step: 60
    enable:
      http: true
      jvm: true
      logback: true
      process: true
      system: true
    distribution:
      percentiles-histogram:
        all: true
      percentiles:
        all: 0, 0.5, 0.75, 0.95, 0.99, 1.0
    tags:
      application: ${spring.application.name}
    web:
      server:
        request:
          autotime:
            enabled: true

openapi:
  openAPIDefinition:
    base-path: /api

spring:
  application:
    name: server-app
  cache:
    type: simple
  cloud:
    consul:
      enabled: false
  jackson:
    default-property-inclusion: non_null
    serialization:
      write-dates-as-timestamps: false
      write-null-map-values: false
    date-format: ${workflow.serialization.date-format}
    time-zone: UTC
  profiles:
    active: #spring.profiles.active#
    group:
      dev:
        - dev
        - api-docs
  jmx:
    enabled: false
  output:
    ansi:
      console-available: true
  rabbitmq:
    listener:
      direct:
        prefetch: 1
  task:
    execution:
      thread-name-prefix: server-app-task-
      pool:
        core-size: 2
        max-size: 50
        queue-capacity: 10000
    scheduling:
      thread-name-prefix: server-app-scheduling-
      pool:
        size: 2

server:
  servlet:
    session:
      cookie:
        http-only: true

springdoc:
  show-actuator: true

#####

workflow:
  context-repository:
    provider: jdbc
  # Messaging provider between Coordinator and Workers (jms | amqp | kafka) default: jms
  message-broker:
    provider: jms
  persistence:
    provider: jdbc
  serialization:
    date-format: yyyy-MM-dd'T'HH:mm:ss.SSSZZ
  # When worker is enabled, subscribe to the default "tasks" queue with 5 concurrent consumers.
  # You may also route workflow tasks to other arbitrarily named task queues by specifying the "node"
  # property on any given task.
  # E.g. node: captions will route to the captions queue which a worker would subscribe to with workflow.worker.subscriptions.captions.
  # Note: queue must be created before tasks can be routed to it. ByteChef will create the queue if it isn't already there when the worker
  # bootstraps.
  worker:
    subscriptions:
      tasks: "10"
  workflow-repository:
    # Enable classpath based workflow repository
    classpath:
      enabled: true
    # Enable file system based workflow repository
    filesystem:
      enabled: true
      # Location of workflows on the file system
      location-pattern: $HOME/bytechef/**/*.yaml
    # Enable a git-based workflow repository
    git:
      enabled: false
      # The URL to the Git Repo
      url: https://github.com/bytechefhq/bytechef-workflows.git
      branch: master
      username:
      password:
      # Folders within the git repo that are scanned for workflows
      search-paths:
    jdbc:
      enabled: true

file:
  storage:
    provider: filesystem
    file-storage-dir: /tmp/bytechef/files
