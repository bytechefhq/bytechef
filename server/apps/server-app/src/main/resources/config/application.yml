---
# Conditionally disable springdoc on missing api-docs profile
spring:
  config:
    activate:
      on-profile: '!api-docs'
springdoc:
  api-docs:
    enabled: false
---

management:
  endpoints:
    web:
      exposure:
        include: '*'
  endpoint:
    health:
      show-details: when_authorized
      roles: 'ROLE_ADMIN'
      probes:
        enabled: true
      group:
        liveness:
          include: livenessState
        readiness:
          include: readinessState,db
  info:
    git:
      mode: full
    env:
      enabled: true
  metrics:
    enable:
      http: true
      jvm: true
      logback: true
      process: true
      system: true
    distribution:
      percentiles-histogram:
        all: true
      percentiles:
        all: 0, 0.5, 0.75, 0.95, 0.99, 1.0
    tags:
      application: ${spring.application.name}
    web:
      server:
        request:
          autotime:
            enabled: true
  # Prometheus is the default metrics backend
  prometheus:
    metrics:
      export:
        enabled: true
        step: 60

openapi:
  openAPIDefinition:
    base-path:
      automation: /api/automation
      embedded: /api/embedded
      platform: /api/platform


spring:
  application:
    name: server-app
  cache:
    type: ${bytechef.cache.provider}
  datasource:
    type: com.zaxxer.hikari.HikariDataSource
    url: ${bytechef.datasource.url}
    username: ${bytechef.datasource.username}
    password: ${bytechef.datasource.password}
    hikari:
      poolName: Hikari
  jmx:
    enabled: false
  liquibase:
    contexts: mono
  output:
    ansi:
      console-available: true
  profiles:
    active: #spring.profiles.active#
    group:
      dev:
        - dev
        - api-docs
  rabbitmq:
    listener:
      direct:
        prefetch: 1
  quartz:
    job-store-type: jdbc
    jdbc:
      initialize-schema: never
    properties:
      org.quartz.jobStore.driverDelegateClass: org.quartz.impl.jdbcjobstore.PostgreSQLDelegate
  task:
    execution:
      thread-name-prefix: server-app-task-
      pool:
        core-size: 2
        max-size: 50
        queue-capacity: 10000
  threads:
    virtual:
#      enabled: true

server:
  servlet:
    session:
      cookie:
        http-only: true

springdoc:
  show-actuator: true
  swagger-ui:
    operationsSorter: method
    tags-sorter: alpha

#####

bytechef:
  cache:
    # Cache provider (redis | simple) default: simple
    provider: simple
  data-storage:
    provider: db
  encryption:
    provider: filesystem
  file-storage:
    # File storage provider for files (base64 | filesystem) default: filesystem
    provider: filesystem
    filesystem:
      basedir: ${user.home}/bytechef/data/file-storage
  message-broker:
    # Messaging provider between Coordinator and Workers (amqp | jms | kafka | redis) default: jms
    provider: jms
  oauth2:
#    predefinedApps:
#      mailchimp:
#        clientId: 123456789
#        clientSecret: 123456789
    redirect-uri: ${bytechef.public-url}/callback
  public-url: http://127.0.0.1:5173
  webhook-url: http://127.0.0.1:9555/webhooks/{id}
  # When the worker is enabled, subscribe to the default "default" queue with 10 concurrent consumers.
  # You may also route workflow tasks to other arbitrarily named task queues by specifying the "node"
  # property on any given task.
  # E.g. node: captions will route to the captions queue which a worker would subscribe to with workflow.worker.subscriptions.captions.
  # Note: queue must be created before tasks can be routed to it. ByteChef will create the queue if it isn't already there when the worker
  # bootstraps.
  worker:
    task:
      subscriptions:
        default: "10"
  workflow:
    output-storage:
      # Output storage provider for workflow output data (base64 | filesystem) default: base64
      provider: base64
    repository:
      classpath:
        # Enable classpath based workflow repository
        enabled: false
        projects:
          location-pattern: workflows/projects/**/*.{json,yml,yaml}
      filesystem:
        # Enable filesystem based workflow repository
        enabled: true
        projects:
          # Location of workflows on the file system
          location-pattern: ${user.home}/bytechef/data/workflows/projects/**/*.{json,yml,yaml}
        watch: true
      git:
        # Enable a git-based workflow repository
        enabled: false
        projects:
          # The URL to the Git Repo
          url: https://github.com/bytechefhq/bytechef-workflows.git
          branch: master
          username:
          password:
          # Folders within the git repo that are scanned for workflows
          search-paths:
            - projects
      jdbc:
        enabled: true
