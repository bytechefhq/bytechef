plugins {
    id "checkstyle"
    id "com.diffplug.spotless"
    id "com.github.ben-manes.versions"
    id "com.github.spotbugs"
    id "com.integri.java-common-conventions"
    id "org.sonarqube"
}

allprojects {
    apply plugin: "com.github.ben-manes.versions"
}

subprojects {
    apply plugin: "checkstyle"
    apply plugin: "com.diffplug.spotless"
    apply plugin: "com.github.spotbugs"
    apply plugin: "com.integri.java-common-conventions"
    apply plugin: "org.sonarqube"

    apply from: "${rootDir}/gradle/sonar.gradle"

    eclipse {
        sourceSets {
            main {
                java {
                    srcDirs += ["build/generated/sources/annotationProcessor/java/main"]
                }
            }
        }
    }

    idea {
        module {
            excludeDirs += files("node_modules")
        }
    }

    checkstyle {
        toolVersion "${checkstyleVersion}"
        configFile file("${rootDir}/checkstyle.xml")
        checkstyleTest.enabled = false
    }

    spotbugs {
        excludeFilter = file("${rootDir}/spotbugs-exclude.xml")
    }

    spotless {
        format "misc", {
            // define the files to apply `misc` to
            target "*.gradle", "src/*/java/**/*.java", "*.md", ".gitignore"

            trimTrailingWhitespace()
            indentWithSpaces(4)
            endWithNewline()
        }
        java {
            target "src/*/java/**/*.java"

            importOrder()
            licenseHeader(
                '''
                /*
                 * Copyright 2021 <your company/name>.
                 *
                 * Licensed under the Apache License, Version 2.0 (the "License");
                 * you may not use this file except in compliance with the License.
                 * You may obtain a copy of the License at
                 *
                 *      https://www.apache.org/licenses/LICENSE-2.0
                 *
                 * Unless required by applicable law or agreed to in writing, software
                 * distributed under the License is distributed on an "AS IS" BASIS,
                 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
                 * See the License for the specific language governing permissions and
                 * limitations under the License.
                 */
                '''
            ).named(
                "standard"
            )
            licenseHeader(
                '''
                /*
                 * Copyright 2016-2018 the original author or authors.
                 *
                 * Licensed under the Apache License, Version 2.0 (the "License");
                 * you may not use this file except in compliance with the License.
                 * You may obtain a copy of the License at
                 *
                 *      https://www.apache.org/licenses/LICENSE-2.0
                 *
                 * Unless required by applicable law or agreed to in writing, software
                 * distributed under the License is distributed on an "AS IS" BASIS,
                 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
                 * See the License for the specific language governing permissions and
                 * limitations under the License.
                 *
                 * Modifications copyright (C) 2021 <your company/name>
                 */
                '''
            ).named(
                "original"
            ).onlyIfContentMatches(
                "author\\sArik\\sCohen"
            )
            prettier(["prettier": "2.4.0", "prettier-plugin-java": "1.4.0"]).config(["parser": "java", "printWidth": 120, "tabWidth": 4, "useTabs": false])
        }
    }

    test {
        useJUnitPlatform()
        exclude "**/*IntTest*"
        testLogging {
            events "FAILED", "SKIPPED"
        }
        jvmArgs += "-Djava.security.egd=file:/dev/./urandom -Xmx256m"
        // uncomment if the tests reports are not generated
        // ignoreFailures true
        reports.html.enabled = false
    }

    task integrationTest(type: Test) {
        useJUnitPlatform()
        description = "Execute integration tests."
        group = "verification"
        include "**/*IntTest*"
        testLogging {
            events "FAILED", "SKIPPED"
        }
        jvmArgs += "-Djava.security.egd=file:/dev/./urandom -Xmx256m"

        if (project.hasProperty("testcontainers")) {
            environment "spring.profiles.active", "testcontainers"
        }

        // uncomment if the tests reports are not generated
        // ignoreFailures true
        reports.html.enabled = false
    }

    check.dependsOn integrationTest

    task testReport(type: TestReport) {
        destinationDir = file("$buildDir/reports/tests")
        reportOn test
    }

    task integrationTestReport(type: TestReport) {
        destinationDir = file("$buildDir/reports/tests")
        reportOn integrationTest
    }

    task cleanResources(type: Delete) {
        delete "build/resources"
    }

    configurations {
        all {
            /* exclude junit 4 dependencies */
            exclude group: 'junit', module: 'junit'
            exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
        }
    }
}

wrapper {
    gradleVersion = "7.4.0"
}
