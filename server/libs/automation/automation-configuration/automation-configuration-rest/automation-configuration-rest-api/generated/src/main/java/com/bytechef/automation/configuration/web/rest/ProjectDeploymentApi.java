/*
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.15.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.bytechef.automation.configuration.web.rest;

import com.bytechef.automation.configuration.web.rest.model.CreateProjectDeploymentWorkflowJob200ResponseModel;
import com.bytechef.automation.configuration.web.rest.model.ProjectDeploymentModel;
import com.bytechef.automation.configuration.web.rest.model.ProjectDeploymentWorkflowModel;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.ExampleObject;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.lang.Nullable;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-10-02T07:57:57.527930782+02:00[Europe/Zagreb]", comments = "Generator version: 7.15.0")
@Validated
@Tag(name = "project-deployment", description = "The Automation Project Deployment Internal API")
public interface ProjectDeploymentApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    public static final String PATH_CREATE_PROJECT_DEPLOYMENT = "/project-deployments";
    /**
     * POST /project-deployments : Create a new project deployment
     * Create a new project deployment.
     *
     * @param projectDeploymentModel  (required)
     * @return The project deployment id. (status code 200)
     */
    @Operation(
        operationId = "createProjectDeployment",
        summary = "Create a new project deployment",
        description = "Create a new project deployment.",
        tags = { "project-deployment" },
        responses = {
            @ApiResponse(responseCode = "200", description = "The project deployment id.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Long.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = ProjectDeploymentApi.PATH_CREATE_PROJECT_DEPLOYMENT,
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Long> createProjectDeployment(
        @Parameter(name = "ProjectDeploymentModel", description = "", required = true) @Valid @RequestBody ProjectDeploymentModel projectDeploymentModel
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    public static final String PATH_CREATE_PROJECT_DEPLOYMENT_WORKFLOW_JOB = "/project-deployments/{id}/workflows/{workflowId}/jobs";
    /**
     * POST /project-deployments/{id}/workflows/{workflowId}/jobs : Create a request for running a new job
     * Create a request for running a new job.
     *
     * @param id The id of a project deployment. (required)
     * @param workflowId The id of the workflow to execute. (required)
     * @return The id of a created job. (status code 200)
     */
    @Operation(
        operationId = "createProjectDeploymentWorkflowJob",
        summary = "Create a request for running a new job",
        description = "Create a request for running a new job.",
        tags = { "project-deployment" },
        responses = {
            @ApiResponse(responseCode = "200", description = "The id of a created job.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = CreateProjectDeploymentWorkflowJob200ResponseModel.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = ProjectDeploymentApi.PATH_CREATE_PROJECT_DEPLOYMENT_WORKFLOW_JOB,
        produces = { "application/json" }
    )
    
    default ResponseEntity<CreateProjectDeploymentWorkflowJob200ResponseModel> createProjectDeploymentWorkflowJob(
        @Parameter(name = "id", description = "The id of a project deployment.", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id,
        @Parameter(name = "workflowId", description = "The id of the workflow to execute.", required = true, in = ParameterIn.PATH) @PathVariable("workflowId") String workflowId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"jobId\" : 0 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    public static final String PATH_DELETE_PROJECT_DEPLOYMENT = "/project-deployments/{id}";
    /**
     * DELETE /project-deployments/{id} : Delete a project deployment
     * Delete a project deployment.
     *
     * @param id The id of a project deployment. (required)
     * @return Successful operation. (status code 204)
     */
    @Operation(
        operationId = "deleteProjectDeployment",
        summary = "Delete a project deployment",
        description = "Delete a project deployment.",
        tags = { "project-deployment" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Successful operation.")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = ProjectDeploymentApi.PATH_DELETE_PROJECT_DEPLOYMENT
    )
    
    default ResponseEntity<Void> deleteProjectDeployment(
        @Parameter(name = "id", description = "The id of a project deployment.", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    public static final String PATH_ENABLE_PROJECT_DEPLOYMENT = "/project-deployments/{id}/enable/{enable}";
    /**
     * PATCH /project-deployments/{id}/enable/{enable} : Enable/disable a project deployment
     * Enable/disable a project deployment.
     *
     * @param id The id of a project deployment. (required)
     * @param enable Enable/disable the project deployment. (required)
     * @return Successful operation. (status code 204)
     */
    @Operation(
        operationId = "enableProjectDeployment",
        summary = "Enable/disable a project deployment",
        description = "Enable/disable a project deployment.",
        tags = { "project-deployment" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Successful operation.")
        }
    )
    @RequestMapping(
        method = RequestMethod.PATCH,
        value = ProjectDeploymentApi.PATH_ENABLE_PROJECT_DEPLOYMENT
    )
    
    default ResponseEntity<Void> enableProjectDeployment(
        @Parameter(name = "id", description = "The id of a project deployment.", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id,
        @Parameter(name = "enable", description = "Enable/disable the project deployment.", required = true, in = ParameterIn.PATH) @PathVariable("enable") Boolean enable
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    public static final String PATH_ENABLE_PROJECT_DEPLOYMENT_WORKFLOW = "/project-deployments/{id}/workflows/{workflowId}/enable/{enable}";
    /**
     * PATCH /project-deployments/{id}/workflows/{workflowId}/enable/{enable} : Enable/disable a workflow of a project deployment
     * Enable/disable a workflow of a project deployment.
     *
     * @param id The id of a project deployment. (required)
     * @param workflowId The id of a project workflow. (required)
     * @param enable Enable/disable the workflow of a project deployment. (required)
     * @return Successful operation. (status code 204)
     */
    @Operation(
        operationId = "enableProjectDeploymentWorkflow",
        summary = "Enable/disable a workflow of a project deployment",
        description = "Enable/disable a workflow of a project deployment.",
        tags = { "project-deployment" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Successful operation.")
        }
    )
    @RequestMapping(
        method = RequestMethod.PATCH,
        value = ProjectDeploymentApi.PATH_ENABLE_PROJECT_DEPLOYMENT_WORKFLOW
    )
    
    default ResponseEntity<Void> enableProjectDeploymentWorkflow(
        @Parameter(name = "id", description = "The id of a project deployment.", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id,
        @Parameter(name = "workflowId", description = "The id of a project workflow.", required = true, in = ParameterIn.PATH) @PathVariable("workflowId") String workflowId,
        @Parameter(name = "enable", description = "Enable/disable the workflow of a project deployment.", required = true, in = ParameterIn.PATH) @PathVariable("enable") Boolean enable
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    public static final String PATH_GET_PROJECT_DEPLOYMENT = "/project-deployments/{id}";
    /**
     * GET /project-deployments/{id} : Get a project deployment by id
     * Get a project deployment by id.
     *
     * @param id The id of a project deployment. (required)
     * @return The project deployment object. (status code 200)
     */
    @Operation(
        operationId = "getProjectDeployment",
        summary = "Get a project deployment by id",
        description = "Get a project deployment by id.",
        tags = { "project-deployment" },
        responses = {
            @ApiResponse(responseCode = "200", description = "The project deployment object.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ProjectDeploymentModel.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = ProjectDeploymentApi.PATH_GET_PROJECT_DEPLOYMENT,
        produces = { "application/json" }
    )
    
    default ResponseEntity<ProjectDeploymentModel> getProjectDeployment(
        @Parameter(name = "id", description = "The id of a project deployment.", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"lastModifiedDate\" : \"2000-01-23T04:56:07.000+00:00\", \"lastModifiedBy\" : \"lastModifiedBy\", \"description\" : \"description\", \"enabled\" : true, \"tags\" : [ { \"__version\" : 6, \"createdDate\" : \"2000-01-23T04:56:07.000+00:00\", \"createdBy\" : \"createdBy\", \"lastModifiedDate\" : \"2000-01-23T04:56:07.000+00:00\", \"lastModifiedBy\" : \"lastModifiedBy\", \"name\" : \"name\", \"id\" : 0 }, { \"__version\" : 6, \"createdDate\" : \"2000-01-23T04:56:07.000+00:00\", \"createdBy\" : \"createdBy\", \"lastModifiedDate\" : \"2000-01-23T04:56:07.000+00:00\", \"lastModifiedBy\" : \"lastModifiedBy\", \"name\" : \"name\", \"id\" : 0 } ], \"__version\" : 3, \"createdDate\" : \"2000-01-23T04:56:07.000+00:00\", \"environmentId\" : 0, \"createdBy\" : \"createdBy\", \"name\" : \"name\", \"id\" : 6, \"lastExecutionDate\" : \"2000-01-23T04:56:07.000+00:00\", \"projectId\" : 1, \"projectDeploymentWorkflows\" : [ { \"lastModifiedDate\" : \"2000-01-23T04:56:07.000+00:00\", \"inputs\" : { \"key\" : \"\" }, \"lastModifiedBy\" : \"lastModifiedBy\", \"enabled\" : true, \"__version\" : 9, \"createdDate\" : \"2000-01-23T04:56:07.000+00:00\", \"createdBy\" : \"createdBy\", \"staticWebhookUrl\" : \"staticWebhookUrl\", \"id\" : 2, \"lastExecutionDate\" : \"2000-01-23T04:56:07.000+00:00\", \"projectDeploymentId\" : 7, \"connections\" : [ { \"workflowNodeName\" : \"workflowNodeName\", \"workflowConnectionKey\" : \"workflowConnectionKey\", \"connectionId\" : 5 }, { \"workflowNodeName\" : \"workflowNodeName\", \"workflowConnectionKey\" : \"workflowConnectionKey\", \"connectionId\" : 5 } ], \"workflowId\" : \"workflowId\", \"workflowUuid\" : \"workflowUuid\" }, { \"lastModifiedDate\" : \"2000-01-23T04:56:07.000+00:00\", \"inputs\" : { \"key\" : \"\" }, \"lastModifiedBy\" : \"lastModifiedBy\", \"enabled\" : true, \"__version\" : 9, \"createdDate\" : \"2000-01-23T04:56:07.000+00:00\", \"createdBy\" : \"createdBy\", \"staticWebhookUrl\" : \"staticWebhookUrl\", \"id\" : 2, \"lastExecutionDate\" : \"2000-01-23T04:56:07.000+00:00\", \"projectDeploymentId\" : 7, \"connections\" : [ { \"workflowNodeName\" : \"workflowNodeName\", \"workflowConnectionKey\" : \"workflowConnectionKey\", \"connectionId\" : 5 }, { \"workflowNodeName\" : \"workflowNodeName\", \"workflowConnectionKey\" : \"workflowConnectionKey\", \"connectionId\" : 5 } ], \"workflowId\" : \"workflowId\", \"workflowUuid\" : \"workflowUuid\" } ], \"projectVersion\" : 5 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    public static final String PATH_GET_WORKSPACE_PROJECT_DEPLOYMENTS = "/workspaces/{id}/project-deployments";
    /**
     * GET /workspaces/{id}/project-deployments : Get project deployments
     * Get project deployments.
     *
     * @param id The id of a workspace. (required)
     * @param environmentId The id of an environment. (optional)
     * @param projectId The project ids used for filtering project deployments. (optional)
     * @param tagId The tag id of used for filtering project deployments. (optional)
     * @param includeAllFields Use for including all fields or just basic ones. (optional, default to true)
     * @return The list of project deployments. (status code 200)
     */
    @Operation(
        operationId = "getWorkspaceProjectDeployments",
        summary = "Get project deployments",
        description = "Get project deployments.",
        tags = { "project-deployment" },
        responses = {
            @ApiResponse(responseCode = "200", description = "The list of project deployments.", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = ProjectDeploymentModel.class)))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = ProjectDeploymentApi.PATH_GET_WORKSPACE_PROJECT_DEPLOYMENTS,
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<ProjectDeploymentModel>> getWorkspaceProjectDeployments(
        @Parameter(name = "id", description = "The id of a workspace.", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id,
        @Parameter(name = "environmentId", description = "The id of an environment.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "environmentId", required = false) @Nullable Long environmentId,
        @Parameter(name = "projectId", description = "The project ids used for filtering project deployments.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "projectId", required = false) @Nullable Long projectId,
        @Parameter(name = "tagId", description = "The tag id of used for filtering project deployments.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "tagId", required = false) @Nullable Long tagId,
        @Parameter(name = "includeAllFields", description = "Use for including all fields or just basic ones.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "includeAllFields", required = false, defaultValue = "true") Boolean includeAllFields
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"lastModifiedDate\" : \"2000-01-23T04:56:07.000+00:00\", \"lastModifiedBy\" : \"lastModifiedBy\", \"description\" : \"description\", \"enabled\" : true, \"tags\" : [ { \"__version\" : 6, \"createdDate\" : \"2000-01-23T04:56:07.000+00:00\", \"createdBy\" : \"createdBy\", \"lastModifiedDate\" : \"2000-01-23T04:56:07.000+00:00\", \"lastModifiedBy\" : \"lastModifiedBy\", \"name\" : \"name\", \"id\" : 0 }, { \"__version\" : 6, \"createdDate\" : \"2000-01-23T04:56:07.000+00:00\", \"createdBy\" : \"createdBy\", \"lastModifiedDate\" : \"2000-01-23T04:56:07.000+00:00\", \"lastModifiedBy\" : \"lastModifiedBy\", \"name\" : \"name\", \"id\" : 0 } ], \"__version\" : 3, \"createdDate\" : \"2000-01-23T04:56:07.000+00:00\", \"environmentId\" : 0, \"createdBy\" : \"createdBy\", \"name\" : \"name\", \"id\" : 6, \"lastExecutionDate\" : \"2000-01-23T04:56:07.000+00:00\", \"projectId\" : 1, \"projectDeploymentWorkflows\" : [ { \"lastModifiedDate\" : \"2000-01-23T04:56:07.000+00:00\", \"inputs\" : { \"key\" : \"\" }, \"lastModifiedBy\" : \"lastModifiedBy\", \"enabled\" : true, \"__version\" : 9, \"createdDate\" : \"2000-01-23T04:56:07.000+00:00\", \"createdBy\" : \"createdBy\", \"staticWebhookUrl\" : \"staticWebhookUrl\", \"id\" : 2, \"lastExecutionDate\" : \"2000-01-23T04:56:07.000+00:00\", \"projectDeploymentId\" : 7, \"connections\" : [ { \"workflowNodeName\" : \"workflowNodeName\", \"workflowConnectionKey\" : \"workflowConnectionKey\", \"connectionId\" : 5 }, { \"workflowNodeName\" : \"workflowNodeName\", \"workflowConnectionKey\" : \"workflowConnectionKey\", \"connectionId\" : 5 } ], \"workflowId\" : \"workflowId\", \"workflowUuid\" : \"workflowUuid\" }, { \"lastModifiedDate\" : \"2000-01-23T04:56:07.000+00:00\", \"inputs\" : { \"key\" : \"\" }, \"lastModifiedBy\" : \"lastModifiedBy\", \"enabled\" : true, \"__version\" : 9, \"createdDate\" : \"2000-01-23T04:56:07.000+00:00\", \"createdBy\" : \"createdBy\", \"staticWebhookUrl\" : \"staticWebhookUrl\", \"id\" : 2, \"lastExecutionDate\" : \"2000-01-23T04:56:07.000+00:00\", \"projectDeploymentId\" : 7, \"connections\" : [ { \"workflowNodeName\" : \"workflowNodeName\", \"workflowConnectionKey\" : \"workflowConnectionKey\", \"connectionId\" : 5 }, { \"workflowNodeName\" : \"workflowNodeName\", \"workflowConnectionKey\" : \"workflowConnectionKey\", \"connectionId\" : 5 } ], \"workflowId\" : \"workflowId\", \"workflowUuid\" : \"workflowUuid\" } ], \"projectVersion\" : 5 }, { \"lastModifiedDate\" : \"2000-01-23T04:56:07.000+00:00\", \"lastModifiedBy\" : \"lastModifiedBy\", \"description\" : \"description\", \"enabled\" : true, \"tags\" : [ { \"__version\" : 6, \"createdDate\" : \"2000-01-23T04:56:07.000+00:00\", \"createdBy\" : \"createdBy\", \"lastModifiedDate\" : \"2000-01-23T04:56:07.000+00:00\", \"lastModifiedBy\" : \"lastModifiedBy\", \"name\" : \"name\", \"id\" : 0 }, { \"__version\" : 6, \"createdDate\" : \"2000-01-23T04:56:07.000+00:00\", \"createdBy\" : \"createdBy\", \"lastModifiedDate\" : \"2000-01-23T04:56:07.000+00:00\", \"lastModifiedBy\" : \"lastModifiedBy\", \"name\" : \"name\", \"id\" : 0 } ], \"__version\" : 3, \"createdDate\" : \"2000-01-23T04:56:07.000+00:00\", \"environmentId\" : 0, \"createdBy\" : \"createdBy\", \"name\" : \"name\", \"id\" : 6, \"lastExecutionDate\" : \"2000-01-23T04:56:07.000+00:00\", \"projectId\" : 1, \"projectDeploymentWorkflows\" : [ { \"lastModifiedDate\" : \"2000-01-23T04:56:07.000+00:00\", \"inputs\" : { \"key\" : \"\" }, \"lastModifiedBy\" : \"lastModifiedBy\", \"enabled\" : true, \"__version\" : 9, \"createdDate\" : \"2000-01-23T04:56:07.000+00:00\", \"createdBy\" : \"createdBy\", \"staticWebhookUrl\" : \"staticWebhookUrl\", \"id\" : 2, \"lastExecutionDate\" : \"2000-01-23T04:56:07.000+00:00\", \"projectDeploymentId\" : 7, \"connections\" : [ { \"workflowNodeName\" : \"workflowNodeName\", \"workflowConnectionKey\" : \"workflowConnectionKey\", \"connectionId\" : 5 }, { \"workflowNodeName\" : \"workflowNodeName\", \"workflowConnectionKey\" : \"workflowConnectionKey\", \"connectionId\" : 5 } ], \"workflowId\" : \"workflowId\", \"workflowUuid\" : \"workflowUuid\" }, { \"lastModifiedDate\" : \"2000-01-23T04:56:07.000+00:00\", \"inputs\" : { \"key\" : \"\" }, \"lastModifiedBy\" : \"lastModifiedBy\", \"enabled\" : true, \"__version\" : 9, \"createdDate\" : \"2000-01-23T04:56:07.000+00:00\", \"createdBy\" : \"createdBy\", \"staticWebhookUrl\" : \"staticWebhookUrl\", \"id\" : 2, \"lastExecutionDate\" : \"2000-01-23T04:56:07.000+00:00\", \"projectDeploymentId\" : 7, \"connections\" : [ { \"workflowNodeName\" : \"workflowNodeName\", \"workflowConnectionKey\" : \"workflowConnectionKey\", \"connectionId\" : 5 }, { \"workflowNodeName\" : \"workflowNodeName\", \"workflowConnectionKey\" : \"workflowConnectionKey\", \"connectionId\" : 5 } ], \"workflowId\" : \"workflowId\", \"workflowUuid\" : \"workflowUuid\" } ], \"projectVersion\" : 5 } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    public static final String PATH_UPDATE_PROJECT_DEPLOYMENT = "/project-deployments/{id}";
    /**
     * PUT /project-deployments/{id} : Update an existing project deployment
     * Update an existing project deployment.
     *
     * @param id The id of a project deployment. (required)
     * @param projectDeploymentModel  (required)
     * @return Successful operation. (status code 204)
     */
    @Operation(
        operationId = "updateProjectDeployment",
        summary = "Update an existing project deployment",
        description = "Update an existing project deployment.",
        tags = { "project-deployment" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Successful operation.")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = ProjectDeploymentApi.PATH_UPDATE_PROJECT_DEPLOYMENT,
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Void> updateProjectDeployment(
        @Parameter(name = "id", description = "The id of a project deployment.", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id,
        @Parameter(name = "ProjectDeploymentModel", description = "", required = true) @Valid @RequestBody ProjectDeploymentModel projectDeploymentModel
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    public static final String PATH_UPDATE_PROJECT_DEPLOYMENT_WORKFLOW = "/project-deployments/{id}/project-deployment-workflows/{projectDeploymentWorkflowId}";
    /**
     * PUT /project-deployments/{id}/project-deployment-workflows/{projectDeploymentWorkflowId} : Update an existing project deployment workflow
     * Update an existing project deployment workflow.
     *
     * @param id The id of a project deployment. (required)
     * @param projectDeploymentWorkflowId The id of a project deployment workflow. (required)
     * @param projectDeploymentWorkflowModel  (required)
     * @return Successful operation. (status code 204)
     */
    @Operation(
        operationId = "updateProjectDeploymentWorkflow",
        summary = "Update an existing project deployment workflow",
        description = "Update an existing project deployment workflow.",
        tags = { "project-deployment" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Successful operation.")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = ProjectDeploymentApi.PATH_UPDATE_PROJECT_DEPLOYMENT_WORKFLOW,
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Void> updateProjectDeploymentWorkflow(
        @Parameter(name = "id", description = "The id of a project deployment.", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id,
        @Parameter(name = "projectDeploymentWorkflowId", description = "The id of a project deployment workflow.", required = true, in = ParameterIn.PATH) @PathVariable("projectDeploymentWorkflowId") Long projectDeploymentWorkflowId,
        @Parameter(name = "ProjectDeploymentWorkflowModel", description = "", required = true) @Valid @RequestBody ProjectDeploymentWorkflowModel projectDeploymentWorkflowModel
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
