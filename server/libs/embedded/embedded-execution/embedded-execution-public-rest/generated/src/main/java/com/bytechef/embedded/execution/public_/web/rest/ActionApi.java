/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.10.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.bytechef.embedded.execution.public_.web.rest;

import com.bytechef.embedded.execution.public_.web.rest.model.EnvironmentModel;
import com.bytechef.embedded.execution.public_.web.rest.model.ExecuteAction200ResponseModel;
import com.bytechef.embedded.execution.public_.web.rest.model.ExecuteActionRequestModel;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-11-26T21:19:57.074921+01:00[Europe/Zagreb]", comments = "Generator version: 7.10.0")
@Validated
@Tag(name = "action", description = "The Embedded Component Action Public API")
public interface ActionApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /components/{componentName}/versions/{componentVersion}/actions/{actionName} : Executes an action of a component and returns the result as the response
     * Executes an action of a component and returns the result as the response.
     *
     * @param componentName The component name. (required)
     * @param componentVersion The component version. (required)
     * @param actionName The name of the action to call. (required)
     * @param xEnvironment The environment. (optional)
     * @param xInstanceId The integration instance Id that uniquely identifies the connected user&#39;s specific integration instance (optional)
     * @param executeActionRequestModel  (optional)
     * @return The list of component action objects. (status code 200)
     *         or Invalid Input (status code 400)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Not Found (status code 404)
     *         or Limit Exceeded (status code 429)
     *         or Internal Error (status code 500)
     */
    @Operation(
        operationId = "executeAction",
        summary = "Executes an action of a component and returns the result as the response",
        description = "Executes an action of a component and returns the result as the response.",
        tags = { "action" },
        responses = {
            @ApiResponse(responseCode = "200", description = "The list of component action objects.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExecuteAction200ResponseModel.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid Input"),
            @ApiResponse(responseCode = "401", description = "Unauthorized"),
            @ApiResponse(responseCode = "403", description = "Forbidden"),
            @ApiResponse(responseCode = "404", description = "Not Found"),
            @ApiResponse(responseCode = "429", description = "Limit Exceeded"),
            @ApiResponse(responseCode = "500", description = "Internal Error")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/components/{componentName}/versions/{componentVersion}/actions/{actionName}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<ExecuteAction200ResponseModel> executeAction(
        @Parameter(name = "componentName", description = "The component name.", required = true, in = ParameterIn.PATH) @PathVariable("componentName") String componentName,
        @Parameter(name = "componentVersion", description = "The component version.", required = true, in = ParameterIn.PATH) @PathVariable("componentVersion") Integer componentVersion,
        @Parameter(name = "actionName", description = "The name of the action to call.", required = true, in = ParameterIn.PATH) @PathVariable("actionName") String actionName,
        @Parameter(name = "x-environment", description = "The environment.", in = ParameterIn.HEADER) @RequestHeader(value = "x-environment", required = false) EnvironmentModel xEnvironment,
        @Parameter(name = "x-instance-id", description = "The integration instance Id that uniquely identifies the connected user's specific integration instance", in = ParameterIn.HEADER) @RequestHeader(value = "x-instance-id", required = false) Long xInstanceId,
        @Parameter(name = "ExecuteActionRequestModel", description = "") @Valid @RequestBody(required = false) ExecuteActionRequestModel executeActionRequestModel
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"output\" : \"{}\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
