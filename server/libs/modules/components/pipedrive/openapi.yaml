---
openapi: "3.0.1"
info:
  title: "Pipedrive API"
  version: "1.0.0"
servers:
  - url: "https://api.pipedrive.com/v1"
paths:
  /deals:
    get:
      summary: "Get deals"
      description: "Returns all deals."
      operationId: "getDeals"
      tags:
        - "Deals"
      parameters:
        - in: "query"
          name: "user_id"
          description: "Deals matching the given user will be returned. However, `filter_id` and `owned_by_you` takes precedence over `user_id` when supplied."
          schema:
            type: "integer"
            title: "User"
        - in: "query"
          name: "filter_id"
          description: "Filter to use."
          schema:
            type: "integer"
            title: "Filter"
        - in: "query"
          name: "stage_id"
          description: "Deals within the given stage will be returned."
          schema:
            type: "integer"
            title: "Stage"
        - in: "query"
          name: "status"
          schema:
            type: "string"
            description: "Only fetch deals with a specific status. If set to deleted, deals that have been deleted up to 30 days ago will be included."
            default: "all_not_deleted"
            enum:
              - "open"
              - "won"
              - "lost"
              - "deleted"
              - "all_not_deleted"
        - in: "query"
          name: "sort"
          description: "The field names and sorting mode separated by a comma. Only first-level field keys are supported (no nested keys)."
          example: "field_name_1 ASC, field_name_2 DESC"
          schema:
            type: "string"
      responses:
        200:
          description: "Get all deals"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  body:
                    type: "object"
                    properties:
                      data:
                        type: "array"
                        items:
                          type: "object"
                          properties:
                            id:
                              type: "integer"
                            user_id:
                              type: "object"
                              properties:
                                id:
                                  type: "integer"
                                name:
                                  type: "string"
                                email:
                                  type: "string"
                            person_id:
                              type: "object"
                              properties:
                                name:
                                  type: "string"
                            org_id:
                              type: "object"
                              properties:
                                name:
                                  type: "string"
                                owner_id:
                                  type: "string"
                            stage_id:
                              type: "integer"
                            title:
                              type: "string"
                            value:
                              type: "integer"
                            currency:
                              type: "string"
                            status:
                              type: "string"
    post:
      summary: "Add deal"
      description: "Adds a new deal."
      operationId: "addDeal"
      tags:
        - "Deals"
      requestBody:
        content:
          application/json:
            schema:
              title: "Deal"
              type: "object"
              required:
                - "title"
              properties:
                title:
                  type: "string"
                  description: "The title of the deal"
                value:
                  type: "string"
                  description: "The value of the deal."
                  default: "0"
                currency:
                  type: "string"
                  description: "The currency of the deal. If omitted, currency will be set to the default currency of the authorized user."
                user_id:
                  type: "integer"
                  title: "User"
                  description: "User which will be the owner of the  created deal. If not provided, the user making the request will be used."
                person_id:
                  type: "integer"
                  title: "Person"
                  description: "Person which this deal will be linked to. This property is required unless `org_id` is specified."
                org_id:
                  type: "integer"
                  title: "Organization"
                  description: "Organization which this deal will be linked to. This property is required unless `person_id` is specified."
                pipeline_id:
                  type: "integer"
                  title: "Pipeline"
                  description: "Pipeline this deal will be added to. By default, the deal will be added to the first stage of the specified pipeline. Please note that `pipeline_id` and `stage_id`\
                  \ should not be used together as `pipeline_id` will be ignored."
                stage_id:
                  type: "integer"
                  title: "Stage"
                  description: "Stage this deal will be added to.\
                  \ Please note that a pipeline will be assigned automatically\
                  \ based on the `stage_id`. If omitted, the deal will be placed\
                  \ in the first stage of the default pipeline."
                status:
                  type: "string"
                  default: "open"
                  enum:
                    - "open"
                    - "won"
                    - "lost"
                    - "deleted"
                expected_close_date:
                  type: "string"
                  format: "date"
                  description: "The expected close date of the deal."
                probability:
                  type: "number"
                  description: "The success probability percentage of the deal.\
                  \ Used/shown only when `deal_probability` for the pipeline of\
                  \ the deal is enabled."
                lost_reason:
                  type: "string"
                  description: "The optional message about why the deal was lost."
      responses:
        201:
          description: "Add a deal"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  body:
                    type: "object"
                    properties:
                      data:
                        type: "object"
                        properties:
                          id:
                            type: "integer"
                          user_id:
                            type: "object"
                            properties:
                              id:
                                type: "integer"
                              name:
                                type: "string"
                              email:
                                type: "string"
                          person_id:
                            type: "object"
                            properties:
                              name:
                                type: "string"
                          org_id:
                            type: "object"
                            properties:
                              name:
                                type: "string"
                              owner_id:
                                type: "string"
                          stage_id:
                            type: "integer"
                          title:
                            type: "string"
                          value:
                            type: "integer"
                          currency:
                            type: "string"
                          status:
                            type: "string"
  /deals/search:
    get:
      summary: "Search deals"
      description: "Searches all deals by title, notes and/or custom fields."
      operationId: "searchDeals"
      tags:
        - "Deals"
      parameters:
        - in: "query"
          name: "term"
          required: true
          schema:
            type: "string"
          description: "The search term to look for. Minimum 2 characters (or 1 if using `exact_match`). Please note that the search term has to be URL encoded."
        - in: "query"
          name: "fields"
          schema:
            type: "string"
            enum:
              - "custom_fields"
              - "notes"
              - "title"
          description: "A comma-separated string array. The fields to perform the search from. Defaults to all of them."
        - in: "query"
          name: "exact_match"
          schema:
            type: "boolean"
          description: "When enabled, only full exact matches against the given term are returned. It is <b>not</b> case sensitive."
        - in: "query"
          name: "person_id"
          schema:
            type: "integer"
            title: "Person"
          description: "Will filter deals by the provided person."
        - in: "query"
          name: "organization_id"
          schema:
            type: "integer"
            title: "Organization"
          description: "Will filter deals by the provided organization."
        - in: "query"
          name: "status"
          schema:
            type: "string"
            enum:
              - "open"
              - "won"
              - "lost"
          description: "Will filter deals by the provided specific status."
        - in: "query"
          name: "include_fields"
          schema:
            type: "string"
            enum:
              - "deal.cc_email"
          description: "Supports including optional fields in the results which are not provided by default."
      responses:
        200:
          description: "Success"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  body:
                    type: "object"
                    properties:
                      data:
                        type: "object"
                        properties:
                          items:
                            type: "array"
                            items:
                              type: "object"
                              properties:
                                id:
                                  type: "string"
                                type:
                                  type: "string"
                                user_id:
                                  type: "object"
                                  properties:
                                    id:
                                      type: "integer"
                                    name:
                                      type: "string"
                                    email:
                                      type: "string"
                                person_id:
                                  type: "object"
                                  properties:
                                    name:
                                      type: "string"
                                org_id:
                                  type: "object"
                                  properties:
                                    name:
                                      type: "string"
                                    owner_id:
                                      type: "string"
                                stage_id:
                                  type: "integer"
                                title:
                                  type: "string"
                                value:
                                  type: "integer"
                                currency:
                                  type: "string"
                                status:
                                  type: "string"
  /deals/{id}:
    delete:
      summary: "Delete deal"
      description: "Marks a deal as deleted. After 30 days, the deal will be permanently deleted."
      operationId: "deleteDeal"
      tags:
        - "Deals"
      parameters:
        - in: "path"
          name: "id"
          description: "Deal to delete"
          required: true
          schema:
            type: "integer"
            title: "Deal"
      responses:
        200:
          description: "Delete deal"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  body:
                    type: "object"
                    properties:
                      data:
                        type: "object"
                        properties:
                          id:
                            type: "integer"
    get:
      summary: "Get details of a deal"
      description: "Returns the details of a specific deal."
      operationId: "getDealDetails"
      tags:
        - "Deals"
      parameters:
        - in: "path"
          name: "id"
          required: true
          schema:
            type: "integer"
            title: "Deal"
      responses:
        200:
          description: "Successful"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  body:
                    type: "object"
                    properties:
                      data:
                        type: "object"
                        properties:
                          id:
                            type: "integer"
                          user_id:
                            type: "object"
                            properties:
                              id:
                                type: "integer"
                              name:
                                type: "string"
                              email:
                                type: "string"
                          person_id:
                            type: "object"
                            properties:
                              name:
                                type: "string"
                          org_id:
                            type: "object"
                            properties:
                              name:
                                type: "string"
                              owner_id:
                                type: "string"
                          stage_id:
                            type: "integer"
                          title:
                            type: "string"
                          value:
                            type: "integer"
                          currency:
                            type: "string"
                          status:
                            type: "string"
  /leads:
    get:
      tags:
        - "Leads"
      summary: "Get leads"
      description: "Returns multiple leads. Leads are sorted by the time they were created, from oldest to newest."
      operationId: "getLeads"
      parameters:
        - in: "query"
          name: "archived_status"
          description: "Filtering based on the archived status of a lead."
          schema:
            type: "string"
            default: "all"
            enum:
              - "archived"
              - "not_archived"
              - "all"
        - in: "query"
          name: "owner_id"
          description: "Leads matching the given user will be returned. However, `filter_id` takes precedence over `owner_id` when supplied."
          schema:
            type: "integer"
            title: "Owner"
        - in: "query"
          name: "person_id"
          description: "If supplied, only leads matching the given person will be returned.\
          \ However, `filter_id` takes precedence over `person_id` when supplied."
          schema:
            type: "integer"
            title: "Person"
        - in: "query"
          name: "organization_id"
          description: "If supplied, only leads matching the given organization will\
          \ be returned. However, `filter_id` takes precedence over `organization_id`\
          \ when supplied."
          schema:
            type: "integer"
            title: "Organization"
        - in: "query"
          name: "filter_id"
          description: "Filter to use"
          schema:
            type: "integer"
            title: "Filter"
        - in: "query"
          name: "sort"
          description: "The field names and sorting mode separated by a comma. Only first-level field keys are supported (no nested keys)."
          example: "field_name_1 ASC, field_name_2 DESC"
          schema:
            type: "string"
            enum:
              - "id"
              - "title"
              - "owner_id"
              - "creator_id"
              - "was_seen"
              - "expected_close_date"
              - "next_activity_id"
              - "add_time"
              - "update_time"
      responses:
        200:
          description: "Successful response containing payload in the `data` field"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  body:
                    type: "object"
                    properties:
                      data:
                        type: "array"
                        items:
                          type: "object"
                          properties:
                            id:
                              type: "string"
                            title:
                              type: "string"
                            owner_id:
                              type: "integer"
                            value:
                              type: "object"
                              properties:
                                amount:
                                  type: "integer"
                                currency:
                                  type: "string"
                            expected_close_date:
                              type: "string"
                              format: "date"
                            person_id:
                              type: "integer"
    post:
      tags:
        - "Leads"
      summary: "Add lead"
      description: "Creates a lead. A lead always has to be linked to a person or an organization or both."
      operationId: "addLead"
      requestBody:
        content:
          application/json:
            schema:
              title: "Lead"
              type: "object"
              required:
                - "title"
              properties:
                title:
                  type: "string"
                  description: "The name of the lead."
                owner_id:
                  type: "integer"
                  title: "Owner"
                  description: "User which will be the owner of the created lead."
                label_ids:
                  type: "array"
                  title: "Lead labels"
                  description: "Lead labels which will be associated with the lead."
                  items:
                    type: "string"
                    format: "uuid"
                person_id:
                  type: "integer"
                  title: "Person"
                  description: "Person which this lead will be linked to."
                organization_id:
                  type: "integer"
                  title: "Organization"
                  description: "Organization which this lead will be linked to."
                value:
                  type: "object"
                  description: "The potential value of the lead"
                  required:
                    - "amount"
                    - "currency"
                  properties:
                    amount:
                      type: "number"
                    currency:
                      type: "string"
                expected_close_date:
                  type: "string"
                  format: "date"
                  description: "The date of when the deal which will be created from the lead is expected to be closed. In ISO 8601 format: YYYY-MM-DD."
      responses:
        201:
          description: "Successful response containing payload in the `data` field"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  body:
                    type: "object"
                    properties:
                      data:
                        type: "object"
                        properties:
                          id:
                            type: "string"
                          title:
                            type: "string"
                          owner_id:
                            type: "integer"
                          value:
                            type: "object"
                            properties:
                              amount:
                                type: "integer"
                              currency:
                                type: "string"
                          expected_close_date:
                            type: "string"
                            format: "date"
                          person_id:
                            type: "integer"
  /leads/{id}:
    get:
      tags:
        - "Leads"
      summary: "Get lead details"
      description: "Returns details of a specific lead. "
      operationId: "getLeadDetails"
      parameters:
        - in: "path"
          name: "id"
          required: true
          schema:
            title: "Lead"
            type: "string"
            format: "uuid"
      responses:
        200:
          description: "Successful response containing payload in the `data` field"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  body:
                    type: "object"
                    properties:
                      data:
                        type: "object"
                        properties:
                          id:
                            type: "string"
                          title:
                            type: "string"
                          owner_id:
                            type: "integer"
                          value:
                            type: "object"
                            properties:
                              amount:
                                type: "integer"
                              currency:
                                type: "string"
                          expected_close_date:
                            type: "string"
                            format: "date"
                          person_id:
                            type: "integer"
    delete:
      tags:
        - "Leads"
      summary: "Delete lead"
      description: "Deletes a specific lead."
      operationId: "deleteLead"
      parameters:
        - in: "path"
          name: "id"
          description: "The ID of the lead"
          required: true
          schema:
            type: "string"
            format: "uuid"
            title: "Lead"
      responses:
        200:
          description: "Successful response with id value only. Used in DELETE calls."
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  body:
                    type: "object"
                    properties:
                      data:
                        type: "object"
                        properties:
                          id:
                            type: "string"
  /leads/search:
    get:
      summary: "Search leads"
      description: "Searches all leads by title, notes and/or custom fields."
      operationId: "searchLeads"
      tags:
        - "Leads"
      parameters:
        - in: "query"
          name: "term"
          required: true
          schema:
            type: "string"
          description: "The search term to look for. Minimum 2 characters (or 1 if using\
          \ `exact_match`). Please note that the search term has to be URL encoded."
        - in: "query"
          name: "fields"
          schema:
            type: "string"
            enum:
              - "custom_fields"
              - "notes"
              - "title"
          description: "A comma-separated string array. The fields to perform the search\
          \ from. Defaults to all of them."
        - in: "query"
          name: "exact_match"
          schema:
            type: "boolean"
          description: "When enabled, only full exact matches against the given term are returned. It is <b>not</b> case sensitive."
        - in: "query"
          name: "person_id"
          schema:
            type: "integer"
            title: "Person"
          description: "Will filter leads by the provided person ID."
        - in: "query"
          name: "organization_id"
          schema:
            type: "integer"
            title: "Organization"
          description: "Will filter leads by the provided organization ID."
        - in: "query"
          name: "include_fields"
          schema:
            type: "string"
            enum:
              - "lead.was_seen"
          description: "Supports including optional fields in the results which are not provided by default."
      responses:
        200:
          description: "Success"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  body:
                    type: "object"
                    properties:
                      data:
                        type: "object"
                        properties:
                          items:
                            type: "array"
                            items:
                              type: "object"
                              properties:
                                id:
                                  type: "string"
                                title:
                                  type: "string"
                                owner_id:
                                  type: "integer"
                                value:
                                  type: "object"
                                  properties:
                                    amount:
                                      type: "integer"
                                    currency:
                                      type: "string"
                                expected_close_date:
                                  type: "string"
                                  format: "date"
                                person_id:
                                  type: "integer"
  /organizations:
    get:
      summary: "Get all organizations"
      description: "Returns all organizations."
      operationId: "getOrganizations"
      tags:
        - "Organizations"
      parameters:
        - in: "query"
          name: "user_id"
          schema:
            title: "Owner"
            type: "integer"
          description: "Organizations owned by the given user will be returned. However, `filter_id` takes precedence over `user_id` when both are supplied."
        - in: "query"
          name: "filter_id"
          schema:
            title: "Filter"
            type: "integer"
          description: "Filter to use"
        - in: "query"
          name: "first_char"
          schema:
            title: "First characters"
            type: "string"
          description: "Organizations whose name starts with the specified letter will be returned (case insensitive)"
        - in: "query"
          name: "sort"
          schema:
            type: "string"
          description: "The field names and sorting mode separated by a comma (`field_name_1ASC`, `field_name_2 DESC`). Only first-level field keys are supported (no nested keys)."
      responses:
        200:
          description: "Success"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  body:
                    type: "object"
                    properties:
                      data:
                        type: "array"
                        items:
                          type: "object"
                          properties:
                            id:
                              type: "integer"
                            company_id:
                              type: "integer"
                            owner_id:
                              type: "object"
                              properties:
                                id:
                                  type: "integer"
                                name:
                                  type: "string"
                                email:
                                  type: "string"
                            name:
                              type: "string"
    post:
      summary: "Add an organization"
      description: "Adds a new organization."
      operationId: "addOrganization"
      tags:
        - "Organizations"
      requestBody:
        content:
          application/json:
            schema:
              title: "Organization"
              type: "object"
              required:
                - "name"
              properties:
                name:
                  type: "string"
                  description: "The name of the organization."
                owner_id:
                  type: "integer"
                  description: "User who will be marked as the owner of this organization."
      responses:
        201:
          description: "Success"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  body:
                    type: "object"
                    properties:
                      data:
                        type: "object"
                        properties:
                          id:
                            type: "integer"
                          company_id:
                            type: "integer"
                          owner_id:
                            type: "object"
                            properties:
                              id:
                                type: "integer"
                              name:
                                type: "string"
                              email:
                                type: "string"
                          name:
                            type: "string"
  /organizations/search:
    get:
      summary: "Search organizations"
      description: "Searches all organizations by name, address, notes and/or custom\
        \ fields. This endpoint is a wrapper of <a href=\"https://developers.pipedrive.com/docs/api/v1/ItemSearch#searchItem\"\
        >/v1/itemSearch</a> with a narrower OAuth scope."
      operationId: "searchOrganization"
      tags:
        - "Organizations"
      parameters:
        - in: "query"
          name: "term"
          required: true
          schema:
            type: "string"
          description: "The search term to look for. Minimum 2 characters (or 1 if using\
          \ `exact_match`). Please note that the search term has to be URL encoded."
        - in: "query"
          name: "fields"
          schema:
            type: "string"
            enum:
              - "address"
              - "custom_fields"
              - "notes"
              - "name"
          description: "A comma-separated string array. The fields to perform the search\
          \ from. Defaults to all of them."
        - in: "query"
          name: "exact_match"
          schema:
            type: "boolean"
          description: "When enabled, only full exact matches against the given term are returned. It is <b>not</b> case sensitive."
      responses:
        200:
          description: "Success"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  body:
                    type: "object"
                    properties:
                      data:
                        type: "object"
                        properties:
                          items:
                            type: "array"
                            items:
                              type: "object"
                              properties:
                                id:
                                  type: "integer"
                                company_id:
                                  type: "integer"
                                owner_id:
                                  type: "object"
                                  properties:
                                    id:
                                      type: "integer"
                                    name:
                                      type: "string"
                                    email:
                                      type: "string"
                                name:
                                  type: "string"
  /organizations/{id}:
    delete:
      summary: "Delete an organization"
      description: "Marks an organization as deleted. After 30 days, the organization will be permanently deleted."
      operationId: "deleteOrganization"
      tags:
        - "Organizations"
      parameters:
        - in: "path"
          name: "id"
          description: "Organization to delete"
          required: true
          schema:
            title: "Organization"
            type: "integer"
      responses:
        200:
          description: "Success"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  body:
                    type: "object"
                    properties:
                      data:
                        type: "object"
                        properties:
                          id:
                            type: "integer"
    get:
      summary: "Get details of an organization"
      description: "Returns the details of an organization."
      operationId: "getOrganizationDetails"
      tags:
        - "Organizations"
      parameters:
        - in: "path"
          name: "id"
          description: "Organization to get details."
          required: true
          schema:
            type: "integer"
            title: "Organizaton"
      responses:
        200:
          description: "Success"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  body:
                    type: "object"
                    properties:
                      data:
                        type: "object"
                        properties:
                          id:
                            type: "integer"
                          company_id:
                            type: "integer"
                          owner_id:
                            type: "object"
                            properties:
                              id:
                                type: "integer"
                              name:
                                type: "string"
                              email:
                                type: "string"
                          name:
                            type: "string"
  /persons:
    get:
      summary: "Get persons"
      description: "Returns all persons."
      operationId: "getPersons"
      tags:
        - "Persons"
      parameters:
        - in: "query"
          name: "user_id"
          schema:
            title: "Owner"
            type: "integer"
          description: "Persons owned by the given user will be returned. However, `filter_id` takes precedence over `user_id` when both are supplied."
        - in: "query"
          name: "filter_id"
          schema:
            title: "Filter"
            type: "integer"
          description: "Filter to use."
        - in: "query"
          name: "first_char"
          schema:
            title: "First characters"
            type: "string"
          description: "Persons whose name starts with the specified letter will be returned (case insensitive)"
        - in: "query"
          name: "sort"
          schema:
            type: "string"
          description: "The field names and sorting mode separated by a comma. Only first-level field keys are supported (no nested keys)."
          example: "field_name_1 ASC, field_name_2 DESC"
      responses:
        200:
          description: "Success"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  body:
                    type: "object"
                    properties:
                      data:
                        type: "array"
                        items:
                          type: "object"
                          properties:
                            id:
                              type: "integer"
                            company_id:
                              type: "integer"
                            owner_id:
                              type: "object"
                              properties:
                                id:
                                  type: "integer"
                                name:
                                  type: "string"
                                email:
                                  type: "string"
                            org_id:
                              type: "object"
                              properties:
                                name:
                                  type: "string"
                                owner_id:
                                  type: "integer"
                                cc_email:
                                  type: "string"
                            name:
                              type: "string"
                            phone:
                              type: "array"
                              items:
                                type: "object"
                                properties:
                                  value:
                                    type: "string"
                                  primary:
                                    type: "boolean"
                                  label:
                                    type: "string"
                            email:
                              type: "array"
                              items:
                                type: "object"
                                properties:
                                  value:
                                    type: "string"
                                  primary:
                                    type: "boolean"
                                  label:
                                    type: "string"
    post:
      summary: "Add person"
      description: "Adds a new person."
      operationId: "addPerson"
      tags:
        - "Persons"
      requestBody:
        content:
          application/json:
            schema:
              title: "Person"
              type: "object"
              required:
                - "name"
              properties:
                name:
                  type: "string"
                  description: "Person full name"
                owner_id:
                  type: "integer"
                  title: "Owner"
                  description: "User who will be marked as the owner of this person."
                org_id:
                  type: "integer"
                  title: "Organization"
                  description: "Organization this person will belong to."
                email:
                  type: "array"
                  description: "An email addresses related to the person."
                  items:
                    type: "object"
                    required:
                      - "value"
                    properties:
                      value:
                        type: "string"
                        title: "Email address"
                      primary:
                        type: "boolean"
                        description: "If email is primary for the person or not."
                      label:
                        type: "string"
                        title: "Type"
                        description: "Type of the email"
                        enum:
                          - "work"
                          - "home"
                          - "other"
                phone:
                  type: "array"
                  description: "A phone numbers related to the person."
                  items:
                    type: "object"
                    required:
                      - "value"
                    properties:
                      value:
                        type: "string"
                        title: "Phone number"
                        description: "The phone number"
                      primary:
                        type: "boolean"
                        description: "If phone number is primary for the person or not."
                      label:
                        type: "string"
                        title: "Type"
                        description: "Type of the phone number."
                        enum:
                          - "work"
                          - "home"
                          - "mobile"
                          - "other"
      responses:
        201:
          description: "Success"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  body:
                    type: "object"
                    properties:
                      data:
                        type: "object"
                        properties:
                          id:
                            type: "integer"
                          company_id:
                            type: "integer"
                          owner_id:
                            type: "object"
                            properties:
                              id:
                                type: "integer"
                              name:
                                type: "string"
                              email:
                                type: "string"
                          org_id:
                            type: "object"
                            properties:
                              name:
                                type: "string"
                              owner_id:
                                type: "integer"
                              cc_email:
                                type: "string"
                          name:
                            type: "string"
                          phone:
                            type: "array"
                            items:
                              type: "object"
                              properties:
                                value:
                                  type: "string"
                                primary:
                                  type: "boolean"
                                label:
                                  type: "string"
                          email:
                            type: "array"
                            items:
                              type: "object"
                              properties:
                                value:
                                  type: "string"
                                primary:
                                  type: "boolean"
                                label:
                                  type: "string"
  /persons/search:
    get:
      summary: "Search persons"
      description: "Searches all persons by name, email, phone, notes and/or custom fields."
      operationId: "searchPersons"
      tags:
        - "Persons"
      parameters:
        - in: "query"
          name: "term"
          required: true
          schema:
            type: "string"
          description: "The search term to look for. Minimum 2 characters (or 1 if using `exact_match`). Please note that the search term has to be URL encoded."
        - in: "query"
          name: "fields"
          schema:
            type: "string"
            enum:
              - "custom_fields"
              - "email"
              - "notes"
              - "phone"
              - "name"
          description: "A comma-separated string array. The fields to perform the search\
          \ from. Defaults to all of them."
        - in: "query"
          name: "exact_match"
          schema:
            type: "boolean"
          description: "When enabled, only full exact matches against the given term are returned. It is <b>not</b> case sensitive."
        - in: "query"
          name: "organization_id"
          schema:
            type: "integer"
            title: "Organization"
          description: "Will filter persons by the provided organization."
      responses:
        200:
          description: "Success"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  body:
                    type: "object"
                    properties:
                      data:
                        type: "object"
                        properties:
                          items:
                            type: "array"
                            items:
                              type: "object"
                              properties:
                                id:
                                  type: "integer"
                                company_id:
                                  type: "integer"
                                owner_id:
                                  type: "object"
                                  properties:
                                    id:
                                      type: "integer"
                                    name:
                                      type: "string"
                                    email:
                                      type: "string"
                                org_id:
                                  type: "object"
                                  properties:
                                    name:
                                      type: "string"
                                    owner_id:
                                      type: "integer"
                                    cc_email:
                                      type: "string"
                                name:
                                  type: "string"
                                phone:
                                  type: "array"
                                  items:
                                    type: "object"
                                    properties:
                                      value:
                                        type: "string"
                                      primary:
                                        type: "boolean"
                                      label:
                                        type: "string"
                                email:
                                  type: "array"
                                  items:
                                    type: "object"
                                    properties:
                                      value:
                                        type: "string"
                                      primary:
                                        type: "boolean"
                                      label:
                                        type: "string"
  /persons/{id}:
    delete:
      summary: "Delete person"
      description: "Marks a person as deleted. After 30 days, the person will be permanently deleted."
      operationId: "deletePerson"
      tags:
        - "Persons"
      parameters:
        - in: "path"
          name: "id"
          description: "Person to delete"
          required: true
          schema:
            title: "Person"
            type: "integer"
      responses:
        "200":
          description: "Success"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  body:
                    type: "object"
                    properties:
                      data:
                        type: "object"
                        properties:
                          id:
                            type: "integer"
    get:
      summary: "Get details of a person"
      description: "Returns the details of a person. This also returns some additional fields which are not present when asking for all persons."
      operationId: "getPersonDetails"
      tags:
        - "Persons"
      parameters:
        - in: "path"
          name: "id"
          description: "Person to get details"
          required: true
          schema:
            title: "Person"
            type: "integer"
      responses:
        200:
          description: "Success"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  body:
                    type: "object"
                    properties:
                      data:
                        type: "object"
                        properties:
                          id:
                            type: "integer"
                          company_id:
                            type: "integer"
                          owner_id:
                            type: "object"
                            properties:
                              id:
                                type: "integer"
                              name:
                                type: "string"
                              email:
                                type: "string"
                          org_id:
                            type: "object"
                            properties:
                              name:
                                type: "string"
                              owner_id:
                                type: "integer"
                              cc_email:
                                type: "string"
                          name:
                            type: "string"
                          phone:
                            type: "array"
                            items:
                              type: "object"
                              properties:
                                value:
                                  type: "string"
                                primary:
                                  type: "boolean"
                                label:
                                  type: "string"
                          email:
                            type: "array"
                            items:
                              type: "object"
                              properties:
                                value:
                                  type: "string"
                                primary:
                                  type: "boolean"
                                label:
                                  type: "string"
components:
  securitySchemes:
    oauth2:
      type: "oauth2"
      flows:
        authorizationCode:
          authorizationUrl: "https://oauth.pipedrive.com/oauth/authorize"
          tokenUrl: "https://oauth.pipedrive.com/oauth/token"
          refreshUrl: "https://oauth.pipedrive.com/oauth/token"
          scopes:
            deals:read: "Read most data about deals and related entities."
            deals:full: "Create, read, update and delete deals, its participants and\
              \ followers."
            goals:read: "Read data on all goals."
            goals:full: "Create, read, update and delete goals."
            leads:read: "Read leads and leads labels."
            leads:full: "Create, read, update and delete leads and leads labels"
            activities:read: "Read activities, its fields and types; all files and\
              \ filters."
            activities:full: "Create, read, update and delete activities and all files\
              \ and filters."
            contacts:read: "Read data about persons and organizations, their related\
              \ fields and followers."
            contacts:full: "Create, read, update and delete persons and organizations\
              \ and their followers."
            admin: "Allows to do many things that an administrator can do in a Pipedrive\
              \ company account."
            recents:read: "Read all recent changes occured in an account."
            search:read: "Search across the account for deals, persons, organizations,\
              \ files and products and see details about the returned results."
            mail:read: "Read mail threads and messages."
            mail:full: "Read, update and delete mail threads. Also grants read access\
              \ to mail messages."
            products:read: "Read products, its fields, files, followers and products\
              \ connected to a deal."
            products:full: "Create, read, update and delete products and its fields;\
              \ add products to deals"
            users:read: "Read data about users (people with access to a Pipedrive\
              \ account), their permissions, roles and followers, as well as about\
              \ legacy teams."
            base: "Read settings of the authorized user and currencies in an account."
            phone-integration: "Create, read and delete call logs and its audio recordings."
