/*
 * Copyright 2025 ByteChef
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.bytechef.component.tavily.action;

import static com.bytechef.component.OpenApiComponentHandler.PropertyType;
import static com.bytechef.component.definition.ComponentDsl.action;
import static com.bytechef.component.definition.ComponentDsl.array;
import static com.bytechef.component.definition.ComponentDsl.bool;
import static com.bytechef.component.definition.ComponentDsl.integer;
import static com.bytechef.component.definition.ComponentDsl.number;
import static com.bytechef.component.definition.ComponentDsl.object;
import static com.bytechef.component.definition.ComponentDsl.outputSchema;
import static com.bytechef.component.definition.ComponentDsl.string;
import static com.bytechef.component.definition.Context.Http.BodyContentType;
import static com.bytechef.component.definition.Context.Http.ResponseType;

import com.bytechef.component.definition.ComponentDsl;
import java.util.Map;

/**
 * Provides a list of the component actions.
 *
 * @generated
 */
public class TavilySearchAction {
    public static final ComponentDsl.ModifiableActionDefinition ACTION_DEFINITION = action("search")
        .title("Search")
        .description("Execute a search query.")
        .metadata(
            Map.of(
                "method", "POST",
                "path", "/search", "bodyContentType", BodyContentType.JSON, "mimeType", "application/json"

            ))
        .properties(string("query").metadata(
            Map.of(
                "type", PropertyType.BODY))
            .label("Query")
            .description("The search query to execute.")
            .required(true),
            string("topic").metadata(
                Map.of(
                    "type", PropertyType.BODY))
                .label("Topic")
                .description("The category of the search.")
                .defaultValue("general")
                .required(false),
            string("search_depth").metadata(
                Map.of(
                    "type", PropertyType.BODY))
                .label("Search Depth")
                .description("The depth of the search.")
                .defaultValue("basic")
                .required(false),
            string("time_range").metadata(
                Map.of(
                    "type", PropertyType.BODY))
                .label("Time Range")
                .description("The time range back from the current date to filter results.")
                .required(false),
            integer("max_results").metadata(
                Map.of(
                    "type", PropertyType.BODY))
                .label("Max Results")
                .description("The maximum number of search results to return.")
                .required(false),
            bool("include_answer").metadata(
                Map.of(
                    "type", PropertyType.BODY))
                .label("Include Answer")
                .description("Include an LLM-generated answer to the provided query.")
                .defaultValue(false)
                .required(false),
            bool("include_images").metadata(
                Map.of(
                    "type", PropertyType.BODY))
                .label("Include Images")
                .description("Perform an image search and include the results in the response.")
                .defaultValue(false)
                .required(false))
        .output(outputSchema(object().properties(string("query").description("The search query that was executed.")
            .required(false),
            string("answer").description(
                "A short answer to the user's query, generated by an LLM. Included in the response only if include_answer is requested.")
                .required(false),
            array("images").items(object().description("List of query-related images."))
                .description("List of query-related images.")
                .required(false),
            array("results").items(object().properties(string("title").description("The title of the search result.")
                .required(false),
                string("url").description("The URL of the search result.")
                    .required(false),
                string("content").description("A short description of the search result.")
                    .required(false),
                number("score").description("The relevance score of the search result.")
                    .required(false))
                .description("A list of sorted search results, ranked by relevancy."))
                .description("A list of sorted search results, ranked by relevancy.")
                .required(false),
            number("response_time").description("Time in seconds it took to complete the request.")
                .required(false))
            .metadata(
                Map.of(
                    "responseType", ResponseType.JSON))));

    private TavilySearchAction() {
    }
}
