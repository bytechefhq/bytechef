/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.10.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.bytechef.platform.custom.component.configuration.web.rest;

import com.bytechef.platform.custom.component.configuration.web.rest.model.CustomComponentModel;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-11-26T21:20:00.475016+01:00[Europe/Zagreb]", comments = "Generator version: 7.10.0")
@Validated
@Tag(name = "custom-component", description = "The Platform Custom Component Internal API")
public interface CustomComponentApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * DELETE /custom-components/{id} : Delete an custom component
     * Delete an custom component.
     *
     * @param id The id of an custom component. (required)
     * @return Successful operation. (status code 204)
     */
    @Operation(
        operationId = "deleteCustomComponent",
        summary = "Delete an custom component",
        description = "Delete an custom component.",
        tags = { "custom-component" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Successful operation.")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/custom-components/{id}"
    )
    
    default ResponseEntity<Void> deleteCustomComponent(
        @Parameter(name = "id", description = "The id of an custom component.", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PATCH /custom-components/{id}/enable/{enable} : Enable/disable a custom component.
     * Enable/disable a custom component.
     *
     * @param id The id of the custom component. (required)
     * @param enable Enable/disable the custom component. (required)
     * @return Successful operation. (status code 204)
     */
    @Operation(
        operationId = "enableCustomComponent",
        summary = "Enable/disable a custom component.",
        description = "Enable/disable a custom component.",
        tags = { "custom-component" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Successful operation.")
        }
    )
    @RequestMapping(
        method = RequestMethod.PATCH,
        value = "/custom-components/{id}/enable/{enable}"
    )
    
    default ResponseEntity<Void> enableCustomComponent(
        @Parameter(name = "id", description = "The id of the custom component.", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id,
        @Parameter(name = "enable", description = "Enable/disable the custom component.", required = true, in = ParameterIn.PATH) @PathVariable("enable") Boolean enable
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /custom-components/{id} : Get an custom component by id
     * Get an custom component by id.
     *
     * @param id The id of an custom component. (required)
     * @return The custom component object. (status code 200)
     */
    @Operation(
        operationId = "getCustomComponent",
        summary = "Get an custom component by id",
        description = "Get an custom component by id.",
        tags = { "custom-component" },
        responses = {
            @ApiResponse(responseCode = "200", description = "The custom component object.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = CustomComponentModel.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/custom-components/{id}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<CustomComponentModel> getCustomComponent(
        @Parameter(name = "id", description = "The id of an custom component.", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"lastModifiedDate\" : \"2000-01-23T04:56:07.000+00:00\", \"lastModifiedBy\" : \"lastModifiedBy\", \"icon\" : \"icon\", \"description\" : \"description\", \"language\" : \"JAVA\", \"componentVersion\" : 0, \"title\" : \"title\", \"enabled\" : true, \"__version\" : 1, \"createdDate\" : \"2000-01-23T04:56:07.000+00:00\", \"createdBy\" : \"createdBy\", \"name\" : \"name\", \"id\" : 6 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /custom-components : Get Custom Components
     * Get Custom Components.
     *
     * @return A list of Custom Components. (status code 200)
     */
    @Operation(
        operationId = "getCustomComponents",
        summary = "Get Custom Components",
        description = "Get Custom Components.",
        tags = { "custom-component" },
        responses = {
            @ApiResponse(responseCode = "200", description = "A list of Custom Components.", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = CustomComponentModel.class)))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/custom-components",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<CustomComponentModel>> getCustomComponents(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"lastModifiedDate\" : \"2000-01-23T04:56:07.000+00:00\", \"lastModifiedBy\" : \"lastModifiedBy\", \"icon\" : \"icon\", \"description\" : \"description\", \"language\" : \"JAVA\", \"componentVersion\" : 0, \"title\" : \"title\", \"enabled\" : true, \"__version\" : 1, \"createdDate\" : \"2000-01-23T04:56:07.000+00:00\", \"createdBy\" : \"createdBy\", \"name\" : \"name\", \"id\" : 6 }, { \"lastModifiedDate\" : \"2000-01-23T04:56:07.000+00:00\", \"lastModifiedBy\" : \"lastModifiedBy\", \"icon\" : \"icon\", \"description\" : \"description\", \"language\" : \"JAVA\", \"componentVersion\" : 0, \"title\" : \"title\", \"enabled\" : true, \"__version\" : 1, \"createdDate\" : \"2000-01-23T04:56:07.000+00:00\", \"createdBy\" : \"createdBy\", \"name\" : \"name\", \"id\" : 6 } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
