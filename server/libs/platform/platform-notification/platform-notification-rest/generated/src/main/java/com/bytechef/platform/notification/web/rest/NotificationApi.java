/*
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.15.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.bytechef.platform.notification.web.rest;

import com.bytechef.platform.notification.web.rest.model.NotificationModel;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.ExampleObject;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.lang.Nullable;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-10-02T07:57:52.980698491+02:00[Europe/Zagreb]", comments = "Generator version: 7.15.0")
@Validated
@Tag(name = "notification", description = "The Platform Notification Internal API")
public interface NotificationApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    public static final String PATH_CREATE_NOTIFICATION = "/notifications";
    /**
     * POST /notifications : Create a notification entry
     * Create a notification entry
     *
     * @param notificationModel  (required)
     * @return Successful operation. (status code 200)
     */
    @Operation(
        operationId = "createNotification",
        summary = "Create a notification entry",
        description = "Create a notification entry",
        tags = { "notification" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful operation.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = NotificationModel.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = NotificationApi.PATH_CREATE_NOTIFICATION,
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<NotificationModel> createNotification(
        @Parameter(name = "NotificationModel", description = "", required = true) @Valid @RequestBody NotificationModel notificationModel
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"settings\" : { \"key\" : \"{}\" }, \"__version\" : 5, \"createdDate\" : \"2000-01-23T04:56:07.000+00:00\", \"createdBy\" : \"createdBy\", \"lastModifiedDate\" : \"2000-01-23T04:56:07.000+00:00\", \"lastModifiedBy\" : \"lastModifiedBy\", \"name\" : \"name\", \"id\" : 0, \"notificationEventIds\" : [ 1, 1 ], \"type\" : \"EMAIL\", \"notificationEvents\" : [ { \"id\" : 6, \"type\" : \"JOB_CANCELLED\" }, { \"id\" : 6, \"type\" : \"JOB_CANCELLED\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    public static final String PATH_DELETE_NOTIFICATION = "/notifications/{notificationId}";
    /**
     * DELETE /notifications/{notificationId} : Delete a notification
     * Delete a notification.
     *
     * @param notificationId The id of a notification. (required)
     * @return Successful operation. (status code 204)
     */
    @Operation(
        operationId = "deleteNotification",
        summary = "Delete a notification",
        description = "Delete a notification.",
        tags = { "notification" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Successful operation.")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = NotificationApi.PATH_DELETE_NOTIFICATION
    )
    
    default ResponseEntity<Void> deleteNotification(
        @Parameter(name = "notificationId", description = "The id of a notification.", required = true, in = ParameterIn.PATH) @PathVariable("notificationId") Long notificationId
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    public static final String PATH_GET_NOTIFICATIONS = "/notifications";
    /**
     * GET /notifications : Get a list of notifications
     * Get a list of notifications
     *
     * @return Successful operation. (status code 200)
     */
    @Operation(
        operationId = "getNotifications",
        summary = "Get a list of notifications",
        description = "Get a list of notifications",
        tags = { "notification" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful operation.", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = NotificationModel.class)))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = NotificationApi.PATH_GET_NOTIFICATIONS,
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<NotificationModel>> getNotifications(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"settings\" : { \"key\" : \"{}\" }, \"__version\" : 5, \"createdDate\" : \"2000-01-23T04:56:07.000+00:00\", \"createdBy\" : \"createdBy\", \"lastModifiedDate\" : \"2000-01-23T04:56:07.000+00:00\", \"lastModifiedBy\" : \"lastModifiedBy\", \"name\" : \"name\", \"id\" : 0, \"notificationEventIds\" : [ 1, 1 ], \"type\" : \"EMAIL\", \"notificationEvents\" : [ { \"id\" : 6, \"type\" : \"JOB_CANCELLED\" }, { \"id\" : 6, \"type\" : \"JOB_CANCELLED\" } ] }, { \"settings\" : { \"key\" : \"{}\" }, \"__version\" : 5, \"createdDate\" : \"2000-01-23T04:56:07.000+00:00\", \"createdBy\" : \"createdBy\", \"lastModifiedDate\" : \"2000-01-23T04:56:07.000+00:00\", \"lastModifiedBy\" : \"lastModifiedBy\", \"name\" : \"name\", \"id\" : 0, \"notificationEventIds\" : [ 1, 1 ], \"type\" : \"EMAIL\", \"notificationEvents\" : [ { \"id\" : 6, \"type\" : \"JOB_CANCELLED\" }, { \"id\" : 6, \"type\" : \"JOB_CANCELLED\" } ] } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    public static final String PATH_UPDATE_NOTIFICATION = "/notifications/{notificationId}";
    /**
     * PUT /notifications/{notificationId} : Update an existing notification
     * Update an existing notification.
     *
     * @param notificationId The id of a notification. (required)
     * @param notificationModel  (required)
     * @return The updated Notification object. (status code 200)
     */
    @Operation(
        operationId = "updateNotification",
        summary = "Update an existing notification",
        description = "Update an existing notification.",
        tags = { "notification" },
        responses = {
            @ApiResponse(responseCode = "200", description = "The updated Notification object.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = NotificationModel.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = NotificationApi.PATH_UPDATE_NOTIFICATION,
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<NotificationModel> updateNotification(
        @Parameter(name = "notificationId", description = "The id of a notification.", required = true, in = ParameterIn.PATH) @PathVariable("notificationId") Long notificationId,
        @Parameter(name = "NotificationModel", description = "", required = true) @Valid @RequestBody NotificationModel notificationModel
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"settings\" : { \"key\" : \"{}\" }, \"__version\" : 5, \"createdDate\" : \"2000-01-23T04:56:07.000+00:00\", \"createdBy\" : \"createdBy\", \"lastModifiedDate\" : \"2000-01-23T04:56:07.000+00:00\", \"lastModifiedBy\" : \"lastModifiedBy\", \"name\" : \"name\", \"id\" : 0, \"notificationEventIds\" : [ 1, 1 ], \"type\" : \"EMAIL\", \"notificationEvents\" : [ { \"id\" : 6, \"type\" : \"JOB_CANCELLED\" }, { \"id\" : 6, \"type\" : \"JOB_CANCELLED\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
