---
openapi: "3.0.1"
info:
  title: "The Platform Configuration Internal API"
  version: "1"
servers:
  - url: "/api/platform/internal"
tags:
  - name: "action-definition"
    description: "The Platform Action Definition Internal API"
  - name: "cluster-element-definition"
    description: "The Platform Cluster Element Definition Internal API"
  - name: "component-definition"
    description: "The Platform Component Definition Internal API"
  - name: "connection-definition"
    description: "The Platform Connection Definition Internal API"
  - name: "environment"
    description: "The Platform Environment Internal API"
  - name: "task-dispatcher-definition"
    description: "The Platform Task Dispatcher Definition Internal API"
  - name: "trigger-definition"
    description: "The Platform Trigger Definition Internal API"
  - name: "workflow"
    description: "The Platform Workflow Internal API"
  - name: "workflow-node-description"
    description: "The Platform Workflow Node Description Internal API"
  - name: "workflow-node-dynamic-properties"
    description: "The Platform Workflow Node Dynamic Properties Internal API"
  - name: "workflow-node-option"
    description: "The Platform Workflow Node Option Internal API"
  - name: "workflow-node-output"
    description: "The Platform Workflow Node Output Internal API"
  - name: "workflow-node-parameter"
    description: "The Platform Workflow Node Parameter Internal API"
  - name: "workflow-node-script"
    description: "The Platform Workflow Node Script Internal API"
  - name: "workflow-node-test-output"
    description: "The Platform Workflow Node Test Output Internal API"
  - name: "workflow-test-configuration"
    description: "The Platform Workflow Test Configuration Internal API"
paths:
  /component-definitions/{componentName}/connection-definition:
    get:
      description: "Get connection definition for a component."
      summary: "Get connection definition for a component"
      tags:
        - "connection-definition"
      operationId: "getComponentConnectionDefinition"
      parameters:
        - name: "componentName"
          description: "The name of a component."
          required: true
          in: "path"
          schema:
            type: "string"
        - name: "componentVersion"
          description: "The version of a component."
          required: false
          in: "query"
          schema:
            type: "integer"
      responses:
        "200":
          description: "Successful operation."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConnectionDefinition"
  /component-definitions/{componentName}/connection-definitions:
    get:
      description: "Get all compatible connection definitions for a component."
      summary: "Get all compatible connection definitions for a component"
      tags:
        - "connection-definition"
      operationId: "getComponentConnectionDefinitions"
      parameters:
        - name: "componentName"
          description: "The name of a component."
          required: true
          in: "path"
          schema:
            type: "string"
        - name: "componentVersion"
          description: "The version of a component."
          required: false
          in: "query"
          schema:
            type: "integer"
      responses:
        "200":
          description: "Successful operation."
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/ConnectionDefinitionBasic"
  /component-definitions/{componentName}/connection-versions/{connectionVersion}:
    get:
      description: "Get a connection component definition."
      summary: "Get a connection component definition"
      tags:
        - "component-definition"
      operationId: "getConnectionComponentDefinition"
      parameters:
        - name: "componentName"
          description: "The name of a component to get."
          required: true
          in: "path"
          schema:
            type: "string"
        - name: "connectionVersion"
          description: "The version of a component connection to get."
          required: true
          in: "path"
          schema:
            type: "integer"
      responses:
        "200":
          description: "Successful operation."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ComponentDefinition"
  /component-definitions/{componentName}/versions:
    get:
      description: "Get all component definition versions of a component."
      summary: "Get all component definition versions of a component"
      tags:
        - "component-definition"
      operationId: "getComponentDefinitionVersions"
      parameters:
        - name: "componentName"
          description: "The name of a component."
          required: true
          in: "path"
          schema:
            type: "string"
      responses:
        "200":
          description: "Successful operation."
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/ComponentDefinitionBasic"
  /component-definitions/{componentName}/versions/{componentVersion}:
    get:
      description: "Get a component definition."
      summary: "Get a component definition"
      tags:
        - "component-definition"
      operationId: "getComponentDefinition"
      parameters:
        - name: "componentName"
          description: "The name of a component to get."
          required: true
          in: "path"
          schema:
            type: "string"
        - name: "componentVersion"
          description: "The version of a component to get."
          required: true
          in: "path"
          schema:
            type: "integer"
      responses:
        "200":
          description: "Successful operation."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ComponentDefinition"
  /component-definitions/{componentName}/versions/{componentVersion}/action-definitions:
    get:
      description: "Get a list of action definitions for a component."
      summary: "Get a list of action definitions for a component"
      tags:
      - "action-definition"
      operationId: "getComponentActionDefinitions"
      parameters:
      - name: "componentName"
        description: "The name of a component."
        required: true
        in: "path"
        schema:
          type: "string"
      - name: "componentVersion"
        description: "The version of a component."
        required: true
        in: "path"
        schema:
          type: "integer"
      responses:
        "200":
          description: "Successful operation."
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/ActionDefinitionBasic"
  /component-definitions/{componentName}/versions/{componentVersion}/action-definitions/{actionName}:
    get:
      description: "Get an action definition of a component."
      summary: "Get an action definition of a component"
      tags:
      - "action-definition"
      operationId: "getComponentActionDefinition"
      parameters:
      - name: "componentName"
        description: "The name of a component."
        required: true
        in: "path"
        schema:
          type: "string"
      - name: "componentVersion"
        description: "The version of a component."
        required: true
        in: "path"
        schema:
          type: "integer"
      - name: "actionName"
        description: "The name of the action to get."
        required: true
        in: "path"
        schema:
          type: "string"
      responses:
        "200":
          description: "Successful operation."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ActionDefinition"
  /component-definitions/{componentName}/versions/{componentVersion}/cluster-element-definition/{clusterElementName}:
    get:
      description: "Get a cluster element definition of a component."
      summary: "Get a cluster element definition of a component"
      tags:
        - "cluster-element-definition"
      operationId: "getComponentClusterElementDefinition"
      parameters:
        - name: "componentName"
          description: "The name of a component."
          required: true
          in: "path"
          schema:
            type: "string"
        - name: "componentVersion"
          description: "The version of a component."
          required: true
          in: "path"
          schema:
            type: "integer"
        - name: "clusterElementName"
          description: "The name of a cluster element to get."
          required: true
          in: "path"
          schema:
            type: "string"
      responses:
        "200":
          description: "Successful operation."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClusterElementDefinition"
  /component-definitions/{rootComponentName}/versions/{rootComponentVersion}/cluster-element-definitions/{clusterElementType}:
    get:
      description: "Get a cluster element definitions of a root component."
      summary: "Get a cluster element definitions of a root component."
      tags:
        - "cluster-element-definition"
      operationId: "getRootComponentClusterElementDefinitions"
      parameters:
        - name: "rootComponentName"
          description: "The name of a root component."
          required: true
          in: "path"
          schema:
            type: "string"
        - name: "rootComponentVersion"
          description: "The version of a root component."
          required: true
          in: "path"
          schema:
            type: "integer"
        - name: "clusterElementType"
          description: "The name of a cluster elements to get."
          required: true
          in: "path"
          schema:
            type: "string"
      responses:
        "200":
          description: "Successful operation."
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ClusterElementDefinitionBasic"
  /component-definitions/{componentName}/versions/{componentVersion}/trigger-definitions:
    get:
      description: "Get a list of trigger definitions for a component."
      summary: "Get a list of trigger definitions for a component"
      tags:
      - "trigger-definition"
      operationId: "getComponentTriggerDefinitions"
      parameters:
      - name: "componentName"
        description: "The name of a component."
        required: true
        in: "path"
        schema:
          type: "string"
      - name: "componentVersion"
        description: "The version of a component."
        required: true
        in: "path"
        schema:
          type: "integer"
      responses:
        "200":
          description: "Successful operation."
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/TriggerDefinitionBasic"
  /component-definitions/{componentName}/versions/{componentVersion}/trigger-definitions/{triggerName}:
    get:
      description: "Get a trigger definition of a component."
      summary: "Get a trigger definition of a component"
      tags:
      - "trigger-definition"
      operationId: "getComponentTriggerDefinition"
      parameters:
      - name: "componentName"
        description: "The name of the component."
        required: true
        in: "path"
        schema:
          type: "string"
      - name: "componentVersion"
        description: "The version of a component."
        required: true
        in: "path"
        schema:
          type: "integer"
      - name: "triggerName"
        description: "The name of a trigger to get."
        required: true
        in: "path"
        schema:
          type: "string"
      responses:
        "200":
          description: "Successful operation."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TriggerDefinition"
  /environments:
    get:
      description: "Retrieves environments."
      summary: "Retrieves oauth2 authorization parameters"
      tags:
        - "environment"
      operationId: "getEnvironments"
      responses:
        "200":
          description: "The list of Environment objects."
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Environment"
  /oauth2/authorization-parameters:
    post:
      description: "Retrieves oauth2 authorization parameters."
      summary: "Retrieves oauth2 authorization parameters"
      tags:
      - "oauth2"
      operationId: "getOAuth2AuthorizationParameters"
      requestBody:
        content:
          application/json:
            schema:
              description: "Contains all required information to open a connection\
                \ to a service defined by componentName parameter."
              type: "object"
              required:
              - "authorizationType"
              - "name"
              - "componentName"
              - "componentVersion"
              - "parameters"
              properties:
                authorizationType:
                  $ref: "#/components/schemas/AuthorizationType"
                componentName:
                  description: "The name of a component that uses this connection."
                  type: "string"
                connectionVersion:
                  description: "The version of a connection."
                  type: "integer"
                parameters:
                  description: "The parameters of a connection."
                  type: "object"
                  additionalProperties: true
        required: true
      responses:
        "200":
          description: "The object with oauth2 authorization parameters."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OAuth2AuthorizationParameters"
  /oauth2/properties:
    get:
      description: "Get OAuth2 properties."
      summary: "Get OAuth2 properties"
      tags:
      - "oauth2"
      operationId: "getOAuth2Properties"
      responses:
        "200":
          description: "The OAuth2Properties object."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OAuth2Properties"
  /task-dispatcher-definitions:
    get:
      description: "Get all task dispatcher definitions."
      summary: "Get all task dispatcher definitions"
      tags:
      - "task-dispatcher-definition"
      operationId: "getTaskDispatcherDefinitions"
      responses:
        "200":
          description: "Successful operation."
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/TaskDispatcherDefinition"
  /task-dispatcher-definitions/{taskDispatcherName}/versions:
    get:
      description: "Get all task dispatcher definition versions of a task dispatcher."
      summary: "Get all task dispatcher definition versions of a task dispatcher"
      tags:
      - "task-dispatcher-definition"
      operationId: "getTaskDispatcherDefinitionVersions"
      parameters:
      - name: "taskDispatcherName"
        description: "The name of a task dispatcher."
        required: true
        in: "path"
        schema:
          type: "string"
      responses:
        "200":
          description: "Successful operation."
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/TaskDispatcherDefinitionBasic"
  /task-dispatcher-definitions/{taskDispatcherName}/{taskDispatcherVersion}:
    get:
      description: "Get a task dispatcher definition."
      summary: "Get a task dispatcher definition"
      tags:
      - "task-dispatcher-definition"
      operationId: "getTaskDispatcherDefinition"
      parameters:
      - name: "taskDispatcherName"
        description: "The name of a task dispatcher to get."
        required: true
        in: "path"
        schema:
          type: "string"
      - name: "taskDispatcherVersion"
        description: "The version of a task dispatcher to get."
        required: true
        in: "path"
        schema:
          type: "integer"
      responses:
        "200":
          description: "Successful operation."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TaskDispatcherDefinition"
  /unified-api/{category}/component-definitions:
    get:
      description: "Get all compatible component definitions for a unified API category."
      summary: "Get all compatible component definitions for a unified API category"
      tags:
        - "component-definition"
      operationId: "getUnifiedApiComponentDefinitions"
      parameters:
        - name: "category"
          description: "The name of a unified API category."
          required: true
          in: "path"
          schema:
            $ref: "#/components/schemas/UnifiedApiCategory"
      responses:
        "200":
          description: "Successful operation."
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/ComponentDefinitionBasic"
  /workflow-test-configurations/{workflowId}:
    get:
      description: "Get a workflow test configuration."
      summary: "Get a workflow test configuration"
      tags:
        - "workflow-test-configuration"
      operationId: "getWorkflowTestConfiguration"
      parameters:
        - name: "workflowId"
          description: "The id of a workflow."
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "environmentId"
          description: "The id of an environment."
          required: true
          in: "query"
          schema:
            type: "integer"
            format: "int64"
      responses:
        "200":
          description: "Successful operation."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WorkflowTestConfiguration"
    put:
      description: "Create new or update an existing workflow test configuration."
      summary: "Create new or update an existing workflow test configuration"
      tags:
        - "workflow-test-configuration"
      operationId: "saveWorkflowTestConfiguration"
      parameters:
        - name: "workflowId"
          description: "The id of a workflow."
          in: "path"
          required: true
          schema:
            type: "string"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/WorkflowTestConfiguration"
        required: true
      responses:
        "200":
          description: "The updated workflow test configuration object."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WorkflowTestConfiguration"
  /workflow-test-configurations/{workflowId}/inputs:
    put:
      description: "Save a workflow test configuration inputs."
      summary: "Save a workflow test configuration inputs"
      tags:
        - "workflow-test-configuration"
      operationId: "saveWorkflowTestConfigurationInputs"
      parameters:
        - name: "workflowId"
          description: "The id of a testing workflow."
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "environmentId"
          description: "The id of an environment."
          required: true
          in: "query"
          schema:
            type: "integer"
            format: "int64"
      requestBody:
        content:
          application/json:
            schema:
              type: "object"
              properties:
                key:
                  type: "string"
                value:
                  type: "string"
        required: true
      responses:
        "204":
          description: "Successful operation."
  /workflow-test-configurations/{workflowId}/workflow-nodes/{workflowNodeName}/{workflowConnectionKey}/connections:
    put:
      description: "Save a workflow test configuration connection."
      summary: "Save a workflow test configuration connection"
      tags:
        - "workflow-test-configuration"
      operationId: "saveWorkflowTestConfigurationConnection"
      parameters:
        - name: "workflowId"
          description: "The id of a testing workflow."
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "workflowNodeName"
          description: "The action/trigger name defined in the workflow."
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "workflowConnectionKey"
          description: "The key of a connection."
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "environmentId"
          description: "The id of an environment."
          required: true
          in: "query"
          schema:
            type: "integer"
            format: "int64"
      requestBody:
        content:
          application/json:
            schema:
              type: "object"
              required:
                - "connectionId"
              properties:
                connectionId:
                  type: "integer"
                  format: "int64"
        required: true
      responses:
        "204":
          description: "Successful operation."
  /workflow-test-configurations/{workflowId}/workflow-nodes/{workflowNodeName}/connections:
    get:
      description: "Get a workflow test configuration connections."
      summary: "Get a workflow test configuration connections"
      tags:
        - "workflow-test-configuration"
      operationId: "getWorkflowTestConfigurationConnections"
      parameters:
        - name: "workflowId"
          description: "The id of a testing workflow."
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "workflowNodeName"
          description: "The action/trigger name defined in the workflow."
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "environmentId"
          description: "The id of an environment."
          required: true
          in: "query"
          schema:
            type: "integer"
            format: "int64"
      responses:
        "200":
          description: "Successful operation."
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/WorkflowTestConfigurationConnection"
  /workflows/{id}/outputs:
    get:
      description: "Get all workflow node outputs used in a workflow."
      summary: "Get all dynamic workflow node outputs used in a workflow"
      tags:
        - "workflow-node-output"
      operationId: "getPreviousWorkflowNodeOutputs"
      parameters:
        - name: "id"
          description: "The workflow id for which to return all used action definitions"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "lastWorkflowNodeName"
          description: "The name of the last workflow node (action task or trigger) up to which include the output schema (E.g. mailchimp_1, airtable_3)"
          in: "query"
          required: false
          schema:
            type: "string"
        - name: "environmentId"
          description: "The id of an environment."
          required: true
          in: "query"
          schema:
            type: "integer"
            format: "int64"
      responses:
        "200":
          description: "Successful operation."
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/WorkflowNodeOutput"
  /workflows/{id}/workflow-nodes/{workflowNodeName}/cluster-elements/{clusterElementType}/{clusterElementWorkflowNodeName}/display-conditions:
    get:
      description: "Get cluster element options shown in the editor."
      summary: "Get cluster element property options shown in the editor"
      tags:
        - "workflow-node-parameter"
      operationId: "getClusterElementParameterDisplayConditions"
      parameters:
        - name: "id"
          description: "The workflow id"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "workflowNodeName"
          description: "The name of a workflow's action task or trigger (E.g. mailchimp_1)"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "clusterElementType"
          description: "The name of a cluster element type."
          required: true
          in: "path"
          schema:
            type: "string"
        - name: "clusterElementWorkflowNodeName"
          description: "The name of a cluster element workflow node name."
          required: true
          in: "path"
          schema:
            type: "string"
        - name: "environmentId"
          description: "The id of an environment."
          required: true
          in: "query"
          schema:
            type: "integer"
            format: "int64"
      responses:
        "200":
          description: "The workflow node parameter display conditions."
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  displayConditions:
                    type: "object"
                    additionalProperties:
                      type: "boolean"
                  missingRequiredProperties:
                    type: "array"
                    items:
                      type: "string"
  /workflows/{id}/workflow-nodes/{workflowNodeName}/cluster-elements/{clusterElementType}/{clusterElementWorkflowNodeName}/dynamic-properties/{propertyName}:
    get:
      description: "Get dynamic properties for an action or trigger property shown in the editor."
      summary: "Get dynamic properties for an action or trigger property shown in the editor"
      tags:
        - "workflow-node-dynamic-properties"
      operationId: "getClusterElementDynamicProperties"
      parameters:
        - name: "id"
          description: "The workflow id"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "workflowNodeName"
          description: "The name of a workflow's action task or trigger (E.g. mailchimp_1)"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "clusterElementType"
          description: "The name of a cluster element type."
          required: true
          in: "path"
          schema:
            type: "string"
        - name: "clusterElementWorkflowNodeName"
          description: "The name of a cluster element workflow node name."
          required: true
          in: "path"
          schema:
            type: "string"
        - name: "propertyName"
          description: "The name of a property."
          required: true
          in: "path"
          schema:
            type: "string"
        - name: "lookupDependsOnPaths"
          description: "The list of dependency paths."
          required: false
          in: "query"
          schema:
            type: "array"
            items:
              type: "string"
        - name: "environmentId"
          description: "The id of an environment."
          required: true
          in: "query"
          schema:
            type: "integer"
            format: "int64"
      responses:
        "200":
          description: "The list of options."
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/Property"
  /workflows/{id}/workflow-nodes/{workflowNodeName}/cluster-elements/{clusterElementType}/{clusterElementWorkflowNodeName}/options/{propertyName}:
    get:
      description: "Get a cluster element property options shown in the editor."
      summary: "Get a cluster element property options shown in the editor"
      tags:
        - "workflow-node-option"
      operationId: "getClusterElementNodeOptions"
      parameters:
        - name: "id"
          description: "The workflow id"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "workflowNodeName"
          description: "The name of a workflow's cluster root action task (E.g. mailchimp_1)"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "clusterElementType"
          description: "The name of a cluster element type."
          required: true
          in: "path"
          schema:
            type: "string"
        - name: "clusterElementWorkflowNodeName"
          description: "The name of a cluster element workflow node."
          required: true
          in: "path"
          schema:
            type: "string"
        - name: "propertyName"
          description: "The name of a property."
          required: true
          in: "path"
          schema:
            type: "string"
        - name: "lookupDependsOnPaths"
          description: "The list of dependency paths."
          required: false
          in: "query"
          schema:
            type: "array"
            items:
              type: "string"
        - name: "searchText"
          description: "Optional search text used to filter option items"
          in: "query"
          schema:
            type: "string"
        - name: "environmentId"
          description: "The id of an environment."
          required: true
          in: "query"
          schema:
            type: "integer"
            format: "int64"
      responses:
        "200":
          description: "The list of options."
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/Option"
  /workflows/{id}/workflow-nodes/{workflowNodeName}/cluster-elements/{clusterElementType}/{clusterElementWorkflowNodeName}/outputs:
    get:
      description: "Get cluster element node output used in a workflow."
      summary: "Get cluster element node output used in a workflow"
      tags:
        - "workflow-node-output"
      operationId: "getClusterElementOutput"
      parameters:
        - name: "id"
          description: "The workflow id"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "workflowNodeName"
          description: "The name of a workflow's action task or trigger (E.g. mailchimp_1)"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "clusterElementType"
          description: "The name of a cluster element type."
          required: true
          in: "path"
          schema:
            type: "string"
        - name: "clusterElementWorkflowNodeName"
          description: "The name of a cluster element workflow node."
          required: true
          in: "path"
          schema:
            type: "string"
        - name: "environmentId"
          description: "The id of an environment."
          required: true
          in: "query"
          schema:
            type: "integer"
            format: "int64"
      responses:
        "200":
          description: "Successful operation."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WorkflowNodeOutput"
  /workflows/{id}/workflow-nodes/{workflowNodeName}/cluster-elements/{clusterElementType}/{clusterElementWorkflowNodeName}/parameters:
    delete:
      description: "Deletes a cluster element parameter."
      summary: "Deletes a cluster element parameter"
      tags:
        - "workflow-node-parameter"
      operationId: "deleteClusterElementParameter"
      parameters:
        - name: "id"
          description: "The workflow id"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "workflowNodeName"
          description: "The name of a workflow's action task or trigger (E.g. mailchimp_1)"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "clusterElementType"
          description: "The name of a cluster element type."
          required: true
          in: "path"
          schema:
            type: "string"
        - name: "clusterElementWorkflowNodeName"
          description: "The name of a cluster element workflow node name."
          required: true
          in: "path"
          schema:
            type: "string"
        - name: "environmentId"
          description: "The id of an environment."
          required: true
          in: "query"
          schema:
            type: "integer"
            format: "int64"
      requestBody:
        content:
          application/json:
            schema:
              type: "object"
              required:
                - "path"
              properties:
                includeInMetadata:
                  description: "If path and value type should be included in metadata "
                  type: "boolean"
                  default: false
                path:
                  description: "The workflow node parameter path."
                  type: "string"
        required: true
      responses:
        "200":
          description: "The updated workflow node parameters."
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  metadata:
                    description: "Key-value map of metadata."
                    type: "object"
                    additionalProperties: true
                  parameters:
                    description: "Key-value map of parameters."
                    type: "object"
                    additionalProperties: true
                  displayConditions:
                    description: "Key-value map of display condition rules."
                    type: "object"
                    additionalProperties:
                      type: "boolean"
                  missingRequiredProperties:
                    type: "array"
                    items:
                      type: "string"
    patch:
      description: "Updates a cluster element parameter."
      summary: "Updates a cluster element parameter"
      tags:
        - "workflow-node-parameter"
      operationId: "updateClusterElementParameter"
      parameters:
        - name: "id"
          description: "The workflow id"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "workflowNodeName"
          description: "The name of a workflow's action task or trigger (E.g. mailchimp_1)"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "clusterElementType"
          description: "The name of a cluster element type."
          required: true
          in: "path"
          schema:
            type: "string"
        - name: "clusterElementWorkflowNodeName"
          description: "The name of a cluster element workflow node name."
          required: true
          in: "path"
          schema:
            type: "string"
        - name: "environmentId"
          description: "The id of an environment."
          required: true
          in: "query"
          schema:
            type: "integer"
            format: "int64"
      requestBody:
        content:
          application/json:
            schema:
              type: "object"
              required:
                - "path"
                - "type"
              properties:
                includeInMetadata:
                  description: "If path and value type should be included in metadata "
                  type: "boolean"
                  default: false
                path:
                  description: "The workflow node parameter path."
                  type: "string"
                type:
                  description: "The type of a property."
                  type: "string"
                value:
                  description: "The value."
                  type: "object"
        required: true
      responses:
        "200":
          description: "The updated workflow node parameters."
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  metadata:
                    description: "Key-value map of metadata."
                    type: "object"
                    additionalProperties: true
                  parameters:
                    description: "Key-value map of parameters."
                    type: "object"
                    additionalProperties: true
                  displayConditions:
                    description: "Key-value map of display condition rules."
                    type: "object"
                    additionalProperties:
                      type: "boolean"
                  missingRequiredProperties:
                    type: "array"
                    items:
                      type: "string"
  /workflows/{id}/workflow-nodes/{workflowNodeName}/descriptions:
    get:
      description: "Get an action description shown in the editor."
      summary: "Get an action description shown in the editor"
      tags:
        - "workflow-node-description"
      operationId: "getWorkflowNodeDescription"
      parameters:
        - name: "id"
          description: "The workflow id"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "workflowNodeName"
          description: "The name of an workflow's action task or trigger (E.g. mailchimp_1)"
          required: true
          in: "path"
          schema:
            type: "string"
        - name: "environmentId"
          description: "The id of an environment."
          required: true
          in: "query"
          schema:
            type: "integer"
            format: "int64"
      responses:
        "200":
          description: "The editor description."
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  description:
                    type: string
  /workflows/{id}/workflow-nodes/{workflowNodeName}/display-conditions:
    get:
      description: "Get action or trigger display conditions shown in the editor."
      summary: "Get action or trigger display conditions shown in the editor"
      tags:
        - "workflow-node-parameter"
      operationId: "getWorkflowNodeParameterDisplayConditions"
      parameters:
        - name: "id"
          description: "The workflow id"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "workflowNodeName"
          description: "The name of a workflow's action task or trigger (E.g. mailchimp_1)"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "environmentId"
          description: "The id of an environment."
          required: true
          in: "query"
          schema:
            type: "integer"
            format: "int64"
      responses:
        "200":
          description: "The workflow node parameter display conditions."
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  displayConditions:
                    type: "object"
                    additionalProperties:
                      type: "boolean"
                  missingRequiredProperties:
                    type: "array"
                    items:
                      type: "string"
  /workflows/{id}/workflow-nodes/{workflowNodeName}/dynamic-properties/{propertyName}:
    get:
      description: "Get dynamic properties for an action or trigger property shown in the editor."
      summary: "Get dynamic properties for an action or trigger property shown in the editor"
      tags:
        - "workflow-node-dynamic-properties"
      operationId: "getWorkflowNodeDynamicProperties"
      parameters:
        - name: "id"
          description: "The workflow id"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "workflowNodeName"
          description: "The name of a workflow's action task or trigger (E.g. mailchimp_1)"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "propertyName"
          description: "The name of a property."
          required: true
          in: "path"
          schema:
            type: "string"
        - name: "lookupDependsOnPaths"
          description: "The list of dependency paths."
          required: false
          in: "query"
          schema:
            type: "array"
            items:
              type: "string"
        - name: "environmentId"
          description: "The id of an environment."
          required: true
          in: "query"
          schema:
            type: "integer"
            format: "int64"
      responses:
        "200":
          description: "The list of options."
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/Property"
  /workflows/{id}/workflow-nodes/{workflowNodeName}/options/{propertyName}:
    get:
      description: "Get an action or trigger property options shown in the editor."
      summary: "Get an action or trigger property options shown in the editor"
      tags:
        - "workflow-node-option"
      operationId: "getWorkflowNodeOptions"
      parameters:
        - name: "id"
          description: "The workflow id"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "workflowNodeName"
          description: "The name of a workflow's action task or trigger (E.g. mailchimp_1)"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "propertyName"
          description: "The name of a property."
          required: true
          in: "path"
          schema:
            type: "string"
        - name: "lookupDependsOnPaths"
          description: "The list of dependency paths."
          required: false
          in: "query"
          schema:
            type: "array"
            items:
              type: "string"
        - name: "searchText"
          description: "Optional search text used to filter option items"
          in: "query"
          schema:
            type: "string"
        - name: "environmentId"
          description: "The id of an environment."
          required: true
          in: "query"
          schema:
            type: "integer"
            format: "int64"
      responses:
        "200":
          description: "The list of options."
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/Option"
  /workflows/{id}/workflow-nodes/{workflowNodeName}/outputs:
    get:
      description: "Get workflow node output of an action task or trigger used in a workflow."
      summary: "Get workflow node output of an action task or trigger used in a workflow"
      tags:
        - "workflow-node-output"
      operationId: "getWorkflowNodeOutput"
      parameters:
        - name: "id"
          description: "The workflow id"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "workflowNodeName"
          description: "The name of a workflow's action task or trigger (E.g. mailchimp_1)"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "environmentId"
          description: "The id of an environment."
          required: true
          in: "query"
          schema:
            type: "integer"
            format: "int64"
      responses:
        "200":
          description: "Successful operation."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WorkflowNodeOutput"
  /workflows/{id}/workflow-nodes/{workflowNodeName}/parameters:
    delete:
      description: "Deletes a workflow node parameter."
      summary: "Deletes a workflow node parameter"
      tags:
        - "workflow-node-parameter"
      operationId: "deleteWorkflowNodeParameter"
      parameters:
        - name: "id"
          description: "The workflow id"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "workflowNodeName"
          description: "The name of a workflow's action task or trigger (E.g. mailchimp_1)"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "environmentId"
          description: "The id of an environment."
          required: true
          in: "query"
          schema:
            type: "integer"
            format: "int64"
      requestBody:
        content:
          application/json:
            schema:
              type: "object"
              required:
                - "path"
              properties:
                includeInMetadata:
                  description: "If path and value type should be included in metadata "
                  type: "boolean"
                  default: false
                path:
                  description: "The workflow node parameter path."
                  type: "string"
        required: true
      responses:
        "200":
          description: "The updated workflow node parameters."
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  metadata:
                    description: "Key-value map of metadata."
                    type: "object"
                    additionalProperties: true
                  parameters:
                    description: "Key-value map of parameters."
                    type: "object"
                    additionalProperties: true
                  displayConditions:
                    description: "Key-value map of display condition rules."
                    type: "object"
                    additionalProperties:
                      type: "boolean"
                  missingRequiredProperties:
                    type: "array"
                    items:
                      type: "string"
    patch:
      description: "Updates a workflow node parameter."
      summary: "Updates a workflow node parameter"
      tags:
        - "workflow-node-parameter"
      operationId: "updateWorkflowNodeParameter"
      parameters:
        - name: "id"
          description: "The workflow id"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "workflowNodeName"
          description: "The name of a workflow's action task or trigger (E.g. mailchimp_1)"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "environmentId"
          description: "The id of an environment."
          required: true
          in: "query"
          schema:
            type: "integer"
            format: "int64"
      requestBody:
        content:
          application/json:
            schema:
              type: "object"
              required:
                - "path"
                - "type"
              properties:
                includeInMetadata:
                  description: "If path and value type should be included in metadata "
                  type: "boolean"
                  default: false
                path:
                  description: "The workflow node parameter path."
                  type: "string"
                type:
                  description: "The type of a property."
                  type: "string"
                value:
                  description: "The value."
                  type: "object"
        required: true
      responses:
        "200":
          description: "The updated workflow node parameters."
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  metadata:
                    description: "Key-value map of metadata."
                    type: "object"
                    additionalProperties: true
                  parameters:
                    description: "Key-value map of parameters."
                    type: "object"
                    additionalProperties: true
                  displayConditions:
                    description: "Key-value map of display condition rules."
                    type: "object"
                    additionalProperties:
                      type: "boolean"
                  missingRequiredProperties:
                    type: "array"
                    items:
                      type: "string"
  /workflows/{id}/workflow-nodes/{workflowNodeName}/scripts:
    post:
      description: "Execute a script for testing purposes."
      summary: "Execute a script for testing purposes"
      tags:
        - "workflow-node-script"
      operationId: "testWorkflowNodeScript"
      parameters:
        - name: "id"
          description: "The id of a workflow."
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "workflowNodeName"
          description: "The name of a workflow node which uses the script component."
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "environmentId"
          description: "The id of an environment."
          required: true
          in: "query"
          schema:
            type: "integer"
            format: "int64"
      responses:
        "200":
          description: "The script test execution object."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ScriptTestExecution"
  /workflows/{id}/workflow-nodes/{workflowNodeName}/test-outputs:
    delete:
      description: "Delete existing workflow node test output."
      summary: "Delete existing workflow node test output"
      tags:
        - "workflow-node-test-output"
      operationId: "deleteWorkflowNodeTestOutput"
      parameters:
        - name: "id"
          description: "The id of a workflow."
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "workflowNodeName"
          description: "The name of a workflow node for which to create test output objects."
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "environmentId"
          description: "The id of an environment."
          required: true
          in: "query"
          schema:
            type: "integer"
            format: "int64"
      responses:
        "204":
          description: "Successful operation."
    put:
      description: "Create a new or update existing workflow node test output."
      summary: "Create a new or update existing workflow node test output"
      tags:
        - "workflow-node-test-output"
      operationId: "saveWorkflowNodeTestOutput"
      parameters:
        - name: "id"
          description: "The id of a workflow."
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "workflowNodeName"
          description: "The name of a workflow node for which to create test output objects."
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "environmentId"
          description: "The id of an environment."
          required: true
          in: "query"
          schema:
            type: "integer"
            format: "int64"
      responses:
        "200":
          description: "The workflow node test output object."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WorkflowNodeTestOutput"
  /workflows/{id}/workflow-nodes/{workflowNodeName}/test-outputs/exists:
    get:
      description: "Check if a workflow node test output exists."
      summary: "Check if a workflow node test output exists"
      tags:
        - "workflow-node-test-output"
      operationId: "checkWorkflowNodeTestOutputExists"
      parameters:
        - name: "id"
          description: "The id of a workflow."
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "workflowNodeName"
          description: "The name of a workflow node for which to create test output objects."
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "createdDate"
          description: "Check if a test output exists after a specific date."
          in: "query"
          required: false
          schema:
            type: "string"
            format: "date-time"
        - name: "environmentId"
          description: "The id of an environment."
          required: true
          in: "query"
          schema:
            type: "integer"
            format: "int64"
      responses:
        "200":
          description: "Successful operation."
          content:
            application/json:
              schema:
                type: "object"
                required:
                  - "exists"
                properties:
                  exists:
                    type: "boolean"
  /workflows/{id}/workflow-nodes/{workflowNodeName}/test-outputs/sample-output:
    put:
      description: "Upload a sample output to create a new or update existing workflow node test output."
      summary: "Upload a sample output to create a new or update existing workflow node test output"
      tags:
        - "workflow-node-test-output"
      operationId: "uploadWorkflowNodeSampleOutput"
      parameters:
        - name: "id"
          description: "The id of a workflow."
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "workflowNodeName"
          description: "The name of a workflow node for which to create test output objects."
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "environmentId"
          description: "The id of an environment."
          required: true
          in: "query"
          schema:
            type: "integer"
            format: "int64"
      requestBody:
        content:
          application/json:
            schema:
              type: "object"
        required: true
      responses:
        "200":
          description: "The workflow node test output object."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WorkflowNodeTestOutput"
components:
  schemas:
    ActionDefinition:
      description: "An action is a portion of reusable code that accomplish a specific\
        \ task. When building a workflow, each action is represented as a task inside\
        \ the workflow. The task 'type' property is defined as [component name]/v[component\
        \ version]/[action name]. Action properties are used to set properties of\
        \ the task inside the workflow."
      type: "object"
      required:
      - "componentName"
      - "componentVersion"
      - "name"
      - "outputDefined"
      - "outputFunctionDefined"
      properties:
        componentName:
          description: "The component name."
          type: "string"
        componentVersion:
          description: "The component version."
          type: "integer"
        description:
          description: "The description."
          type: "string"
        help:
          $ref: "#/components/schemas/Help"
        name:
          description: "The action name."
          type: "string"
        outputDefined:
          description: "Does action defines output."
          type: "boolean"
        outputFunctionDefined:
          description: "Does action defines output function."
          type: "boolean"
        outputSchemaDefined:
          description: "Does action defines output schema."
          type: "boolean"
        properties:
          description: "The list of action properties."
          type: "array"
          items:
            $ref: "#/components/schemas/Property"
        title:
          description: "The title"
          type: "string"
        workflowNodeDescriptionDefined:
          description: "Does action define dynamic node description."
          type: "boolean"
    ActionDefinitionBasic:
      description: "An action is a portion of reusable code that accomplish a specific\
        \ task. When building a workflow, each action is represented as a task inside\
        \ the workflow. The task 'type' property is defined as [component name]/v[component\
        \ version]/[action name]. Action properties are used to set properties of\
        \ the task inside the workflow."
      type: "object"
      required:
      - "componentName"
      - "componentVersion"
      - "name"
      - "outputDefined"
      - "outputFunctionDefined"
      properties:
        componentName:
          description: "The component name."
          type: "string"
        componentVersion:
          description: "The component version."
          type: "integer"
        description:
          description: "The description."
          type: "string"
        help:
          $ref: "#/components/schemas/Help"
        name:
          description: "The action name."
          type: "string"
        outputDefined:
          description: "Does action defines output."
          type: "boolean"
        outputFunctionDefined:
          description: "Does action defines output function."
          type: "boolean"
        outputSchemaDefined:
          description: "Does action defines output schema."
          type: "boolean"
        title:
          description: "The title"
          type: "string"
    AnyValue:
      description: "Can be anything: string, number, array, object, etc. (except `null`)"
    ArrayProperty:
      description: "An array property type."
      type: "object"
      allOf:
      - $ref: "#/components/schemas/ValueProperty"
      - type: "object"
        properties:
          defaultValue:
            description: "The property default value."
            type: "array"
            items:
              type: "object"
          exampleValue:
            description: "The property sample value."
            type: "array"
            items:
              type: "object"
          items:
            description: "Types of the array items."
            type: "array"
            items:
              $ref: "#/components/schemas/Property"
          maxItems:
            type: "integer"
            format: "int64"
          minItems:
            type: "integer"
            format: "int64"
          multipleValues:
            description: "If the array can contain multiple items."
            type: "boolean"
          options:
            description: "The list of valid property options."
            type: "array"
            items:
              $ref: "#/components/schemas/Option"
          optionsDataSource:
            $ref: "#/components/schemas/OptionsDataSource"
    Authorization:
      description: "Contains information required for a connection's authorization."
      type: "object"
      properties:
        description:
          description: "The description."
          type: "string"
        name:
          description: "The authorization name."
          type: "string"
        properties:
          description: "Properties of the connection."
          type: "array"
          items:
            $ref: "#/components/schemas/Property"
        title:
          description: "The title"
          type: "string"
        type:
          $ref: "#/components/schemas/AuthorizationType"
    AuthorizationType:
      description: "The authorization type."
      type: "string"
      enum:
        - "API_KEY"
        - "BASIC_AUTH"
        - "BEARER_TOKEN"
        - "CUSTOM"
        - "DIGEST_AUTH"
        - "OAUTH2_AUTHORIZATION_CODE"
        - "OAUTH2_AUTHORIZATION_CODE_PKCE"
        - "OAUTH2_CLIENT_CREDENTIALS"
        - "OAUTH2_IMPLICIT_CODE"
        - "OAUTH2_RESOURCE_OWNER_PASSWORD"
    BooleanProperty:
      description: "A boolean property type."
      type: "object"
      allOf:
      - $ref: "#/components/schemas/ValueProperty"
      - type: object
        properties:
          defaultValue:
            description: "The property default value."
            type: "boolean"
          exampleValue:
            description: "The property sample value."
            type: "boolean"
          options:
            description: "The list of valid property options."
            type: "array"
            items:
              $ref: "#/components/schemas/Option"
    ClusterElementDefinition:
      description: "A cluster element definition."
      type: "object"
      allOf:
        - $ref: "#/components/schemas/ClusterElementDefinitionBasic"
        - type: "object"
          required:
            - "componentName"
            - "componentVersion"
            - "name"
            - "type"
            - "outputDefined"
          properties:
            properties:
              description: "The list of action properties."
              type: "array"
              items:
                $ref: "#/components/schemas/Property"
    ClusterElementDefinitionBasic:
      description: "A cluster element basic definition."
      type: "object"
      required:
        - "componentName"
        - "componentVersion"
        - "name"
        - "type"
        - "outputDefined"
      properties:
        componentName:
          description: "The component name."
          type: "string"
        componentVersion:
          description: "The component version."
          type: "integer"
        description:
          description: "The cluster element description."
          type: "string"
        help:
          $ref: "#/components/schemas/Help"
        name:
          description: "The cluster element name."
          type: "string"
        icon:
          description: "The component icon."
          type: "string"
        outputDefined:
          description: "Does action defines output."
          type: "boolean"
        outputFunctionDefined:
          description: "Does action defines output function."
          type: "boolean"
        outputSchemaDefined:
          description: "Does action defines output schema."
          type: "boolean"
        title:
          description: "The cluster element title."
          type: "string"
        type:
          description: "The cluster element type."
          type: "string"
    ClusterElementType:
      description: "A type of a cluster element."
      type: "object"
      properties:
        name:
          description: "The name of a cluster element type."
          type: "string"
        label:
          description: "The label of a cluster element type."
          type: "string"
        required:
          description: "If the cluster element type is required."
          type: "boolean"
        multipleElements:
          description: "If multiple elements can be added."
          type: "boolean"
    ComponentDefinition:
      description: "A component contains a set of reusable code(actions) that accomplish\
        \ specific tasks, triggers and connections if there is a need for a connection\
        \ to an outside service."
      type: "object"
      required:
      - "clusterElement"
      - "clusterRoot"
      - "name"
      - "version"
      - "connectionRequired"
      properties:
        actionClusterElementTypes:
          description: "The list of cluster element types per action."
          type: "object"
          additionalProperties:
            type: "array"
            items:
              type: "string"
        actions:
          description: "The list of all available actions the component can perform."
          type: "array"
          items:
            $ref: "#/components/schemas/ActionDefinitionBasic"
        clusterElement:
          description: "Is the component cluster element."
          type: "boolean"
        clusterElementClusterElementTypes:
          description: "The list of cluster element types per root cluster element."
          type: "object"
          additionalProperties:
            type: "array"
            items:
              type: "string"
        clusterElements:
          description: "The list of all available cluster elements the component can perform."
          type: "array"
          items:
            $ref: "#/components/schemas/ClusterElementDefinitionBasic"
        clusterElementTypes:
          description: "The list of cluster element types."
          type: "array"
          items:
            $ref: "#/components/schemas/ClusterElementType"
        clusterRoot:
          description: "Is the component cluster root."
          type: "boolean"
        componentCategories:
          description: "The list of categories the component belongs to."
          type: "array"
          items:
            $ref: "#/components/schemas/ComponentCategory"
        connection:
          $ref: "#/components/schemas/ConnectionDefinitionBasic"
        connectionRequired:
          description: "If connection is required or not if it is defined."
          type: "boolean"
        description:
          description: "The description."
          type: "string"
        icon:
          description: "The icon."
          type: "string"
        name:
          description: "The name."
          type: "string"
        resources:
          $ref: "#/components/schemas/Resources"
        tags:
          description: "Tags for categorization."
          type: "array"
          items:
            type: "string"
        title:
          description: "The title"
          type: "string"
        triggers:
          description: "The list of all available triggers the component can perform."
          type: "array"
          items:
            $ref: "#/components/schemas/TriggerDefinitionBasic"
        unifiedApiCategory:
          $ref: "#/components/schemas/UnifiedApiCategory"
        version:
          description: "The version of a component."
          type: "integer"
    ComponentDefinitionBasic:
      description: "A component contains a set of reusable code(actions) that accomplish\
        \ specific tasks, triggers and connections if there is a need for a connection\
        \ to an outside service."
      type: "object"
      required:
      - "name"
      - "version"
      properties:
        actionsCount:
          description: "The number of actions a component has"
          type: "integer"
        clusterElementsCount:
          description: "The number of cluster elements a component has"
          type: "object"
          additionalProperties:
            type: "integer"
        componentCategories:
          description: "The list of categories the component belongs to."
          type: "array"
          items:
            $ref: "#/components/schemas/ComponentCategory"
        description:
          description: "The description."
          type: "string"
        icon:
          description: "The icon."
          type: "string"
        name:
          description: "The name of a component."
          type: "string"
        title:
          description: "The title"
          type: "string"
        triggersCount:
          description: "The number of triggers a component has"
          type: "integer"
        version:
          description: "The version of a component."
          type: "integer"
    ConnectionDefinition:
      description: "Definition of a connection to an outside service."
      type: "object"
      required:
      - "componentName"
      - "version"
      properties:
        authorizationRequired:
          description: "If a connection requires an authorization to be defined or\
            \ not"
          type: "boolean"
          default: true
        authorizations:
          type: "array"
          items:
            $ref: "#/components/schemas/Authorization"
        baseUri:
          description: "Defines the base URI for all future HTTP requests."
          type: "string"
        componentDescription:
          description: "The description used from the connection's component."
          type: "string"
        componentName:
          description: "The component name used from the connection's component."
          type: "string"
        properties:
          description: "The properties of the connection."
          type: "array"
          items:
            $ref: "#/components/schemas/Property"
        componentTitle:
          description: "The title used from the connection's component."
          type: "string"
        version:
          description: "The version of a connection."
          type: "integer"
    ComponentCategory:
      description: "A category of component."
      type: "object"
      required:
        - "name"
      properties:
        name:
          description: "The name of a category."
          type: "string"
        label:
          description: "The label of a category."
          type: "string"
    ConnectionDefinitionBasic:
      description: "Definition of a connection to an outside service."
      type: "object"
      required:
      - "componentName"
      - "version"
      properties:
        componentDescription:
          description: "The description used from the connection's component."
          type: "string"
        componentName:
          description: "The component name used from the connection's component."
          type: "string"
        componentTitle:
          description: "The title used from the connection's component"
          type: "string"
        version:
          description: "The version of a connection."
          type: "integer"
    ControlType:
      description: "A type of the control to show in UI."
      type: "string"
      enum:
      - "ARRAY_BUILDER"
      - "CODE_EDITOR"
      - "DATE"
      - "DATE_TIME"
      - "EMAIL"
      - "INTEGER"
      - "JSON_SCHEMA_BUILDER"
      - "FILE_ENTRY"
      - "MULTI_SELECT"
      - "NUMBER"
      - "NULL"
      - "OBJECT_BUILDER"
      - "PASSWORD"
      - "PHONE"
      - "RICH_TEXT"
      - "SELECT"
      - "TEXT"
      - "TEXT_AREA"
      - "TIME"
      - "URL"
    CredentialStatus:
      $ref: "../../../platform-connection/platform-connection-rest/openapi/components/schemas/objects/credential_status.yaml"
    DateProperty:
      description: "A date property type."
      type: "object"
      allOf:
      - $ref: "#/components/schemas/ValueProperty"
      - type: "object"
        properties:
          defaultValue:
            description: "The property default value."
            type: "string"
            format: "date"
          exampleValue:
            description: "The property sample value."
            type: "string"
            format: "date"
          options:
            description: "The list of valid property options."
            type: "array"
            items:
              $ref: "#/components/schemas/Option"
          optionsDataSource:
            $ref: "#/components/schemas/OptionsDataSource"
    DateTimeProperty:
      description: "A date-time property type."
      type: "object"
      allOf:
      - $ref: "#/components/schemas/ValueProperty"
      - type: "object"
        properties:
          defaultValue:
            description: "The property default value."
            type: "string"
            format: "date-time"
          exampleValue:
            description: "The property sample value."
            type: "string"
            format: "date-time"
          options:
            description: "The list of valid property options."
            type: "array"
            items:
              $ref: "#/components/schemas/Option"
          optionsDataSource:
            $ref: "#/components/schemas/OptionsDataSource"
    DynamicPropertiesProperty:
      description: "A dynamic properties property type."
      type: "object"
      allOf:
      - $ref: "#/components/schemas/Property"
      - type: "object"
        properties:
          header:
            description: "The dynamic property header."
            type: "string"
          propertiesDataSource:
            $ref: "#/components/schemas/PropertiesDataSource"
    Environment:
      description: "The environment."
      type: "object"
      required:
        - "name"
      properties:
        id:
          description: "The environment id."
          type: "integer"
          format: "int64"
        name:
          description: "The environment name."
          type: "string"
    ExecutionError:
      description: "Contains information about an error that happened during execution."
      type: "object"
      properties:
        message:
          description: "The error message."
          type: "string"
        stackTrace:
          description: "The error stacktrace."
          type: "array"
          items:
            type: "string"
    FileEntryProperty:
      description: "An file entry property type."
      type: "object"
      allOf:
        - $ref: "#/components/schemas/ValueProperty"
        - type: "object"
          properties:
            properties:
              description: "The list of valid file entry property types."
              type: "array"
              items:
                $ref: "#/components/schemas/Property"
    Help:
      description: "The help text that is meant to guide your users as to how to configure\
        \ this action or trigger."
      type: "object"
      required:
      - "body"
      properties:
        body:
          description: "The help text"
          type: "string"
        learnMoreUrl:
          description: "The url to additional documentation"
          type: "string"
    IntegerProperty:
      description: "An integer property type."
      type: "object"
      allOf:
      - $ref: "#/components/schemas/ValueProperty"
      - type: "object"
        properties:
          defaultValue:
            description: "The property default value."
            type: "integer"
            format: "int64"
          exampleValue:
            description: "The property sample value."
            type: "integer"
            format: "int64"
          maxValue:
            description: "The maximum property value."
            type: "integer"
            format: "int64"
          minValue:
            description: "The minimum property value."
            type: "integer"
            format: "int64"
          options:
            description: "The list of valid property options."
            type: "array"
            items:
              $ref: "#/components/schemas/Option"
          optionsDataSource:
            $ref: "#/components/schemas/OptionsDataSource"
    NullProperty:
      description: "A null property type."
      type: "object"
      allOf:
      - $ref: "#/components/schemas/ValueProperty"
    NumberProperty:
      description: "A number property type."
      type: "object"
      allOf:
      - $ref: "#/components/schemas/ValueProperty"
      - type: "object"
        properties:
          defaultValue:
            description: "The property default value."
            type: "number"
            format: "double"
          exampleValue:
            description: "The property sample value."
            type: "number"
            format: "double"
          maxNumberPrecision:
            description: "The number value precision."
            type: "integer"
            format: "int32"
          maxValue:
            description: "The maximum property value."
            type: "number"
            format: "double"
          minNumberPrecision:
            description: "The number value precision."
            type: "integer"
            format: "int32"
          minValue:
            description: "The minimum property value."
            type: "number"
            format: "double"
          numberPrecision:
            description: "The number value precision."
            type: "integer"
            format: "int32"
          options:
            description: "The list of valid property options."
            type: "array"
            items:
              $ref: "#/components/schemas/Option"
          optionsDataSource:
            $ref: "#/components/schemas/OptionsDataSource"
    OAuth2AuthorizationParameters:
      properties:
        authorizationUrl:
          type: "string"
        extraQueryParameters:
          type: "object"
          additionalProperties:
            type: "string"
        clientId:
          type: "string"
        scopes:
          type: "array"
          items:
            type: "string"
    OAuth2Properties:
      properties:
        redirectUri:
          description: "The redirect URI used for OAuth2 callback URL."
          type: "string"
          readOnly: true
        predefinedApps:
          description: "The list of predefined OAuth2 apps."
          type: "array"
          readOnly: true
          items:
            type: "string"
    ObjectProperty:
      description: "An object property type."
      type: "object"
      allOf:
      - $ref: "#/components/schemas/ValueProperty"
      - type: "object"
        properties:
          additionalProperties:
            description: "Types of dynamically defined properties."
            type: "array"
            items:
              $ref: "#/components/schemas/Property"
          defaultValue:
            description: "The property default value."
            type: "object"
            additionalProperties: true
          exampleValue:
            description: "The property sample value."
            type: "object"
            additionalProperties: true
          multipleValues:
            description: "If the object can contain multiple additional properties."
            type: "boolean"
          options:
            description: "The list of valid property options."
            type: "array"
            items:
              $ref: "#/components/schemas/Option"
          optionsDataSource:
            $ref: "#/components/schemas/OptionsDataSource"
          properties:
            description: "The list of valid object property types."
            type: "array"
            items:
              $ref: "#/components/schemas/Property"
    Option:
      description: "Defines valid property value."
      type: "object"
      properties:
        description:
          description: "Description of the option."
          type: "string"
        label:
          description: "The label of an option."
          type: "string"
        value:
          $ref: "#/components/schemas/AnyValue"
    OptionsDataSource:
      description: "Defines function that should dynamically load options for the\
        \ property."
      type: "object"
      properties:
        optionsLookupDependsOn:
          description: "The list of property names on which value change the property\
            \ options should load/reload."
          type: "array"
          items:
            type: "string"
    OutputResponse:
      description: "The output response"
      type: "object"
      properties:
        outputSchema:
          $ref: "#/components/schemas/Property"
        placeholder:
          description: "The placeholder of an output."
          type: "object"
        sampleOutput:
          description: "The sample value of an output."
          type: "object"
    PropertiesDataSource:
      description: "Defines function that should load properties."
      type: "object"
      properties:
        propertiesLookupDependsOn:
          description: "The list of property names on which value change the properties\
            \ should load/reload."
          type: "array"
          items:
            type: "string"
    Property:
      description: "A base property."
      type: "object"
      required:
      - "type"
      properties:
        advancedOption:
          description: "If the property should be grouped under advanced options."
          type: "boolean"
          default: false
        description:
          description: "The property description."
          type: "string"
        displayCondition:
          description: "Defines rules when the property should be shown or hidden."
          type: "string"
        expressionEnabled:
          description: "Defines if the property can contain expressions or only constant\
            \ values. Defaults to true."
          type: "boolean"
          default: true
        hidden:
          description: "If the property should be visible or not."
          type: "boolean"
          default: false
        name:
          description: "The property name."
          type: "string"
        required:
          description: "If the property is required or not."
          type: "boolean"
          default: false
        type:
          $ref: "#/components/schemas/PropertyType"
      discriminator:
        propertyName: "type"
        mapping:
          ARRAY: "#/components/schemas/ArrayProperty"
          BOOLEAN: "#/components/schemas/BooleanProperty"
          DATE: "#/components/schemas/DateProperty"
          DATE_TIME: "#/components/schemas/DateTimeProperty"
          DYNAMIC_PROPERTIES: "#/components/schemas/DynamicPropertiesProperty"
          FILE_ENTRY: "#/components/schemas/FileEntryProperty"
          INTEGER: "#/components/schemas/IntegerProperty"
          "NULL": "#/components/schemas/NullProperty"
          NUMBER: "#/components/schemas/NumberProperty"
          OBJECT: "#/components/schemas/ObjectProperty"
          STRING: "#/components/schemas/StringProperty"
          TASK: "#/components/schemas/TaskProperty"
          TIME: "#/components/schemas/TimeProperty"
    PropertyType:
      description: "A type of property."
      type: "string"
      enum:
      - "ARRAY"
      - "BOOLEAN"
      - "DATE"
      - "DATE_TIME"
      - "DYNAMIC_PROPERTIES"
      - "FILE_ENTRY"
      - "INTEGER"
      - "NULL"
      - "NUMBER"
      - "STRING"
      - "OBJECT"
      - "TASK"
      - "TIME"
    Resources:
      description: "A set of available resources."
      type: "object"
      properties:
        documentationUrl:
          description: "The url of available documentation."
          type: "string"
    StringProperty:
      description: "A string property."
      type: "object"
      allOf:
      - $ref: "#/components/schemas/ValueProperty"
      - type: "object"
        properties:
          languageId:
            description: "The language id used together with CODE_EDITOR control type."
            type: "string"
          defaultValue:
            description: "The property default value."
            type: "string"
          exampleValue:
            description: "The property sample value."
            type: "string"
          maxLength:
            description: "The maximum string length."
            type: "integer"
            format: "int32"
          minLength:
            description: "The minimum string length."
            type: "integer"
            format: "int32"
          regex:
            description: "The regular expression pattern for validation."
            type: "string"
          options:
            description: "The list of valid property options."
            type: "array"
            items:
              $ref: "#/components/schemas/Option"
          optionsDataSource:
            $ref: "#/components/schemas/OptionsDataSource"
          optionsLoadedDynamically:
            description: "If the property options should be loaded dynamically."
            type: "boolean"
    Tag:
      $ref: "../../../platform-tag/platform-tag-rest/openapi/components/schemas/objects/tag.yaml"
    TaskDispatcherDefinition:
      description: "A task dispatcher defines a strategy for dispatching tasks to\
        \ be executed."
      type: "object"
      required:
      - "name"
      - "outputDefined"
      - "version"
      properties:
        description:
          description: "The description."
          type: "string"
        icon:
          description: "The icon."
          type: "string"
        name:
          description: "The task dispatcher name.."
          type: "string"
        outputDefined:
          description: "Does task dispatcher defines output."
          type: "boolean"
        outputFunctionDefined:
          description: "Does task dispatcher defines output function."
          type: "boolean"
        outputSchemaDefined:
          description: "Does task dispatcher defines output schema."
          type: "boolean"
        properties:
          description: "The list of task dispatcher properties."
          type: "array"
          items:
            $ref: "#/components/schemas/Property"
        resources:
          $ref: "#/components/schemas/Resources"
        taskProperties:
          description: "Properties used to define tasks to be dispatched."
          type: "array"
          items:
            $ref: "#/components/schemas/Property"
        title:
          description: "The title"
          type: "string"
        variablePropertiesDefined:
          description: "Does task dispatcher define dynamic variable properties."
          type: "boolean"
        version:
          type: "integer"
          description: "The version of a task dispatcher."
    TaskDispatcherDefinitionBasic:
      description: "A task dispatcher defines a strategy for dispatching tasks to\
        \ be executed."
      type: "object"
      required:
      - "name"
      - "outputDefined"
      - "version"
      properties:
        description:
          description: "The description."
          type: "string"
        icon:
          description: "The icon."
          type: "string"
        name:
          description: "The task dispatcher name."
          type: "string"
        outputDefined:
          description: "Does task dispatcher defines output."
          type: "boolean"
        outputFunctionDefined:
          description: "Does task dispatcher defines output function."
          type: "boolean"
        outputSchemaDefined:
          description: "Does task dispatcher defines output schema."
          type: "boolean"
        resources:
          $ref: "#/components/schemas/Resources"
        title:
          description: "The title"
          type: "string"
        variablePropertiesDefined:
          description: "Does task dispatcher define dynamic variable properties."
          type: "boolean"
        version:
          description: "The version of a task dispatcher."
          type: "integer"
    TaskDispatcherOperationRequest:
      type: "object"
      required:
        - "parameters"
      properties:
        parameters:
          description: "The parameters of an action."
          type: "object"
          additionalProperties: true
    TaskProperty:
      description: "A task property used in task dispatchers."
      type: "object"
      allOf:
        - $ref: "#/components/schemas/Property"
        - type: "object"
          properties:
            name:
              description: "The task name."
              type: "string"
    TimeProperty:
      description: "A time property."
      type: "object"
      allOf:
      - $ref: "#/components/schemas/ValueProperty"
      - type: "object"
        properties:
          defaultValue:
            description: "The property default value."
            type: "string"
            format: "time"
          exampleValue:
            description: "The property sample value."
            type: "string"
            format: "time"
          options:
            description: "The list of valid property options."
            type: "array"
            items:
              $ref: "#/components/schemas/Option"
          optionsDataSource:
            $ref: "#/components/schemas/OptionsDataSource"
    TriggerDefinition:
      description: "A trigger definition defines ways to trigger workflows from the\
        \ outside services."
      type: "object"
      required:
      - "name"
      - "outputDefined"
      - "outputFunctionDefined"
      - "type"
      properties:
        componentName:
          description: "The component name."
          type: "string"
        componentVersion:
          description: "The component version."
          type: "integer"
        description:
          description: "The description."
          type: "string"
        help:
          $ref: "#/components/schemas/Help"
        name:
          description: "The action name."
          type: "string"
        outputDefined:
          description: "Does trigger defines output."
          type: "boolean"
        outputFunctionDefined:
          description: "Does trigger defines output function."
          type: "boolean"
        outputSchemaDefined:
          description: "Does trigger defines output schema."
          type: "boolean"
        properties:
          description: "The list of action properties."
          type: "array"
          items:
            $ref: "#/components/schemas/Property"
        title:
          description: "The title"
          type: "string"
        type:
          $ref: "#/components/schemas/TriggerType"
        workflowNodeDescriptionDefined:
          description: "Does trigger define dynamic node description."
          type: "boolean"
    TriggerDefinitionBasic:
      description: "A trigger definition defines ways to trigger workflows from the\
        \ outside services."
      type: "object"
      required:
      - "componentName"
      - "componentVersion"
      - "name"
      - "outputDefined"
      - "outputFunctionDefined"
      - "type"
      properties:
        componentName:
          description: "The component name."
          type: "string"
        componentVersion:
          description: "The component version."
          type: "integer"
        description:
          description: "The description."
          type: "string"
        help:
          $ref: "#/components/schemas/Help"
        name:
          description: "The action name."
          type: "string"
        outputDefined:
          description: "Does trigger defines output."
          type: "boolean"
        outputFunctionDefined:
          description: "Does trigger defines output function."
          type: "boolean"
        outputSchemaDefined:
          description: "Does trigger defines output schema."
          type: "boolean"
        title:
          description: "The title"
          type: "string"
        type:
          $ref: "#/components/schemas/TriggerType"
    TriggerType:
      type: "string"
      enum:
      - "STATIC_WEBHOOK"
      - "HYBRID"
      - "LISTENER"
      - "POLLING"
      - "DYNAMIC_WEBHOOK"
    UnifiedApiCategory:
      description: "A category of unified API."
      type: "string"
      enum:
        - "ACCOUNTING"
        - "ATS"
        - "CRM"
        - "E_COMMERCE"
        - "HRIS"
        - "FILE_STORAGE"
        - "MARKETING_AUTOMATION"
        - "TICKETING"
    ValueProperty:
      description: "A base property for all value based properties."
      type: "object"
      allOf:
      - $ref: "#/components/schemas/Property"
      - type: "object"
        required:
          - "controlType"
        properties:
          controlType:
            $ref: "#/components/schemas/ControlType"
          label:
            description: "The property label."
            type: "string"
          placeholder:
            description: "The property placeholder."
            type: "string"
    Workflow:
      description: "The blueprint that describe the execution of a job."
      type: "object"
      x-implements: ['com.bytechef.platform.configuration.web.rest.model.WorkflowModelAware']
      properties:
        createdBy:
          description: "The created by."
          type: "string"
          readOnly: true
        createdDate:
          description: "The created date."
          type: "string"
          format: "date-time"
          readOnly: true
        connectionsCount:
          description: "The number of workflow connections"
          type: "integer"
          readOnly: true
        definition:
          description: "The definition of a workflow."
          type: "string"
          writeOnly: true
        description:
          description: "The description of a workflow."
          type: "string"
          writeOnly: true
        format:
          $ref: "#/components/schemas/WorkflowFormat"
        id:
          description: "The id of a workflow."
          type: "string"
          readOnly: true
        inputs:
          description: "The workflow's expected list of inputs."
          type: "array"
          items:
            $ref: "#/components/schemas/WorkflowInput"
          readOnly: true
        inputsCount:
          description: "The number of workflow inputs"
          type: "integer"
          readOnly: true
        label:
          description: "The descriptive name for the workflow"
          type: "string"
          readOnly: true
        lastModifiedBy:
          description: "The last modified by."
          type: "string"
          readOnly: true
        lastModifiedDate:
          description: "The last modified date."
          type: "string"
          format: "date-time"
          readOnly: true
        outputs:
          description: "The workflow's list of expected outputs."
          type: "array"
          items:
            $ref: "#/components/schemas/WorkflowOutput"
          readOnly: true
        sourceType:
          description: "The type of the source which stores the workflow definition."
          type: "string"
          enum:
            - "CLASSPATH"
            - "FILESYSTEM"
            - "GIT"
            - "JDBC"
        maxRetries:
          description: "The maximum number of times a task may retry."
          type: "integer"
          format: "int32"
          readOnly: true
        workflowTaskComponentNames:
          type: "array"
          items:
            type: "string"
          readOnly: true
        workflowTriggerComponentNames:
          type: "array"
          items:
            type: "string"
          readOnly: true
        tasks:
          description: "The steps that make up the workflow."
          type: "array"
          items:
            $ref: "#/components/schemas/WorkflowTask"
          readOnly: true
        triggers:
          description: "The steps that make up the workflow."
          type: "array"
          items:
            $ref: "#/components/schemas/WorkflowTrigger"
          readOnly: true
        __version:
          type: "integer"
    WorkflowBasic:
      description: "The blueprint that describe the execution of a job."
      type: "object"
      properties:
        createdBy:
          description: "The created by."
          type: "string"
          readOnly: true
        createdDate:
          description: "The created date."
          type: "string"
          format: "date-time"
          readOnly: true
        description:
          description: "The description of a workflow."
          type: "string"
          writeOnly: true
        id:
          description: "The id of a workflow."
          type: "string"
          readOnly: true
        label:
          description: "The descriptive name for the workflow"
          type: "string"
          readOnly: true
        lastModifiedBy:
          description: "The last modified by."
          type: "string"
          readOnly: true
        lastModifiedDate:
          description: "The last modified date."
          type: "string"
          format: "date-time"
          readOnly: true
        __version:
          type: "integer"
    ComponentConnection:
      type: "object"
      required:
        - "componentName"
        - "componentVersion"
        - "key"
        - "required"
        - "workflowNodeName"
      properties:
        componentName:
          description: "The name of the component"
          type: "string"
        componentVersion:
          description: "The version of the component"
          type: "integer"
        key:
          description: "The key of the connection"
          type: "string"
        required:
          description: "If the connection is required, or not"
          type: "boolean"
        workflowNodeName:
          type: "string"
    WorkflowFormat:
      type: "string"
      enum:
        - "JSON"
        - "YAML"
    WorkflowInput:
      type: "object"
      required:
        - "name"
        - "value"
      properties:
        label:
          description: "The descriptive name of an input"
          type: "string"
        name:
          description: "The name of an input"
          type: "string"
        required:
          description: "If an input is required, or not"
          type: "boolean"
          default: false
        type:
          description: "The type of an input, for example \\\"string\\\""
          type: "string"
          default: "string"
    WorkflowOutput:
      type: "object"
      required:
        - "name"
        - "value"
      properties:
        name:
          description: "The name of an output"
          type: "string"
        value:
          description: "The value of an output"
          type: "object"
    WorkflowNodeOutput:
      description: The workflow node output
      type: "object"
      required:
        - outputSchema
        - workflowNodeName
      properties:
        actionDefinition:
          $ref: '#/components/schemas/ActionDefinitionBasic'
        outputResponse:
          $ref: "#/components/schemas/OutputResponse"
        taskDispatcherDefinition:
          $ref: '#/components/schemas/TaskDispatcherDefinitionBasic'
        testOutputResponse:
          description: "If the output response is a sample or the real one"
          type: "boolean"
          default: false
        triggerDefinition:
          $ref: '#/components/schemas/TriggerDefinitionBasic'
        variableOutputResponse:
          $ref: "#/components/schemas/OutputResponse"
        workflowNodeName:
          description: The workflow node name
          type: "string"
    WorkflowNodeTestOutput:
      description: "Contains test output of a workflow node."
      type: "object"
      properties:
        id:
          description: "The workflow test node output id"
          type: "integer"
          format: "int64"
        workflowNodeName:
          description: "The workflow node name."
          type: "string"
        workflowId:
          description: "The workflow id."
          type: "string"
    ScriptTestExecution:
      description: "Contains information about test execution of a script."
      type: "object"
      required:
        - outputSchema
        - workflowNodeName
      properties:
        error:
          $ref: "#/components/schemas/ExecutionError"
        output:
          description: "The result output of testing a script."
          type: "object"
    WorkflowTestConfiguration:
      description: "Contains configuration and connections required for the test execution of a particular workflow."
      type: "object"
      required:
        - "environmentId"
        - "name"
      properties:
        connections:
          description: "The connections used by workflow test."
          type: "array"
          items:
            $ref: "#/components/schemas/WorkflowTestConfigurationConnection"
        createdBy:
          description: "The created by."
          type: "string"
          readOnly: true
        createdDate:
          description: "The created date."
          type: "string"
          format: "date-time"
          readOnly: true
        environmentId:
          description: "The id of an environment."
          type: "integer"
          format: "int64"
        inputs:
          description: "The input parameters used as workflow\
            \ input values."
          type: "object"
          additionalProperties:
            type: "string"
        lastModifiedBy:
          description: "The last modified by."
          type: "string"
          readOnly: true
        lastModifiedDate:
          description: "The last modified date."
          type: "string"
          format: "date-time"
          readOnly: true
        workflowId:
          description: "The id of a workflow."
          type: "string"
          readOnly: true
        __version:
          type: "integer"
    WorkflowTestConfigurationConnection:
      description: "The connection used in a particular action task or trigger."
      type: "object"
      required:
        - "connectionId"
        - "workflowConnectionKey"
        - "workflowNodeName"
      properties:
        connectionId:
          description: "The connection id"
          type: "integer"
          format: "int64"
        workflowConnectionKey:
          description: "The connection key under which a connection is defined in\
            \ a workflow definition."
          type: "string"
        workflowNodeName:
          description: "The action/trigger name to which a connection belongs."
          type: "string"
    WorkflowTask:
      description: "Represents a definition of a workflow task."
      type: "object"
      required:
        - "name"
        - "type"
      properties:
        clusterRoot:
          type: boolean
          default: false
          readOnly: true
        clusterElements:
          type: object
          additionalProperties: true
          readOnly: true
        connections:
          type: "array"
          items:
            $ref: "#/components/schemas/ComponentConnection"
          readOnly: true
        description:
          description: "The description of the task."
          type: "string"
        finalize:
          description: "The (optional) list of tasks that are to be executed after\
            \ execution of a task -- regardless of whether it had failed or not."
          type: "array"
          items:
            $ref: "#/components/schemas/WorkflowTask"
        label:
          description: "The human-readable description of the task."
          type: "string"
        metadata:
          description: "Key-value map of metadata."
          type: "object"
          additionalProperties: true
        name:
          description: "The identifier name of the task. Task names are used for assigning\
            \ the output of one task so it can be later used by subsequent tasks."
          type: "string"
        node:
          description: "Defines the name of the type of the node that the task execution\
            \ will be routed to. For instance, if the node value is \"encoder\", then\
            \ the task will be routed to the \"encoder\" queue which is presumably\
            \ subscribed to by worker nodes of \"encoder\" type."
          type: "string"
        parameters:
          description: "Key-value map of task parameters."
          type: "object"
          additionalProperties: true
        post:
          description: "The (optional) list of tasks that are to be executed after\
            \ the successful execution of a task."
          type: "array"
          items:
            $ref: "#/components/schemas/WorkflowTask"
        pre:
          description: "The (optional) list of tasks that are to be executed prior\
            \ to a task."
          type: "array"
          items:
            $ref: "#/components/schemas/WorkflowTask"
        timeout:
          description: "The timeout expression which describes when a task should\
            \ be deemed as timed-out."
          type: "string"
        type:
          description: "The type of the task."
          type: "string"
    WorkflowTrigger:
      description: "Represents a definition of a workflow trigger."
      type: "object"
      required:
        - "name"
        - "type"
      properties:
        connections:
          type: "array"
          items:
            $ref: "#/components/schemas/ComponentConnection"
          readOnly: true
        description:
          description: "The description of the task."
          type: "string"
        label:
          description: "The human-readable description of the task."
          type: "string"
        metadata:
          description: "Key-value map of metadata."
          type: "object"
          additionalProperties: true
        name:
          description: "The identifier name of the task. Task names are used for assigning\
            \ the output of one task so it can be later used by subsequent tasks."
          type: "string"
        parameters:
          description: "Key-value map of task parameters."
          type: "object"
          additionalProperties: true
        timeout:
          description: "The timeout expression which describes when a trigger should\
            \ be deemed as timed-out."
          type: "string"
        type:
          description: "The type of the trigger."
          type: "string"
