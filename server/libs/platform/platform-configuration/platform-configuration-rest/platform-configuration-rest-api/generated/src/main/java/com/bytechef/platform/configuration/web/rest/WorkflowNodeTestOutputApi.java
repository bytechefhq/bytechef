/*
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.15.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.bytechef.platform.configuration.web.rest;

import com.bytechef.platform.configuration.web.rest.model.CheckWorkflowNodeTestOutputExists200ResponseModel;
import org.springframework.format.annotation.DateTimeFormat;
import java.time.OffsetDateTime;
import com.bytechef.platform.configuration.web.rest.model.WorkflowNodeTestOutputModel;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.ExampleObject;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.lang.Nullable;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-10-02T07:57:58.800783178+02:00[Europe/Zagreb]", comments = "Generator version: 7.15.0")
@Validated
@Tag(name = "workflow-node-test-output", description = "The Platform Workflow Node Test Output Internal API")
public interface WorkflowNodeTestOutputApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    public static final String PATH_CHECK_WORKFLOW_NODE_TEST_OUTPUT_EXISTS = "/workflows/{id}/workflow-nodes/{workflowNodeName}/test-outputs/exists";
    /**
     * GET /workflows/{id}/workflow-nodes/{workflowNodeName}/test-outputs/exists : Check if a workflow node test output exists
     * Check if a workflow node test output exists.
     *
     * @param id The id of a workflow. (required)
     * @param workflowNodeName The name of a workflow node for which to create test output objects. (required)
     * @param environmentId The id of an environment. (required)
     * @param createdDate Check if a test output exists after a specific date. (optional)
     * @return Successful operation. (status code 200)
     */
    @Operation(
        operationId = "checkWorkflowNodeTestOutputExists",
        summary = "Check if a workflow node test output exists",
        description = "Check if a workflow node test output exists.",
        tags = { "workflow-node-test-output" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful operation.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = CheckWorkflowNodeTestOutputExists200ResponseModel.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = WorkflowNodeTestOutputApi.PATH_CHECK_WORKFLOW_NODE_TEST_OUTPUT_EXISTS,
        produces = { "application/json" }
    )
    
    default ResponseEntity<CheckWorkflowNodeTestOutputExists200ResponseModel> checkWorkflowNodeTestOutputExists(
        @Parameter(name = "id", description = "The id of a workflow.", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "workflowNodeName", description = "The name of a workflow node for which to create test output objects.", required = true, in = ParameterIn.PATH) @PathVariable("workflowNodeName") String workflowNodeName,
        @NotNull @Parameter(name = "environmentId", description = "The id of an environment.", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "environmentId", required = true) Long environmentId,
        @Parameter(name = "createdDate", description = "Check if a test output exists after a specific date.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "createdDate", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) @Nullable OffsetDateTime createdDate
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"exists\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    public static final String PATH_DELETE_WORKFLOW_NODE_TEST_OUTPUT = "/workflows/{id}/workflow-nodes/{workflowNodeName}/test-outputs";
    /**
     * DELETE /workflows/{id}/workflow-nodes/{workflowNodeName}/test-outputs : Delete existing workflow node test output
     * Delete existing workflow node test output.
     *
     * @param id The id of a workflow. (required)
     * @param workflowNodeName The name of a workflow node for which to create test output objects. (required)
     * @param environmentId The id of an environment. (required)
     * @return Successful operation. (status code 204)
     */
    @Operation(
        operationId = "deleteWorkflowNodeTestOutput",
        summary = "Delete existing workflow node test output",
        description = "Delete existing workflow node test output.",
        tags = { "workflow-node-test-output" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Successful operation.")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = WorkflowNodeTestOutputApi.PATH_DELETE_WORKFLOW_NODE_TEST_OUTPUT
    )
    
    default ResponseEntity<Void> deleteWorkflowNodeTestOutput(
        @Parameter(name = "id", description = "The id of a workflow.", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "workflowNodeName", description = "The name of a workflow node for which to create test output objects.", required = true, in = ParameterIn.PATH) @PathVariable("workflowNodeName") String workflowNodeName,
        @NotNull @Parameter(name = "environmentId", description = "The id of an environment.", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "environmentId", required = true) Long environmentId
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    public static final String PATH_SAVE_WORKFLOW_NODE_TEST_OUTPUT = "/workflows/{id}/workflow-nodes/{workflowNodeName}/test-outputs";
    /**
     * PUT /workflows/{id}/workflow-nodes/{workflowNodeName}/test-outputs : Create a new or update existing workflow node test output
     * Create a new or update existing workflow node test output.
     *
     * @param id The id of a workflow. (required)
     * @param workflowNodeName The name of a workflow node for which to create test output objects. (required)
     * @param environmentId The id of an environment. (required)
     * @return The workflow node test output object. (status code 200)
     */
    @Operation(
        operationId = "saveWorkflowNodeTestOutput",
        summary = "Create a new or update existing workflow node test output",
        description = "Create a new or update existing workflow node test output.",
        tags = { "workflow-node-test-output" },
        responses = {
            @ApiResponse(responseCode = "200", description = "The workflow node test output object.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = WorkflowNodeTestOutputModel.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = WorkflowNodeTestOutputApi.PATH_SAVE_WORKFLOW_NODE_TEST_OUTPUT,
        produces = { "application/json" }
    )
    
    default ResponseEntity<WorkflowNodeTestOutputModel> saveWorkflowNodeTestOutput(
        @Parameter(name = "id", description = "The id of a workflow.", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "workflowNodeName", description = "The name of a workflow node for which to create test output objects.", required = true, in = ParameterIn.PATH) @PathVariable("workflowNodeName") String workflowNodeName,
        @NotNull @Parameter(name = "environmentId", description = "The id of an environment.", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "environmentId", required = true) Long environmentId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"workflowNodeName\" : \"workflowNodeName\", \"id\" : 0, \"workflowId\" : \"workflowId\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    public static final String PATH_UPLOAD_WORKFLOW_NODE_SAMPLE_OUTPUT = "/workflows/{id}/workflow-nodes/{workflowNodeName}/test-outputs/sample-output";
    /**
     * PUT /workflows/{id}/workflow-nodes/{workflowNodeName}/test-outputs/sample-output : Upload a sample output to create a new or update existing workflow node test output
     * Upload a sample output to create a new or update existing workflow node test output.
     *
     * @param id The id of a workflow. (required)
     * @param workflowNodeName The name of a workflow node for which to create test output objects. (required)
     * @param environmentId The id of an environment. (required)
     * @param body  (required)
     * @return The workflow node test output object. (status code 200)
     */
    @Operation(
        operationId = "uploadWorkflowNodeSampleOutput",
        summary = "Upload a sample output to create a new or update existing workflow node test output",
        description = "Upload a sample output to create a new or update existing workflow node test output.",
        tags = { "workflow-node-test-output" },
        responses = {
            @ApiResponse(responseCode = "200", description = "The workflow node test output object.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = WorkflowNodeTestOutputModel.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = WorkflowNodeTestOutputApi.PATH_UPLOAD_WORKFLOW_NODE_SAMPLE_OUTPUT,
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<WorkflowNodeTestOutputModel> uploadWorkflowNodeSampleOutput(
        @Parameter(name = "id", description = "The id of a workflow.", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "workflowNodeName", description = "The name of a workflow node for which to create test output objects.", required = true, in = ParameterIn.PATH) @PathVariable("workflowNodeName") String workflowNodeName,
        @NotNull @Parameter(name = "environmentId", description = "The id of an environment.", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "environmentId", required = true) Long environmentId,
        @Parameter(name = "body", description = "", required = true) @Valid @RequestBody Object body
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"workflowNodeName\" : \"workflowNodeName\", \"id\" : 0, \"workflowId\" : \"workflowId\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
