/*
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.15.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.bytechef.platform.configuration.web.rest;

import com.bytechef.platform.configuration.web.rest.model.DeleteClusterElementParameter200ResponseModel;
import com.bytechef.platform.configuration.web.rest.model.DeleteClusterElementParameterRequestModel;
import com.bytechef.platform.configuration.web.rest.model.GetClusterElementParameterDisplayConditions200ResponseModel;
import com.bytechef.platform.configuration.web.rest.model.UpdateClusterElementParameterRequestModel;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.ExampleObject;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.lang.Nullable;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-10-02T07:57:58.800783178+02:00[Europe/Zagreb]", comments = "Generator version: 7.15.0")
@Validated
@Tag(name = "workflow-node-parameter", description = "The Platform Workflow Node Parameter Internal API")
public interface WorkflowNodeParameterApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    public static final String PATH_DELETE_CLUSTER_ELEMENT_PARAMETER = "/workflows/{id}/workflow-nodes/{workflowNodeName}/cluster-elements/{clusterElementType}/{clusterElementWorkflowNodeName}/parameters";
    /**
     * DELETE /workflows/{id}/workflow-nodes/{workflowNodeName}/cluster-elements/{clusterElementType}/{clusterElementWorkflowNodeName}/parameters : Deletes a cluster element parameter
     * Deletes a cluster element parameter.
     *
     * @param id The workflow id (required)
     * @param workflowNodeName The name of a workflow&#39;s action task or trigger (E.g. mailchimp_1) (required)
     * @param clusterElementType The name of a cluster element type. (required)
     * @param clusterElementWorkflowNodeName The name of a cluster element workflow node name. (required)
     * @param environmentId The id of an environment. (required)
     * @param deleteClusterElementParameterRequestModel  (required)
     * @return The updated workflow node parameters. (status code 200)
     */
    @Operation(
        operationId = "deleteClusterElementParameter",
        summary = "Deletes a cluster element parameter",
        description = "Deletes a cluster element parameter.",
        tags = { "workflow-node-parameter" },
        responses = {
            @ApiResponse(responseCode = "200", description = "The updated workflow node parameters.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = DeleteClusterElementParameter200ResponseModel.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = WorkflowNodeParameterApi.PATH_DELETE_CLUSTER_ELEMENT_PARAMETER,
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<DeleteClusterElementParameter200ResponseModel> deleteClusterElementParameter(
        @Parameter(name = "id", description = "The workflow id", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "workflowNodeName", description = "The name of a workflow's action task or trigger (E.g. mailchimp_1)", required = true, in = ParameterIn.PATH) @PathVariable("workflowNodeName") String workflowNodeName,
        @Parameter(name = "clusterElementType", description = "The name of a cluster element type.", required = true, in = ParameterIn.PATH) @PathVariable("clusterElementType") String clusterElementType,
        @Parameter(name = "clusterElementWorkflowNodeName", description = "The name of a cluster element workflow node name.", required = true, in = ParameterIn.PATH) @PathVariable("clusterElementWorkflowNodeName") String clusterElementWorkflowNodeName,
        @NotNull @Parameter(name = "environmentId", description = "The id of an environment.", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "environmentId", required = true) Long environmentId,
        @Parameter(name = "DeleteClusterElementParameterRequestModel", description = "", required = true) @Valid @RequestBody DeleteClusterElementParameterRequestModel deleteClusterElementParameterRequestModel
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"missingRequiredProperties\" : [ \"missingRequiredProperties\", \"missingRequiredProperties\" ], \"metadata\" : { \"key\" : \"\" }, \"displayConditions\" : { \"key\" : true }, \"parameters\" : { \"key\" : \"\" } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    public static final String PATH_DELETE_WORKFLOW_NODE_PARAMETER = "/workflows/{id}/workflow-nodes/{workflowNodeName}/parameters";
    /**
     * DELETE /workflows/{id}/workflow-nodes/{workflowNodeName}/parameters : Deletes a workflow node parameter
     * Deletes a workflow node parameter.
     *
     * @param id The workflow id (required)
     * @param workflowNodeName The name of a workflow&#39;s action task or trigger (E.g. mailchimp_1) (required)
     * @param environmentId The id of an environment. (required)
     * @param deleteClusterElementParameterRequestModel  (required)
     * @return The updated workflow node parameters. (status code 200)
     */
    @Operation(
        operationId = "deleteWorkflowNodeParameter",
        summary = "Deletes a workflow node parameter",
        description = "Deletes a workflow node parameter.",
        tags = { "workflow-node-parameter" },
        responses = {
            @ApiResponse(responseCode = "200", description = "The updated workflow node parameters.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = DeleteClusterElementParameter200ResponseModel.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = WorkflowNodeParameterApi.PATH_DELETE_WORKFLOW_NODE_PARAMETER,
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<DeleteClusterElementParameter200ResponseModel> deleteWorkflowNodeParameter(
        @Parameter(name = "id", description = "The workflow id", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "workflowNodeName", description = "The name of a workflow's action task or trigger (E.g. mailchimp_1)", required = true, in = ParameterIn.PATH) @PathVariable("workflowNodeName") String workflowNodeName,
        @NotNull @Parameter(name = "environmentId", description = "The id of an environment.", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "environmentId", required = true) Long environmentId,
        @Parameter(name = "DeleteClusterElementParameterRequestModel", description = "", required = true) @Valid @RequestBody DeleteClusterElementParameterRequestModel deleteClusterElementParameterRequestModel
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"missingRequiredProperties\" : [ \"missingRequiredProperties\", \"missingRequiredProperties\" ], \"metadata\" : { \"key\" : \"\" }, \"displayConditions\" : { \"key\" : true }, \"parameters\" : { \"key\" : \"\" } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    public static final String PATH_GET_CLUSTER_ELEMENT_PARAMETER_DISPLAY_CONDITIONS = "/workflows/{id}/workflow-nodes/{workflowNodeName}/cluster-elements/{clusterElementType}/{clusterElementWorkflowNodeName}/display-conditions";
    /**
     * GET /workflows/{id}/workflow-nodes/{workflowNodeName}/cluster-elements/{clusterElementType}/{clusterElementWorkflowNodeName}/display-conditions : Get cluster element property options shown in the editor
     * Get cluster element options shown in the editor.
     *
     * @param id The workflow id (required)
     * @param workflowNodeName The name of a workflow&#39;s action task or trigger (E.g. mailchimp_1) (required)
     * @param clusterElementType The name of a cluster element type. (required)
     * @param clusterElementWorkflowNodeName The name of a cluster element workflow node name. (required)
     * @param environmentId The id of an environment. (required)
     * @return The workflow node parameter display conditions. (status code 200)
     */
    @Operation(
        operationId = "getClusterElementParameterDisplayConditions",
        summary = "Get cluster element property options shown in the editor",
        description = "Get cluster element options shown in the editor.",
        tags = { "workflow-node-parameter" },
        responses = {
            @ApiResponse(responseCode = "200", description = "The workflow node parameter display conditions.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = GetClusterElementParameterDisplayConditions200ResponseModel.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = WorkflowNodeParameterApi.PATH_GET_CLUSTER_ELEMENT_PARAMETER_DISPLAY_CONDITIONS,
        produces = { "application/json" }
    )
    
    default ResponseEntity<GetClusterElementParameterDisplayConditions200ResponseModel> getClusterElementParameterDisplayConditions(
        @Parameter(name = "id", description = "The workflow id", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "workflowNodeName", description = "The name of a workflow's action task or trigger (E.g. mailchimp_1)", required = true, in = ParameterIn.PATH) @PathVariable("workflowNodeName") String workflowNodeName,
        @Parameter(name = "clusterElementType", description = "The name of a cluster element type.", required = true, in = ParameterIn.PATH) @PathVariable("clusterElementType") String clusterElementType,
        @Parameter(name = "clusterElementWorkflowNodeName", description = "The name of a cluster element workflow node name.", required = true, in = ParameterIn.PATH) @PathVariable("clusterElementWorkflowNodeName") String clusterElementWorkflowNodeName,
        @NotNull @Parameter(name = "environmentId", description = "The id of an environment.", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "environmentId", required = true) Long environmentId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"missingRequiredProperties\" : [ \"missingRequiredProperties\", \"missingRequiredProperties\" ], \"displayConditions\" : { \"key\" : true } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    public static final String PATH_GET_WORKFLOW_NODE_PARAMETER_DISPLAY_CONDITIONS = "/workflows/{id}/workflow-nodes/{workflowNodeName}/display-conditions";
    /**
     * GET /workflows/{id}/workflow-nodes/{workflowNodeName}/display-conditions : Get action or trigger display conditions shown in the editor
     * Get action or trigger display conditions shown in the editor.
     *
     * @param id The workflow id (required)
     * @param workflowNodeName The name of a workflow&#39;s action task or trigger (E.g. mailchimp_1) (required)
     * @param environmentId The id of an environment. (required)
     * @return The workflow node parameter display conditions. (status code 200)
     */
    @Operation(
        operationId = "getWorkflowNodeParameterDisplayConditions",
        summary = "Get action or trigger display conditions shown in the editor",
        description = "Get action or trigger display conditions shown in the editor.",
        tags = { "workflow-node-parameter" },
        responses = {
            @ApiResponse(responseCode = "200", description = "The workflow node parameter display conditions.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = GetClusterElementParameterDisplayConditions200ResponseModel.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = WorkflowNodeParameterApi.PATH_GET_WORKFLOW_NODE_PARAMETER_DISPLAY_CONDITIONS,
        produces = { "application/json" }
    )
    
    default ResponseEntity<GetClusterElementParameterDisplayConditions200ResponseModel> getWorkflowNodeParameterDisplayConditions(
        @Parameter(name = "id", description = "The workflow id", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "workflowNodeName", description = "The name of a workflow's action task or trigger (E.g. mailchimp_1)", required = true, in = ParameterIn.PATH) @PathVariable("workflowNodeName") String workflowNodeName,
        @NotNull @Parameter(name = "environmentId", description = "The id of an environment.", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "environmentId", required = true) Long environmentId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"missingRequiredProperties\" : [ \"missingRequiredProperties\", \"missingRequiredProperties\" ], \"displayConditions\" : { \"key\" : true } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    public static final String PATH_UPDATE_CLUSTER_ELEMENT_PARAMETER = "/workflows/{id}/workflow-nodes/{workflowNodeName}/cluster-elements/{clusterElementType}/{clusterElementWorkflowNodeName}/parameters";
    /**
     * PATCH /workflows/{id}/workflow-nodes/{workflowNodeName}/cluster-elements/{clusterElementType}/{clusterElementWorkflowNodeName}/parameters : Updates a cluster element parameter
     * Updates a cluster element parameter.
     *
     * @param id The workflow id (required)
     * @param workflowNodeName The name of a workflow&#39;s action task or trigger (E.g. mailchimp_1) (required)
     * @param clusterElementType The name of a cluster element type. (required)
     * @param clusterElementWorkflowNodeName The name of a cluster element workflow node name. (required)
     * @param environmentId The id of an environment. (required)
     * @param updateClusterElementParameterRequestModel  (required)
     * @return The updated workflow node parameters. (status code 200)
     */
    @Operation(
        operationId = "updateClusterElementParameter",
        summary = "Updates a cluster element parameter",
        description = "Updates a cluster element parameter.",
        tags = { "workflow-node-parameter" },
        responses = {
            @ApiResponse(responseCode = "200", description = "The updated workflow node parameters.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = DeleteClusterElementParameter200ResponseModel.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PATCH,
        value = WorkflowNodeParameterApi.PATH_UPDATE_CLUSTER_ELEMENT_PARAMETER,
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<DeleteClusterElementParameter200ResponseModel> updateClusterElementParameter(
        @Parameter(name = "id", description = "The workflow id", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "workflowNodeName", description = "The name of a workflow's action task or trigger (E.g. mailchimp_1)", required = true, in = ParameterIn.PATH) @PathVariable("workflowNodeName") String workflowNodeName,
        @Parameter(name = "clusterElementType", description = "The name of a cluster element type.", required = true, in = ParameterIn.PATH) @PathVariable("clusterElementType") String clusterElementType,
        @Parameter(name = "clusterElementWorkflowNodeName", description = "The name of a cluster element workflow node name.", required = true, in = ParameterIn.PATH) @PathVariable("clusterElementWorkflowNodeName") String clusterElementWorkflowNodeName,
        @NotNull @Parameter(name = "environmentId", description = "The id of an environment.", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "environmentId", required = true) Long environmentId,
        @Parameter(name = "UpdateClusterElementParameterRequestModel", description = "", required = true) @Valid @RequestBody UpdateClusterElementParameterRequestModel updateClusterElementParameterRequestModel
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"missingRequiredProperties\" : [ \"missingRequiredProperties\", \"missingRequiredProperties\" ], \"metadata\" : { \"key\" : \"\" }, \"displayConditions\" : { \"key\" : true }, \"parameters\" : { \"key\" : \"\" } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    public static final String PATH_UPDATE_WORKFLOW_NODE_PARAMETER = "/workflows/{id}/workflow-nodes/{workflowNodeName}/parameters";
    /**
     * PATCH /workflows/{id}/workflow-nodes/{workflowNodeName}/parameters : Updates a workflow node parameter
     * Updates a workflow node parameter.
     *
     * @param id The workflow id (required)
     * @param workflowNodeName The name of a workflow&#39;s action task or trigger (E.g. mailchimp_1) (required)
     * @param environmentId The id of an environment. (required)
     * @param updateClusterElementParameterRequestModel  (required)
     * @return The updated workflow node parameters. (status code 200)
     */
    @Operation(
        operationId = "updateWorkflowNodeParameter",
        summary = "Updates a workflow node parameter",
        description = "Updates a workflow node parameter.",
        tags = { "workflow-node-parameter" },
        responses = {
            @ApiResponse(responseCode = "200", description = "The updated workflow node parameters.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = DeleteClusterElementParameter200ResponseModel.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PATCH,
        value = WorkflowNodeParameterApi.PATH_UPDATE_WORKFLOW_NODE_PARAMETER,
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<DeleteClusterElementParameter200ResponseModel> updateWorkflowNodeParameter(
        @Parameter(name = "id", description = "The workflow id", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "workflowNodeName", description = "The name of a workflow's action task or trigger (E.g. mailchimp_1)", required = true, in = ParameterIn.PATH) @PathVariable("workflowNodeName") String workflowNodeName,
        @NotNull @Parameter(name = "environmentId", description = "The id of an environment.", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "environmentId", required = true) Long environmentId,
        @Parameter(name = "UpdateClusterElementParameterRequestModel", description = "", required = true) @Valid @RequestBody UpdateClusterElementParameterRequestModel updateClusterElementParameterRequestModel
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"missingRequiredProperties\" : [ \"missingRequiredProperties\", \"missingRequiredProperties\" ], \"metadata\" : { \"key\" : \"\" }, \"displayConditions\" : { \"key\" : true }, \"parameters\" : { \"key\" : \"\" } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
