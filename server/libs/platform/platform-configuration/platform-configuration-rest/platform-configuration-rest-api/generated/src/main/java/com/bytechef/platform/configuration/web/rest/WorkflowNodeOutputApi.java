/*
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.15.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.bytechef.platform.configuration.web.rest;

import com.bytechef.platform.configuration.web.rest.model.WorkflowNodeOutputModel;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.ExampleObject;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.lang.Nullable;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-10-02T07:57:58.800783178+02:00[Europe/Zagreb]", comments = "Generator version: 7.15.0")
@Validated
@Tag(name = "workflow-node-output", description = "The Platform Workflow Node Output Internal API")
public interface WorkflowNodeOutputApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    public static final String PATH_GET_CLUSTER_ELEMENT_OUTPUT = "/workflows/{id}/workflow-nodes/{workflowNodeName}/cluster-elements/{clusterElementType}/{clusterElementWorkflowNodeName}/outputs";
    /**
     * GET /workflows/{id}/workflow-nodes/{workflowNodeName}/cluster-elements/{clusterElementType}/{clusterElementWorkflowNodeName}/outputs : Get cluster element node output used in a workflow
     * Get cluster element node output used in a workflow.
     *
     * @param id The workflow id (required)
     * @param workflowNodeName The name of a workflow&#39;s action task or trigger (E.g. mailchimp_1) (required)
     * @param clusterElementType The name of a cluster element type. (required)
     * @param clusterElementWorkflowNodeName The name of a cluster element workflow node. (required)
     * @param environmentId The id of an environment. (required)
     * @return Successful operation. (status code 200)
     */
    @Operation(
        operationId = "getClusterElementOutput",
        summary = "Get cluster element node output used in a workflow",
        description = "Get cluster element node output used in a workflow.",
        tags = { "workflow-node-output" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful operation.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = WorkflowNodeOutputModel.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = WorkflowNodeOutputApi.PATH_GET_CLUSTER_ELEMENT_OUTPUT,
        produces = { "application/json" }
    )
    
    default ResponseEntity<WorkflowNodeOutputModel> getClusterElementOutput(
        @Parameter(name = "id", description = "The workflow id", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "workflowNodeName", description = "The name of a workflow's action task or trigger (E.g. mailchimp_1)", required = true, in = ParameterIn.PATH) @PathVariable("workflowNodeName") String workflowNodeName,
        @Parameter(name = "clusterElementType", description = "The name of a cluster element type.", required = true, in = ParameterIn.PATH) @PathVariable("clusterElementType") String clusterElementType,
        @Parameter(name = "clusterElementWorkflowNodeName", description = "The name of a cluster element workflow node.", required = true, in = ParameterIn.PATH) @PathVariable("clusterElementWorkflowNodeName") String clusterElementWorkflowNodeName,
        @NotNull @Parameter(name = "environmentId", description = "The id of an environment.", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "environmentId", required = true) Long environmentId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"testOutputResponse\" : false, \"triggerDefinition\" : { \"help\" : { \"body\" : \"body\", \"learnMoreUrl\" : \"learnMoreUrl\" }, \"outputFunctionDefined\" : true, \"outputSchemaDefined\" : true, \"name\" : \"name\", \"description\" : \"description\", \"outputDefined\" : true, \"componentName\" : \"componentName\", \"componentVersion\" : 1, \"title\" : \"title\", \"type\" : \"STATIC_WEBHOOK\" }, \"variableOutputResponse\" : { \"outputSchema\" : { \"displayCondition\" : \"displayCondition\", \"hidden\" : false, \"name\" : \"name\", \"description\" : \"description\", \"advancedOption\" : false, \"type\" : \"ARRAY\", \"required\" : false, \"expressionEnabled\" : true }, \"placeholder\" : \"{}\", \"sampleOutput\" : \"{}\" }, \"workflowNodeName\" : \"workflowNodeName\", \"actionDefinition\" : { \"help\" : { \"body\" : \"body\", \"learnMoreUrl\" : \"learnMoreUrl\" }, \"outputFunctionDefined\" : true, \"outputSchemaDefined\" : true, \"name\" : \"name\", \"description\" : \"description\", \"outputDefined\" : true, \"componentName\" : \"componentName\", \"componentVersion\" : 0, \"title\" : \"title\" }, \"outputResponse\" : { \"outputSchema\" : { \"displayCondition\" : \"displayCondition\", \"hidden\" : false, \"name\" : \"name\", \"description\" : \"description\", \"advancedOption\" : false, \"type\" : \"ARRAY\", \"required\" : false, \"expressionEnabled\" : true }, \"placeholder\" : \"{}\", \"sampleOutput\" : \"{}\" }, \"taskDispatcherDefinition\" : { \"outputFunctionDefined\" : true, \"outputSchemaDefined\" : true, \"variablePropertiesDefined\" : true, \"icon\" : \"icon\", \"name\" : \"name\", \"description\" : \"description\", \"outputDefined\" : true, \"resources\" : { \"documentationUrl\" : \"documentationUrl\" }, \"title\" : \"title\", \"version\" : 0 } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    public static final String PATH_GET_PREVIOUS_WORKFLOW_NODE_OUTPUTS = "/workflows/{id}/outputs";
    /**
     * GET /workflows/{id}/outputs : Get all dynamic workflow node outputs used in a workflow
     * Get all workflow node outputs used in a workflow.
     *
     * @param id The workflow id for which to return all used action definitions (required)
     * @param environmentId The id of an environment. (required)
     * @param lastWorkflowNodeName The name of the last workflow node (action task or trigger) up to which include the output schema (E.g. mailchimp_1, airtable_3) (optional)
     * @return Successful operation. (status code 200)
     */
    @Operation(
        operationId = "getPreviousWorkflowNodeOutputs",
        summary = "Get all dynamic workflow node outputs used in a workflow",
        description = "Get all workflow node outputs used in a workflow.",
        tags = { "workflow-node-output" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful operation.", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = WorkflowNodeOutputModel.class)))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = WorkflowNodeOutputApi.PATH_GET_PREVIOUS_WORKFLOW_NODE_OUTPUTS,
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<WorkflowNodeOutputModel>> getPreviousWorkflowNodeOutputs(
        @Parameter(name = "id", description = "The workflow id for which to return all used action definitions", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @NotNull @Parameter(name = "environmentId", description = "The id of an environment.", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "environmentId", required = true) Long environmentId,
        @Parameter(name = "lastWorkflowNodeName", description = "The name of the last workflow node (action task or trigger) up to which include the output schema (E.g. mailchimp_1, airtable_3)", in = ParameterIn.QUERY) @Valid @RequestParam(value = "lastWorkflowNodeName", required = false) @Nullable String lastWorkflowNodeName
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"testOutputResponse\" : false, \"triggerDefinition\" : { \"help\" : { \"body\" : \"body\", \"learnMoreUrl\" : \"learnMoreUrl\" }, \"outputFunctionDefined\" : true, \"outputSchemaDefined\" : true, \"name\" : \"name\", \"description\" : \"description\", \"outputDefined\" : true, \"componentName\" : \"componentName\", \"componentVersion\" : 1, \"title\" : \"title\", \"type\" : \"STATIC_WEBHOOK\" }, \"variableOutputResponse\" : { \"outputSchema\" : { \"displayCondition\" : \"displayCondition\", \"hidden\" : false, \"name\" : \"name\", \"description\" : \"description\", \"advancedOption\" : false, \"type\" : \"ARRAY\", \"required\" : false, \"expressionEnabled\" : true }, \"placeholder\" : \"{}\", \"sampleOutput\" : \"{}\" }, \"workflowNodeName\" : \"workflowNodeName\", \"actionDefinition\" : { \"help\" : { \"body\" : \"body\", \"learnMoreUrl\" : \"learnMoreUrl\" }, \"outputFunctionDefined\" : true, \"outputSchemaDefined\" : true, \"name\" : \"name\", \"description\" : \"description\", \"outputDefined\" : true, \"componentName\" : \"componentName\", \"componentVersion\" : 0, \"title\" : \"title\" }, \"outputResponse\" : { \"outputSchema\" : { \"displayCondition\" : \"displayCondition\", \"hidden\" : false, \"name\" : \"name\", \"description\" : \"description\", \"advancedOption\" : false, \"type\" : \"ARRAY\", \"required\" : false, \"expressionEnabled\" : true }, \"placeholder\" : \"{}\", \"sampleOutput\" : \"{}\" }, \"taskDispatcherDefinition\" : { \"outputFunctionDefined\" : true, \"outputSchemaDefined\" : true, \"variablePropertiesDefined\" : true, \"icon\" : \"icon\", \"name\" : \"name\", \"description\" : \"description\", \"outputDefined\" : true, \"resources\" : { \"documentationUrl\" : \"documentationUrl\" }, \"title\" : \"title\", \"version\" : 0 } }, { \"testOutputResponse\" : false, \"triggerDefinition\" : { \"help\" : { \"body\" : \"body\", \"learnMoreUrl\" : \"learnMoreUrl\" }, \"outputFunctionDefined\" : true, \"outputSchemaDefined\" : true, \"name\" : \"name\", \"description\" : \"description\", \"outputDefined\" : true, \"componentName\" : \"componentName\", \"componentVersion\" : 1, \"title\" : \"title\", \"type\" : \"STATIC_WEBHOOK\" }, \"variableOutputResponse\" : { \"outputSchema\" : { \"displayCondition\" : \"displayCondition\", \"hidden\" : false, \"name\" : \"name\", \"description\" : \"description\", \"advancedOption\" : false, \"type\" : \"ARRAY\", \"required\" : false, \"expressionEnabled\" : true }, \"placeholder\" : \"{}\", \"sampleOutput\" : \"{}\" }, \"workflowNodeName\" : \"workflowNodeName\", \"actionDefinition\" : { \"help\" : { \"body\" : \"body\", \"learnMoreUrl\" : \"learnMoreUrl\" }, \"outputFunctionDefined\" : true, \"outputSchemaDefined\" : true, \"name\" : \"name\", \"description\" : \"description\", \"outputDefined\" : true, \"componentName\" : \"componentName\", \"componentVersion\" : 0, \"title\" : \"title\" }, \"outputResponse\" : { \"outputSchema\" : { \"displayCondition\" : \"displayCondition\", \"hidden\" : false, \"name\" : \"name\", \"description\" : \"description\", \"advancedOption\" : false, \"type\" : \"ARRAY\", \"required\" : false, \"expressionEnabled\" : true }, \"placeholder\" : \"{}\", \"sampleOutput\" : \"{}\" }, \"taskDispatcherDefinition\" : { \"outputFunctionDefined\" : true, \"outputSchemaDefined\" : true, \"variablePropertiesDefined\" : true, \"icon\" : \"icon\", \"name\" : \"name\", \"description\" : \"description\", \"outputDefined\" : true, \"resources\" : { \"documentationUrl\" : \"documentationUrl\" }, \"title\" : \"title\", \"version\" : 0 } } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    public static final String PATH_GET_WORKFLOW_NODE_OUTPUT = "/workflows/{id}/workflow-nodes/{workflowNodeName}/outputs";
    /**
     * GET /workflows/{id}/workflow-nodes/{workflowNodeName}/outputs : Get workflow node output of an action task or trigger used in a workflow
     * Get workflow node output of an action task or trigger used in a workflow.
     *
     * @param id The workflow id (required)
     * @param workflowNodeName The name of a workflow&#39;s action task or trigger (E.g. mailchimp_1) (required)
     * @param environmentId The id of an environment. (required)
     * @return Successful operation. (status code 200)
     */
    @Operation(
        operationId = "getWorkflowNodeOutput",
        summary = "Get workflow node output of an action task or trigger used in a workflow",
        description = "Get workflow node output of an action task or trigger used in a workflow.",
        tags = { "workflow-node-output" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful operation.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = WorkflowNodeOutputModel.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = WorkflowNodeOutputApi.PATH_GET_WORKFLOW_NODE_OUTPUT,
        produces = { "application/json" }
    )
    
    default ResponseEntity<WorkflowNodeOutputModel> getWorkflowNodeOutput(
        @Parameter(name = "id", description = "The workflow id", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "workflowNodeName", description = "The name of a workflow's action task or trigger (E.g. mailchimp_1)", required = true, in = ParameterIn.PATH) @PathVariable("workflowNodeName") String workflowNodeName,
        @NotNull @Parameter(name = "environmentId", description = "The id of an environment.", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "environmentId", required = true) Long environmentId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"testOutputResponse\" : false, \"triggerDefinition\" : { \"help\" : { \"body\" : \"body\", \"learnMoreUrl\" : \"learnMoreUrl\" }, \"outputFunctionDefined\" : true, \"outputSchemaDefined\" : true, \"name\" : \"name\", \"description\" : \"description\", \"outputDefined\" : true, \"componentName\" : \"componentName\", \"componentVersion\" : 1, \"title\" : \"title\", \"type\" : \"STATIC_WEBHOOK\" }, \"variableOutputResponse\" : { \"outputSchema\" : { \"displayCondition\" : \"displayCondition\", \"hidden\" : false, \"name\" : \"name\", \"description\" : \"description\", \"advancedOption\" : false, \"type\" : \"ARRAY\", \"required\" : false, \"expressionEnabled\" : true }, \"placeholder\" : \"{}\", \"sampleOutput\" : \"{}\" }, \"workflowNodeName\" : \"workflowNodeName\", \"actionDefinition\" : { \"help\" : { \"body\" : \"body\", \"learnMoreUrl\" : \"learnMoreUrl\" }, \"outputFunctionDefined\" : true, \"outputSchemaDefined\" : true, \"name\" : \"name\", \"description\" : \"description\", \"outputDefined\" : true, \"componentName\" : \"componentName\", \"componentVersion\" : 0, \"title\" : \"title\" }, \"outputResponse\" : { \"outputSchema\" : { \"displayCondition\" : \"displayCondition\", \"hidden\" : false, \"name\" : \"name\", \"description\" : \"description\", \"advancedOption\" : false, \"type\" : \"ARRAY\", \"required\" : false, \"expressionEnabled\" : true }, \"placeholder\" : \"{}\", \"sampleOutput\" : \"{}\" }, \"taskDispatcherDefinition\" : { \"outputFunctionDefined\" : true, \"outputSchemaDefined\" : true, \"variablePropertiesDefined\" : true, \"icon\" : \"icon\", \"name\" : \"name\", \"description\" : \"description\", \"outputDefined\" : true, \"resources\" : { \"documentationUrl\" : \"documentationUrl\" }, \"title\" : \"title\", \"version\" : 0 } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
