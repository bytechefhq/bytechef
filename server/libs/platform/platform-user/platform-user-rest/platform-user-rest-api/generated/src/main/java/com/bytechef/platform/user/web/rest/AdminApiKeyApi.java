/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.8.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.bytechef.platform.user.web.rest;

import com.bytechef.platform.user.web.rest.model.AdminApiKeyModel;
import com.bytechef.platform.user.web.rest.model.CreateAdminApiKey200ResponseModel;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-09-18T05:52:29.479310+02:00[Europe/Zagreb]", comments = "Generator version: 7.8.0")
@Validated
@Tag(name = "admin-api-key", description = "The Platform User Admin API Key Internal API")
public interface AdminApiKeyApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /admin-api-keys : Create a new admin API key
     * Create a new admin API key.
     *
     * @param adminApiKeyModel  (required)
     * @return The secret admin API key object. (status code 200)
     */
    @Operation(
        operationId = "createAdminApiKey",
        summary = "Create a new admin API key",
        description = "Create a new admin API key.",
        tags = { "admin-api-key" },
        responses = {
            @ApiResponse(responseCode = "200", description = "The secret admin API key object.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = CreateAdminApiKey200ResponseModel.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/admin-api-keys",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<CreateAdminApiKey200ResponseModel> createAdminApiKey(
        @Parameter(name = "AdminApiKeyModel", description = "", required = true) @Valid @RequestBody AdminApiKeyModel adminApiKeyModel
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"secretKey\" : \"secretKey\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /admin-api-keys/{id} : Delete an admin API key
     * Delete an admin API key.
     *
     * @param id The id of an admin API key. (required)
     * @return Successful operation. (status code 200)
     */
    @Operation(
        operationId = "deleteAdminApiKey",
        summary = "Delete an admin API key",
        description = "Delete an admin API key.",
        tags = { "admin-api-key" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful operation.")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/admin-api-keys/{id}"
    )
    
    default ResponseEntity<Void> deleteAdminApiKey(
        @Parameter(name = "id", description = "The id of an admin API key.", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /admin-api-keys/{id} : Get an admin API key by id
     * Get an admin API key by id.
     *
     * @param id The id of an admin API key. (required)
     * @return The admin API key object. (status code 200)
     */
    @Operation(
        operationId = "getAdminApiKey",
        summary = "Get an admin API key by id",
        description = "Get an admin API key by id.",
        tags = { "admin-api-key" },
        responses = {
            @ApiResponse(responseCode = "200", description = "The admin API key object.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AdminApiKeyModel.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/admin-api-keys/{id}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<AdminApiKeyModel> getAdminApiKey(
        @Parameter(name = "id", description = "The id of an admin API key.", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"createdDate\" : \"2000-01-23T04:56:07.000+00:00\", \"lastUsedDate\" : \"2000-01-23T04:56:07.000+00:00\", \"secretKey\" : \"secretKey\", \"createdBy\" : \"createdBy\", \"lastModifiedDate\" : \"2000-01-23T04:56:07.000+00:00\", \"lastModifiedBy\" : \"lastModifiedBy\", \"name\" : \"name\", \"id\" : 0 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /admin-api-keys : Get admin api keys
     * Get admin API keys.
     *
     * @return The list of admin API keys. (status code 200)
     */
    @Operation(
        operationId = "getAdminApiKeys",
        summary = "Get admin api keys",
        description = "Get admin API keys.",
        tags = { "admin-api-key" },
        responses = {
            @ApiResponse(responseCode = "200", description = "The list of admin API keys.", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = AdminApiKeyModel.class)))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/admin-api-keys",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<AdminApiKeyModel>> getAdminApiKeys(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"createdDate\" : \"2000-01-23T04:56:07.000+00:00\", \"lastUsedDate\" : \"2000-01-23T04:56:07.000+00:00\", \"secretKey\" : \"secretKey\", \"createdBy\" : \"createdBy\", \"lastModifiedDate\" : \"2000-01-23T04:56:07.000+00:00\", \"lastModifiedBy\" : \"lastModifiedBy\", \"name\" : \"name\", \"id\" : 0 }, { \"createdDate\" : \"2000-01-23T04:56:07.000+00:00\", \"lastUsedDate\" : \"2000-01-23T04:56:07.000+00:00\", \"secretKey\" : \"secretKey\", \"createdBy\" : \"createdBy\", \"lastModifiedDate\" : \"2000-01-23T04:56:07.000+00:00\", \"lastModifiedBy\" : \"lastModifiedBy\", \"name\" : \"name\", \"id\" : 0 } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /admin-api-keys/{id} : Update an existing admin API key
     * Update an existing admin API key.
     *
     * @param id The id of an admin API key. (required)
     * @param adminApiKeyModel  (required)
     * @return The updated admin API key object. (status code 200)
     */
    @Operation(
        operationId = "updateAdminApiKey",
        summary = "Update an existing admin API key",
        description = "Update an existing admin API key.",
        tags = { "admin-api-key" },
        responses = {
            @ApiResponse(responseCode = "200", description = "The updated admin API key object.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AdminApiKeyModel.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/admin-api-keys/{id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<AdminApiKeyModel> updateAdminApiKey(
        @Parameter(name = "id", description = "The id of an admin API key.", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id,
        @Parameter(name = "AdminApiKeyModel", description = "", required = true) @Valid @RequestBody AdminApiKeyModel adminApiKeyModel
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"createdDate\" : \"2000-01-23T04:56:07.000+00:00\", \"lastUsedDate\" : \"2000-01-23T04:56:07.000+00:00\", \"secretKey\" : \"secretKey\", \"createdBy\" : \"createdBy\", \"lastModifiedDate\" : \"2000-01-23T04:56:07.000+00:00\", \"lastModifiedBy\" : \"lastModifiedBy\", \"name\" : \"name\", \"id\" : 0 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
