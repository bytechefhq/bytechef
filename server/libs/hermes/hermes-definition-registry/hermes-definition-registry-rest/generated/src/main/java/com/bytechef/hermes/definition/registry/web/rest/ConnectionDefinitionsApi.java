/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.5.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.bytechef.hermes.definition.registry.web.rest;

import com.bytechef.hermes.definition.registry.web.rest.model.GetOAuth2AuthorizationParametersRequestModel;
import com.bytechef.hermes.definition.registry.web.rest.model.OAuth2AuthorizationParametersModel;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.server.ServerWebExchange;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;
import org.springframework.http.codec.multipart.Part;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2023-05-04T05:51:17.891497+02:00[Europe/Zagreb]")
@Validated
@Tag(name = "connection-definitions", description = "The Core Connection Definitions API")
public interface ConnectionDefinitionsApi {

    /**
     * POST /connection-definitions/oauth2 : Retrieves oauth2 authorization parameters.
     * Retrieves oauth2 authorization parameters.
     *
     * @param getOAuth2AuthorizationParametersRequestModel  (required)
     * @return The object with oauth2 authorization parameters. (status code 200)
     */
    @Operation(
        operationId = "getOAuth2AuthorizationParameters",
        summary = "Retrieves oauth2 authorization parameters.",
        description = "Retrieves oauth2 authorization parameters.",
        tags = { "connection-definitions" },
        responses = {
            @ApiResponse(responseCode = "200", description = "The object with oauth2 authorization parameters.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = OAuth2AuthorizationParametersModel.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/connection-definitions/oauth2",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default Mono<ResponseEntity<OAuth2AuthorizationParametersModel>> getOAuth2AuthorizationParameters(
        @Parameter(name = "GetOAuth2AuthorizationParametersRequestModel", description = "", required = true) @Valid @RequestBody Mono<GetOAuth2AuthorizationParametersRequestModel> getOAuth2AuthorizationParametersRequestModel,
        @Parameter(hidden = true) final ServerWebExchange exchange
    ) {
        Mono<Void> result = Mono.empty();
        exchange.getResponse().setStatusCode(HttpStatus.NOT_IMPLEMENTED);
        for (MediaType mediaType : exchange.getRequest().getHeaders().getAccept()) {
            if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                String exampleString = "{ \"clientId\" : \"clientId\", \"authorizationUrl\" : \"authorizationUrl\", \"scopes\" : [ \"scopes\", \"scopes\" ] }";
                result = ApiUtil.getExampleResponse(exchange, mediaType, exampleString);
                break;
            }
        }
        return result.then(getOAuth2AuthorizationParametersRequestModel).then(Mono.empty());

    }

}
