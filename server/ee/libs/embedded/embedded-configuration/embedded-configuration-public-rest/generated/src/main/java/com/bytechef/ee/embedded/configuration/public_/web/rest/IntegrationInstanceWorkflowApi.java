/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.14.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.bytechef.ee.embedded.configuration.public_.web.rest;

import com.bytechef.ee.embedded.configuration.public_.web.rest.model.UpdateFrontendIntegrationInstanceWorkflowRequestModel;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.ExampleObject;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.lang.Nullable;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-09-02T13:45:36.996717465+02:00[Europe/Zagreb]", comments = "Generator version: 7.14.0")
@Validated
@Tag(name = "integration-instance-workflow", description = "The Embedded Integration Instance Workflow Public API")
public interface IntegrationInstanceWorkflowApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * DELETE /integration-instances/{id}/workflows/{workflowReferenceCode}/enable : Disable a workflow
     * Disable a workflow.
     *
     * @param id The id of an integration instance. (required)
     * @param workflowReferenceCode The workflow reference of the workflow to delete. (required)
     * @return Successful operation. (status code 204)
     *         or Access token is missing or invalid (status code 401)
     */
    @Operation(
        operationId = "disableFrontendIntegrationInstanceWorkflow",
        summary = "Disable a workflow",
        description = "Disable a workflow.",
        tags = { "integration-instance-workflow" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Successful operation."),
            @ApiResponse(responseCode = "401", description = "Access token is missing or invalid")
        },
        security = {
            @SecurityRequirement(name = "jwtBearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/integration-instances/{id}/workflows/{workflowReferenceCode}/enable"
    )
    
    default ResponseEntity<Void> disableFrontendIntegrationInstanceWorkflow(
        @Parameter(name = "id", description = "The id of an integration instance.", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id,
        @Parameter(name = "workflowReferenceCode", description = "The workflow reference of the workflow to delete.", required = true, in = ParameterIn.PATH) @PathVariable("workflowReferenceCode") String workflowReferenceCode
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /{externalUserId}/integration-instances/{id}/workflows/{workflowReferenceCode}/enable : Disable a workflow
     * Disable a workflow.
     *
     * @param externalUserId The external user id. (required)
     * @param id The id of an integration instance. (required)
     * @param workflowReferenceCode The workflow reference of the workflow to delete. (required)
     * @return Successful operation. (status code 204)
     *         or Access token is missing or invalid (status code 401)
     */
    @Operation(
        operationId = "disableIntegrationInstanceWorkflow",
        summary = "Disable a workflow",
        description = "Disable a workflow.",
        tags = { "integration-instance-workflow" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Successful operation."),
            @ApiResponse(responseCode = "401", description = "Access token is missing or invalid")
        },
        security = {
            @SecurityRequirement(name = "jwtBearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/{externalUserId}/integration-instances/{id}/workflows/{workflowReferenceCode}/enable"
    )
    
    default ResponseEntity<Void> disableIntegrationInstanceWorkflow(
        @Parameter(name = "externalUserId", description = "The external user id.", required = true, in = ParameterIn.PATH) @PathVariable("externalUserId") String externalUserId,
        @Parameter(name = "id", description = "The id of an integration instance.", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id,
        @Parameter(name = "workflowReferenceCode", description = "The workflow reference of the workflow to delete.", required = true, in = ParameterIn.PATH) @PathVariable("workflowReferenceCode") String workflowReferenceCode
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /integration-instances/{id}/workflows/{workflowReferenceCode}/enable : Enable a workflow
     * Enable a workflow.
     *
     * @param id The id of an integration instance. (required)
     * @param workflowReferenceCode The workflow reference of the workflow to delete. (required)
     * @return Successful operation. (status code 204)
     *         or Access token is missing or invalid (status code 401)
     */
    @Operation(
        operationId = "enableFrontendIntegrationInstanceWorkflow",
        summary = "Enable a workflow",
        description = "Enable a workflow.",
        tags = { "integration-instance-workflow" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Successful operation."),
            @ApiResponse(responseCode = "401", description = "Access token is missing or invalid")
        },
        security = {
            @SecurityRequirement(name = "jwtBearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/integration-instances/{id}/workflows/{workflowReferenceCode}/enable"
    )
    
    default ResponseEntity<Void> enableFrontendIntegrationInstanceWorkflow(
        @Parameter(name = "id", description = "The id of an integration instance.", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id,
        @Parameter(name = "workflowReferenceCode", description = "The workflow reference of the workflow to delete.", required = true, in = ParameterIn.PATH) @PathVariable("workflowReferenceCode") String workflowReferenceCode
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /{externalUserId}/integration-instances/{id}/workflows/{workflowReferenceCode}/enable : Enable a workflow
     * Enable a workflow.
     *
     * @param externalUserId The external user id. (required)
     * @param id The id of an integration instance. (required)
     * @param workflowReferenceCode The workflow reference of the workflow to delete. (required)
     * @return Successful operation. (status code 204)
     *         or Access token is missing or invalid (status code 401)
     */
    @Operation(
        operationId = "enableIntegrationInstanceWorkflow",
        summary = "Enable a workflow",
        description = "Enable a workflow.",
        tags = { "integration-instance-workflow" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Successful operation."),
            @ApiResponse(responseCode = "401", description = "Access token is missing or invalid")
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/{externalUserId}/integration-instances/{id}/workflows/{workflowReferenceCode}/enable"
    )
    
    default ResponseEntity<Void> enableIntegrationInstanceWorkflow(
        @Parameter(name = "externalUserId", description = "The external user id.", required = true, in = ParameterIn.PATH) @PathVariable("externalUserId") String externalUserId,
        @Parameter(name = "id", description = "The id of an integration instance.", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id,
        @Parameter(name = "workflowReferenceCode", description = "The workflow reference of the workflow to delete.", required = true, in = ParameterIn.PATH) @PathVariable("workflowReferenceCode") String workflowReferenceCode
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /integration-instances/{id}/workflows/{workflowReferenceCode} : Update integration instance workflow
     * Update a workflow for a specific integration instance.
     *
     * @param id The id of an integration instance. (required)
     * @param workflowReferenceCode The workflow reference of the workflow to delete. (required)
     * @param updateFrontendIntegrationInstanceWorkflowRequestModel  (required)
     * @return Successful operation. (status code 204)
     *         or Access token is missing or invalid (status code 401)
     */
    @Operation(
        operationId = "updateFrontendIntegrationInstanceWorkflow",
        summary = "Update integration instance workflow",
        description = "Update a workflow for a specific integration instance.",
        tags = { "integration-instance-workflow" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Successful operation."),
            @ApiResponse(responseCode = "401", description = "Access token is missing or invalid")
        },
        security = {
            @SecurityRequirement(name = "jwtBearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/integration-instances/{id}/workflows/{workflowReferenceCode}",
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Void> updateFrontendIntegrationInstanceWorkflow(
        @Parameter(name = "id", description = "The id of an integration instance.", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id,
        @Parameter(name = "workflowReferenceCode", description = "The workflow reference of the workflow to delete.", required = true, in = ParameterIn.PATH) @PathVariable("workflowReferenceCode") String workflowReferenceCode,
        @Parameter(name = "UpdateFrontendIntegrationInstanceWorkflowRequestModel", description = "", required = true) @Valid @RequestBody UpdateFrontendIntegrationInstanceWorkflowRequestModel updateFrontendIntegrationInstanceWorkflowRequestModel
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /{externalUserId}/integration-instances/{id}/workflows/{workflowReferenceCode} : Update integration instance workflow
     * Update a workflow for a specific integration instance.
     *
     * @param externalUserId The external user id. (required)
     * @param id The id of an integration instance. (required)
     * @param workflowReferenceCode The workflow reference of the workflow to delete. (required)
     * @param updateFrontendIntegrationInstanceWorkflowRequestModel  (required)
     * @return Successful operation. (status code 204)
     *         or Access token is missing or invalid (status code 401)
     */
    @Operation(
        operationId = "updateIntegrationInstanceWorkflow",
        summary = "Update integration instance workflow",
        description = "Update a workflow for a specific integration instance.",
        tags = { "integration-instance-workflow" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Successful operation."),
            @ApiResponse(responseCode = "401", description = "Access token is missing or invalid")
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/{externalUserId}/integration-instances/{id}/workflows/{workflowReferenceCode}",
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Void> updateIntegrationInstanceWorkflow(
        @Parameter(name = "externalUserId", description = "The external user id.", required = true, in = ParameterIn.PATH) @PathVariable("externalUserId") String externalUserId,
        @Parameter(name = "id", description = "The id of an integration instance.", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id,
        @Parameter(name = "workflowReferenceCode", description = "The workflow reference of the workflow to delete.", required = true, in = ParameterIn.PATH) @PathVariable("workflowReferenceCode") String workflowReferenceCode,
        @Parameter(name = "UpdateFrontendIntegrationInstanceWorkflowRequestModel", description = "", required = true) @Valid @RequestBody UpdateFrontendIntegrationInstanceWorkflowRequestModel updateFrontendIntegrationInstanceWorkflowRequestModel
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
