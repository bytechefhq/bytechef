/*
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.15.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.bytechef.ee.embedded.configuration.public_.web.rest;

import com.bytechef.ee.embedded.configuration.public_.web.rest.model.ConnectionModel;
import com.bytechef.ee.embedded.configuration.public_.web.rest.model.EnvironmentModel;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.ExampleObject;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.lang.Nullable;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-10-02T07:57:54.259635598+02:00[Europe/Zagreb]", comments = "Generator version: 7.15.0")
@Validated
@Tag(name = "connection", description = "the connection API")
public interface ConnectionApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    public static final String PATH_GET_CONNECTIONS = "/externalUserId/components/{componentName}/connections";
    /**
     * GET /externalUserId/components/{componentName}/connections : Get all connected user&#39;s connections
     * Get all connected user&#39;s connections.
     *
     * @param externalUserId The external user id. (required)
     * @param componentName The component name. (required)
     * @param xEnvironment The environment. (optional)
     * @param connectionIds The list of allowed connection ids. (optional)
     * @return The list of connections. (status code 200)
     */
    @Operation(
        operationId = "getConnections",
        summary = "Get all connected user's connections",
        description = "Get all connected user's connections.",
        tags = { "connection" },
        responses = {
            @ApiResponse(responseCode = "200", description = "The list of connections.", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = ConnectionModel.class)))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = ConnectionApi.PATH_GET_CONNECTIONS,
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<ConnectionModel>> getConnections(
        @Parameter(name = "externalUserId", description = "The external user id.", required = true, in = ParameterIn.PATH) @PathVariable("externalUserId") String externalUserId,
        @Parameter(name = "componentName", description = "The component name.", required = true, in = ParameterIn.PATH) @PathVariable("componentName") String componentName,
        @Parameter(name = "X-Environment", description = "The environment.", in = ParameterIn.HEADER) @RequestHeader(value = "X-Environment", required = false) @Nullable EnvironmentModel xEnvironment,
        @Parameter(name = "connectionIds", description = "The list of allowed connection ids.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "connectionIds", required = false) @Nullable List<Long> connectionIds
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"environment\" : \"DEVELOPMENT\", \"name\" : \"name\", \"id\" : 0 }, { \"environment\" : \"DEVELOPMENT\", \"name\" : \"name\", \"id\" : 0 } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    public static final String PATH_GET_FRONTEND_CONNECTIONS = "/components/{componentName}/connections";
    /**
     * GET /components/{componentName}/connections : Get all connected user&#39;s connections
     * Get all connected user&#39;s connections.
     *
     * @param componentName The component name. (required)
     * @param xEnvironment The environment. (optional)
     * @param connectionIds The list of allowed connection ids. (optional)
     * @return The list of connections. (status code 200)
     */
    @Operation(
        operationId = "getFrontendConnections",
        summary = "Get all connected user's connections",
        description = "Get all connected user's connections.",
        tags = { "connection" },
        responses = {
            @ApiResponse(responseCode = "200", description = "The list of connections.", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = ConnectionModel.class)))
            })
        },
        security = {
            @SecurityRequirement(name = "jwtBearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = ConnectionApi.PATH_GET_FRONTEND_CONNECTIONS,
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<ConnectionModel>> getFrontendConnections(
        @Parameter(name = "componentName", description = "The component name.", required = true, in = ParameterIn.PATH) @PathVariable("componentName") String componentName,
        @Parameter(name = "X-Environment", description = "The environment.", in = ParameterIn.HEADER) @RequestHeader(value = "X-Environment", required = false) @Nullable EnvironmentModel xEnvironment,
        @Parameter(name = "connectionIds", description = "The list of allowed connection ids.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "connectionIds", required = false) @Nullable List<Long> connectionIds
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"environment\" : \"DEVELOPMENT\", \"name\" : \"name\", \"id\" : 0 }, { \"environment\" : \"DEVELOPMENT\", \"name\" : \"name\", \"id\" : 0 } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
