/*
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.15.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.bytechef.ee.embedded.configuration.public_.web.rest;

import com.bytechef.ee.embedded.configuration.public_.web.rest.model.EnvironmentModel;
import com.bytechef.ee.embedded.configuration.public_.web.rest.model.IntegrationBasicModel;
import com.bytechef.ee.embedded.configuration.public_.web.rest.model.IntegrationModel;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.ExampleObject;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.lang.Nullable;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-10-02T07:57:54.259635598+02:00[Europe/Zagreb]", comments = "Generator version: 7.15.0")
@Validated
@Tag(name = "integration", description = "The Embedded Integration Public API")
public interface IntegrationApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    public static final String PATH_GET_FRONTEND_INTEGRATION = "/integrations/{id}";
    /**
     * GET /integrations/{id} : Get an integration by id for particular external user
     * Get an integration by id for particular external user.
     *
     * @param id The id of an integration. (required)
     * @param xEnvironment The environment. (optional)
     * @return The integration object. (status code 200)
     *         or Access token is missing or invalid (status code 401)
     */
    @Operation(
        operationId = "getFrontendIntegration",
        summary = "Get an integration by id for particular external user",
        description = "Get an integration by id for particular external user.",
        tags = { "integration" },
        responses = {
            @ApiResponse(responseCode = "200", description = "The integration object.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = IntegrationModel.class))
            }),
            @ApiResponse(responseCode = "401", description = "Access token is missing or invalid")
        },
        security = {
            @SecurityRequirement(name = "jwtBearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = IntegrationApi.PATH_GET_FRONTEND_INTEGRATION,
        produces = { "application/json" }
    )
    
    default ResponseEntity<IntegrationModel> getFrontendIntegration(
        @Parameter(name = "id", description = "The id of an integration.", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id,
        @Parameter(name = "X-Environment", description = "The environment.", in = ParameterIn.HEADER) @RequestHeader(value = "X-Environment", required = false) @Nullable EnvironmentModel xEnvironment
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"icon\" : \"icon\", \"integrationVersion\" : 6, \"name\" : \"name\", \"description\" : \"description\", \"multipleInstances\" : false, \"connectionConfig\" : { \"inputs\" : [ { \"name\" : \"name\", \"label\" : \"label\", \"type\" : \"STRING\", \"required\" : false }, { \"name\" : \"name\", \"label\" : \"label\", \"type\" : \"STRING\", \"required\" : false } ], \"authorizationType\" : \"API_KEY\", \"oauth2\" : { \"redirectUri\" : \"redirectUri\", \"clientId\" : \"clientId\", \"authorizationUrl\" : \"authorizationUrl\", \"extraQueryParameters\" : { \"key\" : \"extraQueryParameters\" }, \"scopes\" : [ \"scopes\", \"scopes\" ] } }, \"componentName\" : \"componentName\", \"id\" : 0, \"workflows\" : [ { \"inputs\" : [ { \"name\" : \"name\", \"label\" : \"label\", \"type\" : \"STRING\", \"required\" : false }, { \"name\" : \"name\", \"label\" : \"label\", \"type\" : \"STRING\", \"required\" : false } ], \"description\" : \"description\", \"label\" : \"label\", \"workflowUuid\" : \"workflowUuid\" }, { \"inputs\" : [ { \"name\" : \"name\", \"label\" : \"label\", \"type\" : \"STRING\", \"required\" : false }, { \"name\" : \"name\", \"label\" : \"label\", \"type\" : \"STRING\", \"required\" : false } ], \"description\" : \"description\", \"label\" : \"label\", \"workflowUuid\" : \"workflowUuid\" } ], \"integrationInstances\" : [ { \"id\" : 6, \"workflows\" : [ { \"inputs\" : { \"key\" : \"\" }, \"enabled\" : true, \"workflowUuid\" : \"workflowUuid\" }, { \"inputs\" : { \"key\" : \"\" }, \"enabled\" : true, \"workflowUuid\" : \"workflowUuid\" } ], \"enabled\" : true, \"credentialStatus\" : \"VALID\" }, { \"id\" : 6, \"workflows\" : [ { \"inputs\" : { \"key\" : \"\" }, \"enabled\" : true, \"workflowUuid\" : \"workflowUuid\" }, { \"inputs\" : { \"key\" : \"\" }, \"enabled\" : true, \"workflowUuid\" : \"workflowUuid\" } ], \"enabled\" : true, \"credentialStatus\" : \"VALID\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    public static final String PATH_GET_FRONTEND_INTEGRATIONS = "/integrations";
    /**
     * GET /integrations : Get active integrations for particular external user
     * Get active integrations for particular external user.
     *
     * @param xEnvironment The environment. (optional)
     * @return The list of active integrations. (status code 200)
     *         or Access token is missing or invalid (status code 401)
     */
    @Operation(
        operationId = "getFrontendIntegrations",
        summary = "Get active integrations for particular external user",
        description = "Get active integrations for particular external user.",
        tags = { "integration" },
        responses = {
            @ApiResponse(responseCode = "200", description = "The list of active integrations.", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = IntegrationBasicModel.class)))
            }),
            @ApiResponse(responseCode = "401", description = "Access token is missing or invalid")
        },
        security = {
            @SecurityRequirement(name = "jwtBearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = IntegrationApi.PATH_GET_FRONTEND_INTEGRATIONS,
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<IntegrationBasicModel>> getFrontendIntegrations(
        @Parameter(name = "X-Environment", description = "The environment.", in = ParameterIn.HEADER) @RequestHeader(value = "X-Environment", required = false) @Nullable EnvironmentModel xEnvironment
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"icon\" : \"icon\", \"integrationVersion\" : 1, \"name\" : \"name\", \"description\" : \"description\", \"multipleInstances\" : false, \"componentName\" : \"componentName\", \"id\" : 0, \"integrationInstances\" : [ { \"id\" : 6, \"workflows\" : [ { \"inputs\" : { \"key\" : \"\" }, \"enabled\" : true, \"workflowUuid\" : \"workflowUuid\" }, { \"inputs\" : { \"key\" : \"\" }, \"enabled\" : true, \"workflowUuid\" : \"workflowUuid\" } ], \"enabled\" : true, \"credentialStatus\" : \"VALID\" }, { \"id\" : 6, \"workflows\" : [ { \"inputs\" : { \"key\" : \"\" }, \"enabled\" : true, \"workflowUuid\" : \"workflowUuid\" }, { \"inputs\" : { \"key\" : \"\" }, \"enabled\" : true, \"workflowUuid\" : \"workflowUuid\" } ], \"enabled\" : true, \"credentialStatus\" : \"VALID\" } ] }, { \"icon\" : \"icon\", \"integrationVersion\" : 1, \"name\" : \"name\", \"description\" : \"description\", \"multipleInstances\" : false, \"componentName\" : \"componentName\", \"id\" : 0, \"integrationInstances\" : [ { \"id\" : 6, \"workflows\" : [ { \"inputs\" : { \"key\" : \"\" }, \"enabled\" : true, \"workflowUuid\" : \"workflowUuid\" }, { \"inputs\" : { \"key\" : \"\" }, \"enabled\" : true, \"workflowUuid\" : \"workflowUuid\" } ], \"enabled\" : true, \"credentialStatus\" : \"VALID\" }, { \"id\" : 6, \"workflows\" : [ { \"inputs\" : { \"key\" : \"\" }, \"enabled\" : true, \"workflowUuid\" : \"workflowUuid\" }, { \"inputs\" : { \"key\" : \"\" }, \"enabled\" : true, \"workflowUuid\" : \"workflowUuid\" } ], \"enabled\" : true, \"credentialStatus\" : \"VALID\" } ] } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    public static final String PATH_GET_INTEGRATION = "/{externalUserId}/integrations/{id}";
    /**
     * GET /{externalUserId}/integrations/{id} : Get active integrations for particular external user
     * Get active integrations for particular external user.
     *
     * @param externalUserId The external user id. (required)
     * @param id The id of an integration. (required)
     * @param xEnvironment The environment. (optional)
     * @return The list of active integrations. (status code 200)
     *         or Access token is missing or invalid (status code 401)
     */
    @Operation(
        operationId = "getIntegration",
        summary = "Get active integrations for particular external user",
        description = "Get active integrations for particular external user.",
        tags = { "integration" },
        responses = {
            @ApiResponse(responseCode = "200", description = "The list of active integrations.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = IntegrationModel.class))
            }),
            @ApiResponse(responseCode = "401", description = "Access token is missing or invalid")
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = IntegrationApi.PATH_GET_INTEGRATION,
        produces = { "application/json" }
    )
    
    default ResponseEntity<IntegrationModel> getIntegration(
        @Parameter(name = "externalUserId", description = "The external user id.", required = true, in = ParameterIn.PATH) @PathVariable("externalUserId") String externalUserId,
        @Parameter(name = "id", description = "The id of an integration.", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id,
        @Parameter(name = "X-Environment", description = "The environment.", in = ParameterIn.HEADER) @RequestHeader(value = "X-Environment", required = false) @Nullable EnvironmentModel xEnvironment
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"icon\" : \"icon\", \"integrationVersion\" : 6, \"name\" : \"name\", \"description\" : \"description\", \"multipleInstances\" : false, \"connectionConfig\" : { \"inputs\" : [ { \"name\" : \"name\", \"label\" : \"label\", \"type\" : \"STRING\", \"required\" : false }, { \"name\" : \"name\", \"label\" : \"label\", \"type\" : \"STRING\", \"required\" : false } ], \"authorizationType\" : \"API_KEY\", \"oauth2\" : { \"redirectUri\" : \"redirectUri\", \"clientId\" : \"clientId\", \"authorizationUrl\" : \"authorizationUrl\", \"extraQueryParameters\" : { \"key\" : \"extraQueryParameters\" }, \"scopes\" : [ \"scopes\", \"scopes\" ] } }, \"componentName\" : \"componentName\", \"id\" : 0, \"workflows\" : [ { \"inputs\" : [ { \"name\" : \"name\", \"label\" : \"label\", \"type\" : \"STRING\", \"required\" : false }, { \"name\" : \"name\", \"label\" : \"label\", \"type\" : \"STRING\", \"required\" : false } ], \"description\" : \"description\", \"label\" : \"label\", \"workflowUuid\" : \"workflowUuid\" }, { \"inputs\" : [ { \"name\" : \"name\", \"label\" : \"label\", \"type\" : \"STRING\", \"required\" : false }, { \"name\" : \"name\", \"label\" : \"label\", \"type\" : \"STRING\", \"required\" : false } ], \"description\" : \"description\", \"label\" : \"label\", \"workflowUuid\" : \"workflowUuid\" } ], \"integrationInstances\" : [ { \"id\" : 6, \"workflows\" : [ { \"inputs\" : { \"key\" : \"\" }, \"enabled\" : true, \"workflowUuid\" : \"workflowUuid\" }, { \"inputs\" : { \"key\" : \"\" }, \"enabled\" : true, \"workflowUuid\" : \"workflowUuid\" } ], \"enabled\" : true, \"credentialStatus\" : \"VALID\" }, { \"id\" : 6, \"workflows\" : [ { \"inputs\" : { \"key\" : \"\" }, \"enabled\" : true, \"workflowUuid\" : \"workflowUuid\" }, { \"inputs\" : { \"key\" : \"\" }, \"enabled\" : true, \"workflowUuid\" : \"workflowUuid\" } ], \"enabled\" : true, \"credentialStatus\" : \"VALID\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    public static final String PATH_GET_INTEGRATIONS = "/{externalUserId}/integrations";
    /**
     * GET /{externalUserId}/integrations : Get active integrations for particular external user
     * Get active integrations for particular external user.
     *
     * @param externalUserId The external user id. (required)
     * @param xEnvironment The environment. (optional)
     * @return The list of active integrations. (status code 200)
     *         or Access token is missing or invalid (status code 401)
     */
    @Operation(
        operationId = "getIntegrations",
        summary = "Get active integrations for particular external user",
        description = "Get active integrations for particular external user.",
        tags = { "integration" },
        responses = {
            @ApiResponse(responseCode = "200", description = "The list of active integrations.", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = IntegrationBasicModel.class)))
            }),
            @ApiResponse(responseCode = "401", description = "Access token is missing or invalid")
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = IntegrationApi.PATH_GET_INTEGRATIONS,
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<IntegrationBasicModel>> getIntegrations(
        @Parameter(name = "externalUserId", description = "The external user id.", required = true, in = ParameterIn.PATH) @PathVariable("externalUserId") String externalUserId,
        @Parameter(name = "X-Environment", description = "The environment.", in = ParameterIn.HEADER) @RequestHeader(value = "X-Environment", required = false) @Nullable EnvironmentModel xEnvironment
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"icon\" : \"icon\", \"integrationVersion\" : 1, \"name\" : \"name\", \"description\" : \"description\", \"multipleInstances\" : false, \"componentName\" : \"componentName\", \"id\" : 0, \"integrationInstances\" : [ { \"id\" : 6, \"workflows\" : [ { \"inputs\" : { \"key\" : \"\" }, \"enabled\" : true, \"workflowUuid\" : \"workflowUuid\" }, { \"inputs\" : { \"key\" : \"\" }, \"enabled\" : true, \"workflowUuid\" : \"workflowUuid\" } ], \"enabled\" : true, \"credentialStatus\" : \"VALID\" }, { \"id\" : 6, \"workflows\" : [ { \"inputs\" : { \"key\" : \"\" }, \"enabled\" : true, \"workflowUuid\" : \"workflowUuid\" }, { \"inputs\" : { \"key\" : \"\" }, \"enabled\" : true, \"workflowUuid\" : \"workflowUuid\" } ], \"enabled\" : true, \"credentialStatus\" : \"VALID\" } ] }, { \"icon\" : \"icon\", \"integrationVersion\" : 1, \"name\" : \"name\", \"description\" : \"description\", \"multipleInstances\" : false, \"componentName\" : \"componentName\", \"id\" : 0, \"integrationInstances\" : [ { \"id\" : 6, \"workflows\" : [ { \"inputs\" : { \"key\" : \"\" }, \"enabled\" : true, \"workflowUuid\" : \"workflowUuid\" }, { \"inputs\" : { \"key\" : \"\" }, \"enabled\" : true, \"workflowUuid\" : \"workflowUuid\" } ], \"enabled\" : true, \"credentialStatus\" : \"VALID\" }, { \"id\" : 6, \"workflows\" : [ { \"inputs\" : { \"key\" : \"\" }, \"enabled\" : true, \"workflowUuid\" : \"workflowUuid\" }, { \"inputs\" : { \"key\" : \"\" }, \"enabled\" : true, \"workflowUuid\" : \"workflowUuid\" } ], \"enabled\" : true, \"credentialStatus\" : \"VALID\" } ] } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
