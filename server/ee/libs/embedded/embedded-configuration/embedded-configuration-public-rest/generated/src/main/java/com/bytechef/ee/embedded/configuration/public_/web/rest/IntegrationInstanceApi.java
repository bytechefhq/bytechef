/*
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.15.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.bytechef.ee.embedded.configuration.public_.web.rest;

import com.bytechef.ee.embedded.configuration.public_.web.rest.model.CreateFrontendIntegrationInstanceRequestModel;
import com.bytechef.ee.embedded.configuration.public_.web.rest.model.EnvironmentModel;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.ExampleObject;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.lang.Nullable;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-10-02T07:57:54.259635598+02:00[Europe/Zagreb]", comments = "Generator version: 7.15.0")
@Validated
@Tag(name = "integration-instance", description = "The Embedded Integration Instance Public API")
public interface IntegrationInstanceApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    public static final String PATH_CREATE_FRONTEND_INTEGRATION_INSTANCE = "/integrations/{id}/instances";
    /**
     * POST /integrations/{id}/instances : Create and configure an integration instance
     * Creates and configures a new integration instance that connects to the specified integration, providing access to its functionality and enabling integration with external services and systems.
     *
     * @param id The id of an integration. (required)
     * @param createFrontendIntegrationInstanceRequestModel  (required)
     * @param xEnvironment The environment. (optional)
     * @return The integration instance id. (status code 200)
     *         or Access token is missing or invalid (status code 401)
     */
    @Operation(
        operationId = "createFrontendIntegrationInstance",
        summary = "Create and configure an integration instance",
        description = "Creates and configures a new integration instance that connects to the specified integration, providing access to its functionality and enabling integration with external services and systems.",
        tags = { "integration-instance" },
        responses = {
            @ApiResponse(responseCode = "200", description = "The integration instance id.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Long.class))
            }),
            @ApiResponse(responseCode = "401", description = "Access token is missing or invalid")
        },
        security = {
            @SecurityRequirement(name = "jwtBearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = IntegrationInstanceApi.PATH_CREATE_FRONTEND_INTEGRATION_INSTANCE,
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Long> createFrontendIntegrationInstance(
        @Parameter(name = "id", description = "The id of an integration.", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id,
        @Parameter(name = "CreateFrontendIntegrationInstanceRequestModel", description = "", required = true) @Valid @RequestBody CreateFrontendIntegrationInstanceRequestModel createFrontendIntegrationInstanceRequestModel,
        @Parameter(name = "X-Environment", description = "The environment.", in = ParameterIn.HEADER) @RequestHeader(value = "X-Environment", required = false) @Nullable EnvironmentModel xEnvironment
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    public static final String PATH_CREATE_INTEGRATION_INSTANCE = "/{externalUserId}/integrations/{id}/instances";
    /**
     * POST /{externalUserId}/integrations/{id}/instances : Connect and configure an integration instance to an existing integration
     * Connects an integration instance to an existing integration, allowing access to its functionality and resources.
     *
     * @param externalUserId The external user id. (required)
     * @param id The id of an integration. (required)
     * @param createFrontendIntegrationInstanceRequestModel  (required)
     * @param xEnvironment The environment. (optional)
     * @return The integration instance id. (status code 200)
     *         or Access token is missing or invalid (status code 401)
     */
    @Operation(
        operationId = "createIntegrationInstance",
        summary = "Connect and configure an integration instance to an existing integration",
        description = "Connects an integration instance to an existing integration, allowing access to its functionality and resources.",
        tags = { "integration-instance" },
        responses = {
            @ApiResponse(responseCode = "200", description = "The integration instance id.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Long.class))
            }),
            @ApiResponse(responseCode = "401", description = "Access token is missing or invalid")
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = IntegrationInstanceApi.PATH_CREATE_INTEGRATION_INSTANCE,
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Long> createIntegrationInstance(
        @Parameter(name = "externalUserId", description = "The external user id.", required = true, in = ParameterIn.PATH) @PathVariable("externalUserId") String externalUserId,
        @Parameter(name = "id", description = "The id of an integration.", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id,
        @Parameter(name = "CreateFrontendIntegrationInstanceRequestModel", description = "", required = true) @Valid @RequestBody CreateFrontendIntegrationInstanceRequestModel createFrontendIntegrationInstanceRequestModel,
        @Parameter(name = "X-Environment", description = "The environment.", in = ParameterIn.HEADER) @RequestHeader(value = "X-Environment", required = false) @Nullable EnvironmentModel xEnvironment
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    public static final String PATH_DELETE_FRONTEND_INTEGRATION_INSTANCE = "/integration-instances/{id}";
    /**
     * DELETE /integration-instances/{id} : Delete an integration instance
     * Delete an integration instance.
     *
     * @param id The id of an integration instance. (required)
     * @return Successful operation. (status code 204)
     *         or Access token is missing or invalid (status code 401)
     */
    @Operation(
        operationId = "deleteFrontendIntegrationInstance",
        summary = "Delete an integration instance",
        description = "Delete an integration instance.",
        tags = { "integration-instance" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Successful operation."),
            @ApiResponse(responseCode = "401", description = "Access token is missing or invalid")
        },
        security = {
            @SecurityRequirement(name = "jwtBearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = IntegrationInstanceApi.PATH_DELETE_FRONTEND_INTEGRATION_INSTANCE
    )
    
    default ResponseEntity<Void> deleteFrontendIntegrationInstance(
        @Parameter(name = "id", description = "The id of an integration instance.", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    public static final String PATH_DELETE_INTEGRATION_INSTANCE = "/{externalUserId}/integration-instances/{id}";
    /**
     * DELETE /{externalUserId}/integration-instances/{id} : Delete an integration instance
     * Delete an integration instance.
     *
     * @param externalUserId The external user id. (required)
     * @param id The id of an integration instance. (required)
     * @return Successful operation. (status code 204)
     *         or Access token is missing or invalid (status code 401)
     */
    @Operation(
        operationId = "deleteIntegrationInstance",
        summary = "Delete an integration instance",
        description = "Delete an integration instance.",
        tags = { "integration-instance" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Successful operation."),
            @ApiResponse(responseCode = "401", description = "Access token is missing or invalid")
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = IntegrationInstanceApi.PATH_DELETE_INTEGRATION_INSTANCE
    )
    
    default ResponseEntity<Void> deleteIntegrationInstance(
        @Parameter(name = "externalUserId", description = "The external user id.", required = true, in = ParameterIn.PATH) @PathVariable("externalUserId") String externalUserId,
        @Parameter(name = "id", description = "The id of an integration instance.", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
