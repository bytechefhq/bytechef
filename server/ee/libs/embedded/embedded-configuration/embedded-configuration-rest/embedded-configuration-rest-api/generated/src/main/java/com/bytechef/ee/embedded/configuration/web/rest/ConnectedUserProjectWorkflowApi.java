/*
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.15.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.bytechef.ee.embedded.configuration.web.rest;

import com.bytechef.ee.embedded.configuration.web.rest.model.ConnectedUserProjectWorkflowModel;
import com.bytechef.ee.embedded.configuration.web.rest.model.EnvironmentModel;
import com.bytechef.ee.embedded.configuration.web.rest.model.PublishConnectedUserProjectWorkflowRequestModel;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.ExampleObject;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.lang.Nullable;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-10-02T07:58:01.045237026+02:00[Europe/Zagreb]", comments = "Generator version: 7.15.0")
@Validated
@Tag(name = "connected-user-project-workflow", description = "The Embedded Connected User Project Workflow Internal API")
public interface ConnectedUserProjectWorkflowApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    public static final String PATH_ENABLE_CONNECTED_USER_PROJECT_WORKFLOW = "/connected-user-project-workflows/{workflowUuid}/enable/{enable}";
    /**
     * PATCH /connected-user-project-workflows/{workflowUuid}/enable/{enable} : Enable/disable a connected user project workflow
     * Enable/disable a connected user project workflow.
     *
     * @param workflowUuid The workflow uuid. (required)
     * @param enable Enable/disable the project deployment. (required)
     * @param xEnvironment The environment. (optional)
     * @return Successful operation. (status code 204)
     */
    @Operation(
        operationId = "enableConnectedUserProjectWorkflow",
        summary = "Enable/disable a connected user project workflow",
        description = "Enable/disable a connected user project workflow.",
        tags = { "connected-user-project-workflow" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Successful operation.")
        }
    )
    @RequestMapping(
        method = RequestMethod.PATCH,
        value = ConnectedUserProjectWorkflowApi.PATH_ENABLE_CONNECTED_USER_PROJECT_WORKFLOW
    )
    
    default ResponseEntity<Void> enableConnectedUserProjectWorkflow(
        @Parameter(name = "workflowUuid", description = "The workflow uuid.", required = true, in = ParameterIn.PATH) @PathVariable("workflowUuid") String workflowUuid,
        @Parameter(name = "enable", description = "Enable/disable the project deployment.", required = true, in = ParameterIn.PATH) @PathVariable("enable") Boolean enable,
        @Parameter(name = "X-Environment", description = "The environment.", in = ParameterIn.HEADER) @RequestHeader(value = "X-Environment", required = false) @Nullable EnvironmentModel xEnvironment
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    public static final String PATH_GET_CONNECTED_USER_PROJECT_WORKFLOW = "/connected-user-project-workflows/{workflowUuid}";
    /**
     * GET /connected-user-project-workflows/{workflowUuid} : Get connected user project workflow.
     * Get connected user project workflow.
     *
     * @param workflowUuid The workflow uuid. (required)
     * @param xEnvironment The environment. (optional)
     * @return The connected user project workflow object. (status code 200)
     */
    @Operation(
        operationId = "getConnectedUserProjectWorkflow",
        summary = "Get connected user project workflow.",
        description = "Get connected user project workflow.",
        tags = { "connected-user-project-workflow" },
        responses = {
            @ApiResponse(responseCode = "200", description = "The connected user project workflow object.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ConnectedUserProjectWorkflowModel.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = ConnectedUserProjectWorkflowApi.PATH_GET_CONNECTED_USER_PROJECT_WORKFLOW,
        produces = { "application/json" }
    )
    
    default ResponseEntity<ConnectedUserProjectWorkflowModel> getConnectedUserProjectWorkflow(
        @Parameter(name = "workflowUuid", description = "The workflow uuid.", required = true, in = ParameterIn.PATH) @PathVariable("workflowUuid") String workflowUuid,
        @Parameter(name = "X-Environment", description = "The environment.", in = ParameterIn.HEADER) @RequestHeader(value = "X-Environment", required = false) @Nullable EnvironmentModel xEnvironment
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"connectedUserId\" : 0, \"workflow\" : { \"outputs\" : [ { \"name\" : \"name\", \"value\" : \"{}\" }, { \"name\" : \"name\", \"value\" : \"{}\" } ], \"lastModifiedDate\" : \"2000-01-23T04:56:07.000+00:00\", \"inputs\" : [ { \"name\" : \"name\", \"label\" : \"label\", \"type\" : \"string\", \"required\" : false }, { \"name\" : \"name\", \"label\" : \"label\", \"type\" : \"string\", \"required\" : false } ], \"lastModifiedBy\" : \"lastModifiedBy\", \"format\" : \"JSON\", \"description\" : \"description\", \"workflowTaskComponentNames\" : [ \"workflowTaskComponentNames\", \"workflowTaskComponentNames\" ], \"label\" : \"label\", \"inputsCount\" : 5, \"triggers\" : [ { \"metadata\" : { \"key\" : \"\" }, \"name\" : \"name\", \"description\" : \"description\", \"label\" : \"label\", \"type\" : \"type\", \"parameters\" : { \"key\" : \"\" }, \"connections\" : [ { \"workflowNodeName\" : \"workflowNodeName\", \"componentName\" : \"componentName\", \"componentVersion\" : 7, \"key\" : \"key\", \"required\" : true }, { \"workflowNodeName\" : \"workflowNodeName\", \"componentName\" : \"componentName\", \"componentVersion\" : 7, \"key\" : \"key\", \"required\" : true } ], \"timeout\" : \"timeout\" }, { \"metadata\" : { \"key\" : \"\" }, \"name\" : \"name\", \"description\" : \"description\", \"label\" : \"label\", \"type\" : \"type\", \"parameters\" : { \"key\" : \"\" }, \"connections\" : [ { \"workflowNodeName\" : \"workflowNodeName\", \"componentName\" : \"componentName\", \"componentVersion\" : 7, \"key\" : \"key\", \"required\" : true }, { \"workflowNodeName\" : \"workflowNodeName\", \"componentName\" : \"componentName\", \"componentVersion\" : 7, \"key\" : \"key\", \"required\" : true } ], \"timeout\" : \"timeout\" } ], \"connectionsCount\" : 5, \"__version\" : 9, \"maxRetries\" : 2, \"createdDate\" : \"2000-01-23T04:56:07.000+00:00\", \"createdBy\" : \"createdBy\", \"sourceType\" : \"CLASSPATH\", \"workflowTriggerComponentNames\" : [ \"workflowTriggerComponentNames\", \"workflowTriggerComponentNames\" ], \"integrationWorkflowId\" : 3, \"definition\" : \"definition\", \"id\" : \"id\", \"tasks\" : [ { \"metadata\" : { \"key\" : \"\" }, \"pre\" : [ null, null ], \"clusterRoot\" : false, \"description\" : \"description\", \"label\" : \"label\", \"type\" : \"type\", \"timeout\" : \"timeout\", \"node\" : \"node\", \"post\" : [ null, null ], \"clusterElements\" : { \"key\" : \"\" }, \"name\" : \"name\", \"finalize\" : [ null, null ], \"parameters\" : { \"key\" : \"\" }, \"connections\" : [ { \"workflowNodeName\" : \"workflowNodeName\", \"componentName\" : \"componentName\", \"componentVersion\" : 7, \"key\" : \"key\", \"required\" : true }, { \"workflowNodeName\" : \"workflowNodeName\", \"componentName\" : \"componentName\", \"componentVersion\" : 7, \"key\" : \"key\", \"required\" : true } ] }, { \"metadata\" : { \"key\" : \"\" }, \"pre\" : [ null, null ], \"clusterRoot\" : false, \"description\" : \"description\", \"label\" : \"label\", \"type\" : \"type\", \"timeout\" : \"timeout\", \"node\" : \"node\", \"post\" : [ null, null ], \"clusterElements\" : { \"key\" : \"\" }, \"name\" : \"name\", \"finalize\" : [ null, null ], \"parameters\" : { \"key\" : \"\" }, \"connections\" : [ { \"workflowNodeName\" : \"workflowNodeName\", \"componentName\" : \"componentName\", \"componentVersion\" : 7, \"key\" : \"key\", \"required\" : true }, { \"workflowNodeName\" : \"workflowNodeName\", \"componentName\" : \"componentName\", \"componentVersion\" : 7, \"key\" : \"key\", \"required\" : true } ] } ], \"workflowUuid\" : \"workflowUuid\" }, \"workflowVersion\" : 1, \"projectId\" : 6 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    public static final String PATH_PUBLISH_CONNECTED_USER_PROJECT_WORKFLOW = "/connected-user-project-workflows/{workflowUuid}/publish";
    /**
     * POST /connected-user-project-workflows/{workflowUuid}/publish : Publishes existing connected user project workflow
     * Publishes existing connected user project workflow.
     *
     * @param workflowUuid The workflow uuid. (required)
     * @param publishConnectedUserProjectWorkflowRequestModel  (required)
     * @param xEnvironment The environment. (optional)
     * @return Successful operation. (status code 204)
     */
    @Operation(
        operationId = "publishConnectedUserProjectWorkflow",
        summary = "Publishes existing connected user project workflow",
        description = "Publishes existing connected user project workflow.",
        tags = { "connected-user-project-workflow" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Successful operation.")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = ConnectedUserProjectWorkflowApi.PATH_PUBLISH_CONNECTED_USER_PROJECT_WORKFLOW,
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Void> publishConnectedUserProjectWorkflow(
        @Parameter(name = "workflowUuid", description = "The workflow uuid.", required = true, in = ParameterIn.PATH) @PathVariable("workflowUuid") String workflowUuid,
        @Parameter(name = "PublishConnectedUserProjectWorkflowRequestModel", description = "", required = true) @Valid @RequestBody PublishConnectedUserProjectWorkflowRequestModel publishConnectedUserProjectWorkflowRequestModel,
        @Parameter(name = "X-Environment", description = "The environment.", in = ParameterIn.HEADER) @RequestHeader(value = "X-Environment", required = false) @Nullable EnvironmentModel xEnvironment
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
