---
openapi: "3.0.1"
info:
  title: "The Embedded Public V1 API"
  version: "1"
servers:
  - url: "/api/embedded/v1"
tags:
  - name: "action"
    description: "The Embedded Component Action Public API"
  - name: "app-event-trigger"
    description: "The Embedded App Event Trigger Public API"
  - name: "component"
    description: "The Embedded Component Public API"
  - name: "request-trigger"
    description: "The Embedded Request Trigger Public API"
  - name: "tool"
    description: "The Embedded AI Tool Public API"
  - name: "trigger"
    description: "The Embedded Component Trigger Public API"
  - name: "trigger-subscription"
    description: "The Embedded Component Trigger Subscription Public API"
paths:
#  /components:
#    get:
#      description: "Returns a list with all the available components from the component library."
#      summary: "Returns a list with all the available components from the component library"
#      tags:
#      - "component"
#      operationId: "getComponents"
#      responses:
#        "200":
#          description: "The list of component objects."
#          content:
#            application/json:
#              schema:
#                type: "array"
#                items:
#                  $ref: '#/components/schemas/Component'
#        "400":
#          description: "Invalid Input"
#        "401":
#          description: "Unauthorized"
#        "403":
#          description: "Forbidden"
#        "404":
#          description: "Not Found"
#        "429":
#          description: "Limit Exceeded"
#        "500":
#          description: "Internal Error"
#  /components/{componentName}/versions/{componentVersion}/actions:
#    get:
#      description: "Returns a list with all the available actions for a given component."
#      summary: "Returns a list with all the available actions for a given component"
#      tags:
#        - "action"
#      operationId: "getComponentActions"
#      parameters:
#        - name: "componentName"
#          description: "The component name"
#          in: "path"
#          required: true
#          schema:
#            type: "string"
#        - name: "componentVersion"
#          description: "The component version"
#          in: "path"
#          required: true
#          schema:
#            type: "integer"
#      responses:
#        "200":
#          description: "The list of component action objects."
#          content:
#            application/json:
#              schema:
#                type: "array"
#                items:
#                  $ref: '#/components/schemas/Action'
#        "400":
#          description: "Invalid Input"
#        "401":
#          description: "Unauthorized"
#        "403":
#          description: "Forbidden"
#        "404":
#          description: "Not Found"
#        "429":
#          description: "Limit Exceeded"
#        "500":
#          description: "Internal Error"
  /app-events:
    post:
      description: "Execute workflows."
      summary: "Execute workflows"
      tags:
        - "app-event-trigger"
      operationId: "executeWorkflows"
      parameters:
        - name: "X-Environment"
          description: "The environment."
          in: "header"
          required: false
          schema:
            $ref: '#/components/schemas/Environment'
      responses:
        "204":
          description: "Successful operation."
        "400":
          $ref: "#/components/responses/badRequest"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/notFound"
        "409":
          $ref: "#/components/responses/conflict"
        "422":
          $ref: "#/components/responses/unprocessableEntity"
        "499":
          $ref: "#/components/responses/remoteProviderError"
        "500":
          $ref: "#/components/responses/internalServerError"
        "501":
          $ref: "#/components/responses/notImplemented"
  /{externalUserId}/components/{componentName}/versions/{componentVersion}/actions/{actionName}:
    post:
      description: "Executes an action of a component and returns the result as the response."
      summary: "Executes an action of a component and returns the result as the response"
      tags:
        - "action"
      operationId: "executeAction"
      parameters:
        - name: "X-Environment"
          description: "The environment."
          in: "header"
          required: false
          schema:
            $ref: '#/components/schemas/Environment'
        - name: "X-Instance-Id"
          in: header
          schema:
            type: integer
            format: int64
          example: 1234
          description: The integration instance Id that uniquely identifies the connected user's specific integration instance
          required: false
        - name: "externalUserId"
          description: "The external user id."
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "componentName"
          description: "The component name."
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "componentVersion"
          description: "The component version."
          in: "path"
          required: true
          schema:
            type: "integer"
        - name: "actionName"
          description: "The name of the action to call."
          in: "path"
          required: true
          schema:
            type: "string"
      requestBody:
        content:
          application/json:
            schema:
              type: "object"
              required:
                - input
              properties:
                input:
                  description: The input parameters for the action.
                  type: object
                  additionalProperties: true
        required: true
      responses:
        "200":
          description: "The list of component action objects."
          content:
            application/json:
              schema:
                type: object
        "400":
          $ref: "#/components/responses/badRequest"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/notFound"
        "409":
          $ref: "#/components/responses/conflict"
        "422":
          $ref: "#/components/responses/unprocessableEntity"
        "499":
          $ref: "#/components/responses/remoteProviderError"
        "500":
          $ref: "#/components/responses/internalServerError"
        "501":
          $ref: "#/components/responses/notImplemented"
#  /components/{componentName}/versions/{componentVersion}/triggers:
#    get:
#      description: "Returns a list with all the available triggers for a given component."
#      summary: "Returns a list with all the available triggers for a given component"
#      tags:
#        - "trigger"
#      operationId: "getComponentTriggers"
#      parameters:
#        - name: "componentName"
#          description: "The component name"
#          in: "path"
#          required: true
#          schema:
#            type: "string"
#        - name: "componentVersion"
#          description: "The component version"
#          in: "path"
#          required: true
#          schema:
#            type: "integer"
#      responses:
#        "200":
#          description: "The list of component trigger objects."
#          content:
#            application/json:
#              schema:
#                type: "array"
#                items:
#                  $ref: '#/components/schemas/Trigger'
#        "400":
#          description: "Invalid Input"
#        "401":
#          description: "Unauthorized"
#        "403":
#          description: "Forbidden"
#        "404":
#          description: "Not Found"
#        "429":
#          description: "Limit Exceeded"
#        "500":
#          description: "Internal Error"
  /{externalUserId}/tools:
    get:
      description: "Returns a list with all the available tools."
      summary: "Returns a list with all the available tools"
      tags:
        - "tool"
      operationId: "getTools"
      parameters:
        - name: "X-Environment"
          description: "The environment."
          in: "header"
          required: false
          schema:
            $ref: '#/components/schemas/Environment'
        - name: "externalUserId"
          description: "The external user id."
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "categories"
          description: "Filter by specific integration categories, depending on the integrations the user has connected."
          in: "query"
          required: false
          schema:
            type: "array"
            items:
              type: "string"
        - name: "components"
          description: "Filter by specific components, depending on the integrations the user has connected."
          in: "query"
          required: false
          schema:
            type: "array"
            items:
              type: "string"
        - name: "tools"
          description: "Filter by specific tools, depending on the integrations the user has connected."
          in: "query"
          required: false
          schema:
            type: "array"
            items:
              type: "string"
      responses:
        "200":
          description: "The list of tool objects."
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: array
                  items:
                    $ref: "#/components/schemas/Tool"
        "400":
          $ref: "#/components/responses/badRequest"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/notFound"
        "409":
          $ref: "#/components/responses/conflict"
        "422":
          $ref: "#/components/responses/unprocessableEntity"
        "499":
          $ref: "#/components/responses/remoteProviderError"
        "500":
          $ref: "#/components/responses/internalServerError"
        "501":
          $ref: "#/components/responses/notImplemented"
    post:
      description: "Executes a tool and returns the result as the response."
      summary: "Executes a tool and returns the result as the response"
      tags:
        - "tool"
      operationId: "executeTool"
      parameters:
        - name: "X-Environment"
          description: "The environment."
          in: "header"
          required: false
          schema:
            $ref: '#/components/schemas/Environment'
        - name: "X-Instance-Id"
          in: header
          schema:
            type: integer
            format: int64
          example: 1234
          description: The integration instance Id that uniquely identifies the connected user's specific integration instance
          required: false
        - name: "externalUserId"
          description: "The external user id."
          in: "path"
          required: true
          schema:
            type: "string"
      requestBody:
        content:
          application/json:
            schema:
              type: "object"
              required:
                - name
                - parameters
              properties:
                name:
                  description: The name of the tool to call.
                  type: "string"
                parameters:
                  description: The input parameters for the tool.
                  type: object
                  additionalProperties: true
        required: true
      responses:
        "200":
          description: "The provider's response'."
          content:
            application/json:
              schema:
                type: object
        "400":
          $ref: "#/components/responses/badRequest"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/notFound"
        "409":
          $ref: "#/components/responses/conflict"
        "422":
          $ref: "#/components/responses/unprocessableEntity"
        "499":
          $ref: "#/components/responses/remoteProviderError"
        "500":
          $ref: "#/components/responses/internalServerError"
        "501":
          $ref: "#/components/responses/notImplemented"
  /workflows/{workflowUuid}:
    post:
      description: "Execute workflows."
      summary: "Execute workflows"
      tags:
        - "request-trigger"
      operationId: "executeWorkflow"
      parameters:
        - name: "workflowUuid"
          description: "The workflow uuid."
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "X-Environment"
          description: "The environment."
          in: "header"
          required: false
          schema:
            $ref: '#/components/schemas/Environment'
      responses:
        "200":
          description: "The list of active integrations."
          content:
            application/json:
              schema:
                type: "object"
        "400":
          $ref: "#/components/responses/badRequest"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/notFound"
        "409":
          $ref: "#/components/responses/conflict"
        "422":
          $ref: "#/components/responses/unprocessableEntity"
        "499":
          $ref: "#/components/responses/remoteProviderError"
        "500":
          $ref: "#/components/responses/internalServerError"
        "501":
          $ref: "#/components/responses/notImplemented"
#  /subscriptions:
#    get:
#      description: "Returns a list with all the available triggers for a given component."
#      summary: "Returns a list with all the available triggers for a given component"
#      tags:
#        - "trigger-subscription"
#      operationId: "getTriggerSubscriptions"
#      responses:
#        "200":
#          description: "The list of component trigger objects."
#          content:
#            application/json:
#              schema:
#                type: "array"
#                items:
#                  $ref: '#/components/schemas/TriggerSubscription'
#        "400":
#          description: "Invalid Input"
#        "401":
#          description: "Unauthorized"
#        "403":
#          description: "Forbidden"
#        "404":
#          description: "Not Found"
#        "429":
#          description: "Limit Exceeded"
#        "500":
#          description: "Internal Error"
#    post:
#      description: "Creates a subscription using a trigger name and returns the state of subscription."
#      summary: "Creates a subscription using a trigger name and returns the state of subscription.r"
#      tags:
#        - "trigger-subscription"
#      operationId: "createTriggerSubscriptions"
#      requestBody:
#        content:
#          application/json:
#            schema:
#              type: "object"
#              required:
#                - endpoint
#                - input
#                - name
#                - trigger
#              properties:
#                endpoint:
#                  description: "The URL where you want to receive the payloads from the subscription."
#                  type: "string"
#                externalId:
#                  description: The unique id of the subscription on your end.
#                  type: "string"
#                input:
#                  description: The input parameters for the action.
#                  type: object
#                  additionalProperties: true
#                name:
#                  description: The name of the subscription e.g. Mailchimp subscription
#                  type: "string"
#                trigger:
#                  $ref: "#/components/schemas/TriggerBasic"
#      responses:
#        "200":
#          description: "The trigger subscription object."
#          content:
#            application/json:
#              schema:
#                type: object
#                allOf:
#                  - $ref: '#/components/schemas/TriggerSubscription'
#                  - type: object
#                    required:
#                      - input
#                      - name
#                      - signingKey
#                    properties:
#                      input:
#                        description: The input parameters for the action.
#                        type: object
#                        additionalProperties: true
#                      signingKey:
#                        description:
#                        type: "string"
#        "400":
#          description: "Invalid Input"
#        "401":
#          description: "Unauthorized"
#        "403":
#          description: "Forbidden"
#        "404":
#          description: "Not Found"
#        "429":
#          description: "Limit Exceeded"
#        "500":
#          description: "Internal Error"
#  /subscriptions/{id}:
#    delete:
#      description: "Deletes a subscription."
#      summary: "Returns a subscription"
#      tags:
#        - "trigger-subscription"
#      operationId: "deleteTriggerSubscription"
#      parameters:
#        - name: "id"
#          description: "The id of a subscription."
#          in: "path"
#          required: true
#          schema:
#            type: "string"
#      responses:
#        "204":
#          description: "No content - The subscription was deleted successfully"
#        "400":
#          description: "Invalid Input"
#        "401":
#          description: "Unauthorized"
#        "403":
#          description: "Forbidden"
#        "404":
#          description: "Not Found"
#        "429":
#          description: "Limit Exceeded"
#        "500":
#          description: "Internal Error"
#    get:
#      description: "Returns a single subscription object."
#      summary: "Returns a single subscription object"
#      tags:
#        - "trigger-subscription"
#      operationId: "getTriggerSubscription"
#      parameters:
#        - name: "id"
#          description: "The id of a subscription."
#          in: "path"
#          required: true
#          schema:
#            type: "string"
#      responses:
#        "200":
#          description: "The trigger subscription object."
#          content:
#            application/json:
#              schema:
#                $ref: '#/components/schemas/TriggerSubscription'
#        "400":
#          description: "Invalid Input"
#        "401":
#          description: "Unauthorized"
#        "403":
#          description: "Forbidden"
#        "404":
#          description: "Not Found"
#        "429":
#          description: "Limit Exceeded"
#        "500":
#          description: "Internal Error"
components:
  responses:
    badRequest:
      description: Bad request
      content:
        application/json:
          schema:
            type: object
            properties:
              errors:
                $ref: "#/components/schemas/Errors"
    conflict:
      description: Conflict
      content:
        application/json:
          schema:
            type: object
            properties:
              errors:
                $ref: "#/components/schemas/Errors"
    forbidden:
      description: Forbidden
      content:
       application/json:
         schema:
           type: object
           properties:
             errors:
               $ref: "#/components/schemas/Errors"
    internalServerError:
      description: Internal server error
      content:
        application/json:
          schema:
            type: object
            properties:
              errors:
                $ref: "#/components/schemas/Errors"
    notFound:
      description: Not found
      content:
        application/json:
          schema:
            type: object
            properties:
              errors:
                $ref: "#/components/schemas/Errors"
    notImplemented:
      description: Not implemented
      content:
        application/json:
          schema:
            type: object
            properties:
              errors:
                $ref: "#/components/schemas/Errors"
    remoteProviderError:
      description: Remote provider error
      content:
        application/json:
          schema:
            type: object
            properties:
              errors:
                $ref: "#/components/schemas/Errors"
    unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            type: object
            properties:
              errors:
                $ref: "#/components/schemas/Errors"
    unprocessableEntity:
      description: Unprocessable entity
      content:
        application/json:
          schema:
            type: object
            properties:
              errors:
                $ref: "#/components/schemas/Errors"
  schemas:
#    Action:
#      type: "object"
#      required:
#        - description
#        - hasDynamicOutput
#        - name
#        - inputSchema
#        - outputSchema
#        - title
#      properties:
#        description:
#          description: The description what the action does.
#          type: "string"
#        hasDynamicOutput:
#          description: A boolean which indicates that the structure of the output depends on the input.
#          type: "boolean"
#        inputSchema:
#          description: "The list of action properties."
#          type: "array"
#          items:
#            $ref: "#/components/schemas/Property"
#        outputSchema:
#          $ref: "#/components/schemas/Property"
#        name:
#          description: The programmatic name of the action to be used as input for Call component.
#          type: "string"
#        title:
#          description: The full title of the action.
#          type: "string"
#    Component:
#      type: "object"
#      required:
#        - description
#        - name
#        - title
#        - version
#      properties:
#        description:
#          description: The component description
#          type: "string"
#        name:
#          description: The programmatic name of the component
#          type: "string"
#        title:
#          description: The title of the component
#          type: "string"
#        version:
#          description: The version of the component
#          type: "integer"
#    AnyValue:
#      description: "Can be anything: string, number, array, object, etc. (except `null`)"
#    ArrayProperty:
#      description: "An array property type."
#      type: "object"
#      allOf:
#        - $ref: "#/components/schemas/ValueProperty"
#        - type: "object"
#          properties:
#            defaultValue:
#              description: "The property default value."
#              type: "array"
#              items:
#                type: "object"
#            items:
#              description: "Types of the array items."
#              type: "array"
#              items:
#                $ref: "#/components/schemas/Property"
#            maxItems:
#              type: "integer"
#              format: "int64"
#            minItems:
#              type: "integer"
#              format: "int64"
#            multipleValues:
#              description: "If the array can contain multiple items."
#              type: "boolean"
#              default: true
#            options:
#              description: "The list of valid property options."
#              type: "array"
#              items:
#                $ref: "#/components/schemas/Option"
#    BooleanProperty:
#      description: "A boolean property type."
#      type: "object"
#      allOf:
#        - $ref: "#/components/schemas/ValueProperty"
#        - type: "object"
#          properties:
#            defaultValue:
#              description: "The property default value."
#              type: "boolean"
#            options:
#              description: "The list of valid property options."
#              type: "array"
#              items:
#                $ref: "#/components/schemas/Option"
#    ControlType:
#      description: "A type of the control to show in UI."
#      type: "string"
#      enum:
#        - "ARRAY_BUILDER"
#        - "DATE"
#        - "DATE_TIME"
#        - "EMAIL"
#        - "INTEGER"
#        - "FILE_ENTRY"
#        - "OBJECT_BUILDER"
#        - "MULTI_SELECT"
#        - "NUMBER"
#        - "PASSWORD"
#        - "PHONE"
#        - "SELECT"
#        - "TEXT"
#        - "TEXT_AREA"
#        - "TIME"
#        - "URL"
#    DateProperty:
#      description: "A date property type."
#      type: "object"
#      allOf:
#        - $ref: "#/components/schemas/ValueProperty"
#        - type: "object"
#          properties:
#            defaultValue:
#              description: "The property default value."
#              type: "string"
#              format: "date"
#            options:
#              description: "The list of valid property options."
#              type: "array"
#              items:
#                $ref: "#/components/schemas/Option"
#    DateTimeProperty:
#      description: "A date-time property type."
#      type: "object"
#      allOf:
#        - $ref: "#/components/schemas/ValueProperty"
#        - type: "object"
#          properties:
#            defaultValue:
#              description: "The property default value."
#              type: "string"
#              format: "date-time"
#            options:
#              description: "The list of valid property options."
#              type: "array"
#              items:
#                $ref: "#/components/schemas/Option"
    Environment:
      $ref: "../../../../../libs/platform/platform-rest/openapi/components/schemas/objects/environment.yaml"
    Errors:
      type: array
      items:
        type: object
        properties:
          id:
            type: string
            description: A unique identifier for the instance of the error. Provide this to support when contacting ByteChef.
            example: 9366efb4-8fb1-4a28-bfb0-8d6f9cc6b5c5
          detail:
            type: string
            description: A detailed description of the error.
          #      example: 'Property values were not valid: [{"isValid":false,"message":"Property "__about_us" does not exist","error":"PROPERTY_DOESNT_EXIST","name":"__about_us","localizedErrorMessage":"Property "__about_us" does not exist"}]'
          problem_type:
            type: string
            description: The ByteChef error code associated with the error.
            example: MISSING_REQUIRED_FIELD
            deprecated: true
          title:
            type: string
            description: A brief description of the error. The schema and type of message will vary by Provider.
            example: |
              Property values were not valid
          code:
            type: string
            description: The ByteChef error code associated with the error.
            example: MISSING_REQUIRED_FIELD
          status:
            type: string
            description: The HTTP status code associated with the error.
            example: '400'
          meta:
            type: object
            description: Additional metadata about the error.
            properties:
              cause:
                type: object
                description: The cause of the error. Usually the underlying error from the remote Provider.
              origin:
                type: string
                enum: [ remote-provider, bytechef ]
                description: The origin of the error.
                example: remote-provider
              application_name:
                type: string
                description: The name of the application that generated the error.
                example: MyCompany Production
            required:
              - origin
            additionalProperties: true
        required:
          - id
          - detail
          - problem_type
          - title
          - code
          - status
          - meta

    #    FileEntryProperty:
#      description: "An file entry property type."
#      type: "object"
#      allOf:
#        - $ref: "#/components/schemas/ValueProperty"
#        - type: "object"
#          properties:
#            properties:
#              description: "The list of valid file entry property types."
#              type: "array"
#              items:
#                $ref: "#/components/schemas/Property"
#    DynamicPropertiesProperty:
#      description: "A dynamic properties property type."
#      type: "object"
#      allOf:
#        - $ref: "#/components/schemas/Property"
#        - type: "object"
#          properties:
#            header:
#              description: "The dynamic property header."
#              type: "string"
    Function:
      description: "A function property type."
      type: "object"
      required:
        - name
        - description
        - parameters
      properties:
        name:
          description: "The function name."
          type: "string"
        description:
          description: "The function description."
          type: "string"
#        parameters:
#          $ref: "#/components/schemas/Parameters"
        parameters:
          description: "JSON Schema for the function parameters."
          type: string
    #    IntegerProperty:
#      description: "An integer property type."
#      type: "object"
#      allOf:
#        - $ref: "#/components/schemas/ValueProperty"
#        - type: "object"
#          properties:
#            defaultValue:
#              description: "The property default value."
#              type: "integer"
#              format: "int64"
#            maxValue:
#              description: "The maximum property value."
#              type: "integer"
#              format: "int64"
#            minValue:
#              description: "The minimum property value."
#              type: "integer"
#              format: "int64"
#            options:
#              description: "The list of valid property options."
#              type: "array"
#              items:
#                $ref: "#/components/schemas/Option"
#    #            optionsDataSource:
#    #              $ref: "#/components/schemas/OptionsDataSource"
#    NullProperty:
#      description: "A null property type."
#      type: "object"
#      allOf:
#        - $ref: "#/components/schemas/ValueProperty"
#    NumberProperty:
#      description: "A number property type."
#      type: "object"
#      allOf:
#        - $ref: "#/components/schemas/ValueProperty"
#        - type: "object"
#          properties:
#            defaultValue:
#              description: "The property default value."
#              type: "number"
#              format: "double"
#            maxNumberPrecision:
#              description: "The number value precision."
#              type: "integer"
#              format: "int32"
#            maxValue:
#              description: "The maximum property value."
#              type: "number"
#              format: "double"
#            minNumberPrecision:
#              description: "The number value precision."
#              type: "integer"
#              format: "int32"
#            minValue:
#              description: "The minimum property value."
#              type: "number"
#              format: "double"
#            numberPrecision:
#              description: "The number value precision."
#              type: "integer"
#              format: "int32"
#            options:
#              description: "The list of valid property options."
#              type: "array"
#              items:
#                $ref: "#/components/schemas/Option"
#    Option:
#      description: "Defines valid property value."
#      type: "object"
#      properties:
#        description:
#          description: "Description of the option."
#          type: "string"
#        label:
#          description: "The label of an option."
#          type: "string"
#        value:
#          $ref: "#/components/schemas/AnyValue"
#    Property:
#      description: "A base property."
#      type: "object"
#      required:
#        - "propertyType"
#      properties:
#        advancedOption:
#          description: "If the property should be grouped under advanced options."
#          type: "boolean"
#        description:
#          description: "The property description."
#          type: "string"
#        displayCondition:
#          description: "Defines rules when a property should be shown or hidden."
#          type: "string"
#        optionsLookup:
#          type: "object"
#          properties:
#            input:
#              description: The input parameters for the action.
#              type: object
#              additionalProperties: true
#        name:
#          description: "The property name."
#          type: "string"
#        required:
#          description: "If the property is required or not."
#          type: "boolean"
#        type:
#          $ref: "#/components/schemas/PropertyType"
#      discriminator:
#        propertyName: "type"
#        mapping:
#          ARRAY: "#/components/schemas/ArrayProperty"
#          BOOLEAN: "#/components/schemas/BooleanProperty"
#          DATE: "#/components/schemas/DateProperty"
#          DATE_TIME: "#/components/schemas/DateTimeProperty"
#          DYNAMIC_PROPERTIES: "#/components/schemas/DynamicPropertiesProperty"
#          FILE_ENTRY: "#/components/schemas/FileEntryProperty"
#          INTEGER: "#/components/schemas/IntegerProperty"
#          "NULL": "#/components/schemas/NullProperty"
#          NUMBER: "#/components/schemas/NumberProperty"
#          OBJECT: "#/components/schemas/ObjectProperty"
#          STRING: "#/components/schemas/StringProperty"
#          TASK: "#/components/schemas/TaskProperty"
#          TIME: "#/components/schemas/TimeProperty"
#    PropertyType:
#      description: "A type of property."
#      type: "string"
#      enum:
#        - "ARRAY"
#        - "BOOLEAN"
#        - "DATE"
#        - "DATE_TIME"
#        - "DYNAMIC_PROPERTIES"
#        - "FILE_ENTRY"
#        - "INTEGER"
#        - "NULL"
#        - "NUMBER"
#        - "STRING"
#        - "OBJECT"
#        - "TASK"
#        - "TIME"
#    StringProperty:
#      description: "A string property."
#      type: "object"
#      allOf:
#        - $ref: "#/components/schemas/ValueProperty"
#        - type: "object"
#          properties:
#            defaultValue:
#              description: "The property default value."
#              type: "string"
#            maxLength:
#              description: "The maximum string length."
#              type: "integer"
#              format: "int32"
#            minLength:
#              description: "The minimum string length."
#              type: "integer"
#              format: "int32"
#            options:
#              description: "The list of valid property options."
#              type: "array"
#              items:
#                $ref: "#/components/schemas/Option"
#    TimeProperty:
#      description: "A time property."
#      type: "object"
#      allOf:
#        - $ref: "#/components/schemas/ValueProperty"
#        - type: "object"
#          properties:
#            defaultValue:
#              description: "The property default value."
#              type: "string"
#              format: "time"
#            options:
#              description: "The list of valid property options."
#              type: "array"
#              items:
#                $ref: "#/components/schemas/Option"
#    Parameters:
#      type: object
#      required:
#        - $schema
#        - additionalProperties
#        - required
#        - properties
#        - type
#      properties:
#        $schema:
#          type: string
#          default: "<http://json-schema.org/draft-07/schema#>"
#        additionalProperties:
#          type: boolean
#          default: false
#        properties:
#          description: The parameter properties.
#          type: object
#          additionalProperties:
#            $ref: "#/components/schemas/Property"
#        required:
#          type: array
#          items:
#            type: string
#        type:
#          description: The type of the parameters
#          type: "string"
#          default: "object"
#    Property:
#      type: object
#      description: A property type.
#      properties:
#        description:
#          description: The property description
#          type: "string"
#        type:
#          description: The type of the property
#          type: "string"
#          default: "object"
    Tool:
      type: "object"
      required:
        - function
        - type
      properties:
        function:
          $ref: "#/components/schemas/Function"
        type:
          description: The type of the tool
          type: "string"
          default: "function"
#    Trigger:
#      type: "object"
#      required:
#        - description
#        - hasDynamicOutput
#        - name
#        - inputSchema
#        - outputSchema
#        - title
#      properties:
#        componentName:
#          description: The programmatic name of the component which contains the trigger.
#          type: "string"
#        componentVersion:
#          description: The version of the component.
#          type: "integer"
#        description:
#          description: The description what the trigger does.
#          type: "string"
#        hasDynamicOutput:
#          description: A boolean which indicates that the structure of the output depends on the input.
#          type: "boolean"
#        inputSchema:
#          description: "The list of trigger properties."
#          type: "array"
#          items:
#            $ref: "#/components/schemas/Property"
#        outputSchema:
#          $ref: "#/components/schemas/Property"
#        name:
#          description: The programmatic name of the trigger to be used as input when creating the trigger subscription .
#          type: "string"
#        title:
#          description: The full title of the trigger.
#          type: "string"
#    TriggerBasic:
#      description: Reference to link the trigger
#      type: "object"
#      properties:
#        componentName:
#          description: The programmatic name of the component which contains the trigger.
#          type: "string"
#        componentVersion:
#          description: The version of the component.
#          type: "integer"
#        name:
#          description: The programmatic name of the trigger.
#          type: "string"
#    TriggerSubscription:
#      type: "object"
#      required:
#        - endpoint
#        - id
#        - name
#        - state
#        - trigger
#      properties:
#        endpoint:
#          description: "The URL where ByteChef post events."
#          type: "string"
#        error:
#          $ref: "#/components/schemas/TriggerSubscriptionError"
#        externalId:
#          description: The unique id of the subscription on your end.
#          type: "string"
#        id:
#          description: The unique id of the subscription.
#          type: "string"
#        name:
#          description: The name of the subscription e.g. Mailchimp subscription
#          type: "string"
#        state:
#          description: Indicated current state of the Subscription.
#          type: "string"
#          enum:
#            - CREATING
#            - CREATING_FAILED
#            - DELETED
#            - ACTIVE
#        trigger:
#          $ref: "#/components/schemas/TriggerBasic"
#    TriggerSubscriptionError:
#      description: Details about error if any in creating the subscription
#      type: "object"
#      required:
#        - code
#        - message
#      properties:
#        code:
#          type: "string"
#          enum:
#            - USER_INPUT_ERROR
#            - API_ERROR
#            - TIMEOUT_ERROR
#            - OAUTH_REFRESH
#            - NO_TRIGGER
#            - INTERNAL_ERROR
#        message:
#          type: string
#    ValueProperty:
#      description: "A base property for all value based properties."
#      type: "object"
#      allOf:
#        - $ref: "#/components/schemas/Property"
#        - type: "object"
#          required:
#            - "controlType"
#          properties:
#            controlType:
#              $ref: "#/components/schemas/ControlType"
#            label:
#              description: "The property label."
#              type: "string"
#            placeholder:
#              description: "The property placeholder."
#              type: "string"
