---
# Conditionally disable springdoc on missing api-docs profile
spring:
  config:
    activate:
      on-profile: '!api-docs'
springdoc:
  api-docs:
    enabled: false
---

info:
  ai:
    enabled: ${bytechef.ai.enabled:false}
  analytics:
    enabled: ${bytechef.analytics.enabled:false}
    postHog:
      apiKey: ${bytechef.analytics.postHog.apiKey:}
      host: ${bytechef.analytics.postHog.host:}
  application:
    edition: ${bytechef.edition:}
  featureFlags: ${bytechef.featureFlags}
  helpHub:
    enabled: ${bytechef.helpHub.enabled:false}
    commandBar:
      orgId: ${bytechef.helpHub.commandBar.orgId:}
  signUp:
    activationRequired: ${bytechef.signUp.activationRequired:false}
    enabled: ${bytechef.signUp.enabled}

management:
  endpoints:
    web:
      exposure:
        include: '*'
  endpoint:
    health:
      show-details: when_authorized
      roles: 'ROLE_ADMIN'
      probes:
        enabled: true
      group:
        liveness:
          include: livenessState
        readiness:
          include: readinessState
  info:
    git:
      mode: full
    env:
      enabled: true
  metrics:
    enable:
      http: true
      jvm: true
      logback: true
      process: true
      system: true
    distribution:
      percentiles-histogram:
        all: true
      percentiles:
        all: 0, 0.5, 0.75, 0.95, 0.99, 1.0
    tags:
      application: ${spring.application.name}
  observations:
    key-values:
      application: ${spring.application.name}
  # Prometheus is the default metrics backend
  prometheus:
    metrics:
      export:
        enabled: true
        step: 60
  tracing:
    sampling:
      probability: 1.0
  zipkin:
    tracing:
      endpoint: ${bytechef.tracing.zipkin.endpoint}
      encoding: PROTO3

openapi:
  openAPIDefinition:
    base-path:
      automation: /api/automation
      embedded: /api/embedded
      platform: /api/platform

spring:
  cloud:
    redis:
      discovery:
        instanceId: ${spring.application.name}:${random.value}
  h2:
    console:
      enabled: false
  jmx:
    enabled: false
  output:
    ansi:
      console-available: true
    group:
      dev:
        - dev
        - api-docs
  rabbitmq:
    listener:
      direct:
        prefetch: 1
  task:
    execution:
      pool:
        core-size: 2
        max-size: 50
        queue-capacity: 10000
  threads:
    virtual:
      enabled: true

#####

bytechef:
  ai:
    openai:
      chat:
        options:
          model: gpt-4o
  cache:
    # Cache provider (redis) default: redis
    provider: redis
  coordinator:
    trigger:
      scheduler:
        # Trigger scheduler provider (aws(ee) | quartz) default: quartz
        provider: quartz
  data-storage:
    # Data storage provider (aws(ee) | filesystem | jdbc) default: jdbc
    provider: jdbc
  # Edition (CE - Community Edition | EE - Enterprise Edition) default: EE
  edition: EE
  # Encryption key provider (filesystem - the key generated on filesystem, property - the key read from property) default: filesystem
  encryption:
    provider: filesystem
  file-storage:
    # File storage provider (aws(ee) | filesystem | jdbc) default: filesystem
    provider: filesystem
    filesystem:
      basedir: ${user.home}/bytechef/data/file-storage
  mail:
    base-url: ${bytechef.public-url}
    from: noreply@app.bytechef.io
  message-broker:
    # Messaging provider between Coordinator and Workers (amqp | jms | kafka | redis) default: redis
    provider: redis
  oauth2:
    #    predefinedApps:
    #      mailchimp:
    #        clientId: 123456789
    #        clientSecret: 123456789
    redirect-uri: ${bytechef.public-url}/callback
  public-url: http://127.0.0.1:5173
  resources:
    web: file:///opt/bytechef/client/
  security:
    content-security-policy: "default-src 'self'; frame-src 'self' data:; script-src 'self' 'unsafe-inline' 'unsafe-eval' https://cdn.jsdelivr.net https://storage.googleapis.com; style-src 'self' 'unsafe-inline' https://cdn.jsdelivr.net; img-src 'self' data:; font-src 'self' data:; script-src: https://*.command.ai; frame-src: https://*.command.ai; img-src: https://*.command.ai; media-src: https://*.command.ai; connect-src: https://*.command.ai; style-src: https://*.command.ai;"
  sign-up:
    temp-domain-list-url: #https://gist.githubusercontent.com/SimonHoiberg/f5a23b1fa3762330c8af1e9090918b63/raw/53963d0dbdd93c594fbc067cee95966156ee066b/temp-email-list.txt
  # Tenant support mode (single | multi - ee only) default: single
  tenant:
    mode: single
  tracing:
    zipkin:
      endpoint: http://localhost:4318/v1/traces
  webhook-url: http://127.0.0.1:7888/webhooks/{id}
  # When the worker is enabled, subscribe to the default "default" queue with 10 concurrent consumers.
  # You may also route workflow tasks to other arbitrarily named task queues by specifying the "node"
  # property on any given task.
  # E.g. node: captions will route to the captions queue which a worker would subscribe to with workflow.worker.subscriptions.captions.
  # Note: queue must be created before tasks can be routed to it. ByteChef will create the queue if it isn't already there when the worker
  # bootstraps.
  worker:
    task:
      subscriptions:
        default: 10
  workflow:
    output-storage:
      # Output storage provider for workflow output data (aws(ee) | filesystem | jdbc) default: jdbc
      provider: jdbc
    repository:
      jdbc:
        enabled: true
  loki:
    appender:
      level: "OFF"
      http:
        url: http://localhost:3100/loki/api/v1/push
