/* tslint:disable */
/* eslint-disable */
/**
 * The Automation Configuration Internal API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ProjectGitConfiguration,
} from '../models/index';
import {
    ProjectGitConfigurationFromJSON,
    ProjectGitConfigurationToJSON,
} from '../models/index';

export interface GetProjectGitConfigurationRequest {
    id: number;
}

export interface GetProjectRemoteBranchesRequest {
    id: number;
}

export interface GetWorkspaceProjectGitConfigurationsRequest {
    id: number;
}

export interface PullProjectFromGitRequest {
    id: number;
}

export interface UpdateProjectGitConfigurationRequest {
    id: number;
    projectGitConfiguration: Omit<ProjectGitConfiguration, 'projectId'|'createdBy'|'createdDate'|'lastModifiedBy'|'lastModifiedDate'>;
}

/**
 * 
 */
export class ProjectGitApi extends runtime.BaseAPI {

    /**
     * Get git configuration of a project.
     * Get git configuration of a project .
     */
    async getProjectGitConfigurationRaw(requestParameters: GetProjectGitConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProjectGitConfiguration>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getProjectGitConfiguration().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/projects/{id}/project-git-configuration`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProjectGitConfigurationFromJSON(jsonValue));
    }

    /**
     * Get git configuration of a project.
     * Get git configuration of a project .
     */
    async getProjectGitConfiguration(requestParameters: GetProjectGitConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProjectGitConfiguration> {
        const response = await this.getProjectGitConfigurationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get remote branches of a project git repository.
     * Get remote branches of a project git repository.
     */
    async getProjectRemoteBranchesRaw(requestParameters: GetProjectRemoteBranchesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<string>>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getProjectRemoteBranches().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/projects/{id}/git/remote-branches`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Get remote branches of a project git repository.
     * Get remote branches of a project git repository.
     */
    async getProjectRemoteBranches(requestParameters: GetProjectRemoteBranchesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<string>> {
        const response = await this.getProjectRemoteBranchesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get project git configurations of a workspace.
     * Get project git configurations of a workspace.
     */
    async getWorkspaceProjectGitConfigurationsRaw(requestParameters: GetWorkspaceProjectGitConfigurationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ProjectGitConfiguration>>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getWorkspaceProjectGitConfigurations().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/workspaces/{id}/project-git-configurations`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ProjectGitConfigurationFromJSON));
    }

    /**
     * Get project git configurations of a workspace.
     * Get project git configurations of a workspace.
     */
    async getWorkspaceProjectGitConfigurations(requestParameters: GetWorkspaceProjectGitConfigurationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ProjectGitConfiguration>> {
        const response = await this.getWorkspaceProjectGitConfigurationsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Pulls project from git repository.
     * Pulls project from git repository.
     */
    async pullProjectFromGitRaw(requestParameters: PullProjectFromGitRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling pullProjectFromGit().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/projects/{id}/git/pull`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Pulls project from git repository.
     * Pulls project from git repository.
     */
    async pullProjectFromGit(requestParameters: PullProjectFromGitRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.pullProjectFromGitRaw(requestParameters, initOverrides);
    }

    /**
     * Update git configuration of an existing project.
     * Update git configuration of an existing project.
     */
    async updateProjectGitConfigurationRaw(requestParameters: UpdateProjectGitConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling updateProjectGitConfiguration().'
            );
        }

        if (requestParameters['projectGitConfiguration'] == null) {
            throw new runtime.RequiredError(
                'projectGitConfiguration',
                'Required parameter "projectGitConfiguration" was null or undefined when calling updateProjectGitConfiguration().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/projects/{id}/project-git-configuration`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ProjectGitConfigurationToJSON(requestParameters['projectGitConfiguration']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Update git configuration of an existing project.
     * Update git configuration of an existing project.
     */
    async updateProjectGitConfiguration(requestParameters: UpdateProjectGitConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.updateProjectGitConfigurationRaw(requestParameters, initOverrides);
    }

}
