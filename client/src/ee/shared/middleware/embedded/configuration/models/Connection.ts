/* tslint:disable */
/* eslint-disable */
/**
 * The Embedded Configuration Internal API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { CredentialStatus } from './CredentialStatus';
import {
    CredentialStatusFromJSON,
    CredentialStatusFromJSONTyped,
    CredentialStatusToJSON,
    CredentialStatusToJSONTyped,
} from './CredentialStatus';
import type { Tag } from './Tag';
import {
    TagFromJSON,
    TagFromJSONTyped,
    TagToJSON,
    TagToJSONTyped,
} from './Tag';
import type { AuthorizationType } from './AuthorizationType';
import {
    AuthorizationTypeFromJSON,
    AuthorizationTypeFromJSONTyped,
    AuthorizationTypeToJSON,
    AuthorizationTypeToJSONTyped,
} from './AuthorizationType';

/**
 * Contains all required information to open a connection to a service defined by componentName parameter.
 * @export
 * @interface Connection
 */
export interface Connection {
    /**
     * If a connection is used in any of active workflows.
     * @type {boolean}
     * @memberof Connection
     */
    readonly active?: boolean;
    /**
     * 
     * @type {AuthorizationType}
     * @memberof Connection
     */
    authorizationType?: AuthorizationType;
    /**
     * The authorization parameters of a connection.
     * @type {{ [key: string]: any; }}
     * @memberof Connection
     */
    readonly authorizationParameters?: { [key: string]: any; };
    /**
     * The base URI of a connection.
     * @type {string}
     * @memberof Connection
     */
    baseUri?: string;
    /**
     * The name of a component that uses this connection.
     * @type {string}
     * @memberof Connection
     */
    componentName: string;
    /**
     * The connection parameters of a connection.
     * @type {{ [key: string]: any; }}
     * @memberof Connection
     */
    readonly connectionParameters?: { [key: string]: any; };
    /**
     * The version of a component that uses this connection.
     * @type {number}
     * @memberof Connection
     */
    connectionVersion: number;
    /**
     * The created by.
     * @type {string}
     * @memberof Connection
     */
    readonly createdBy?: string;
    /**
     * The created date.
     * @type {Date}
     * @memberof Connection
     */
    readonly createdDate?: Date;
    /**
     * 
     * @type {CredentialStatus}
     * @memberof Connection
     */
    credentialStatus?: CredentialStatus;
    /**
     * The id of an environment.
     * @type {number}
     * @memberof Connection
     */
    environmentId?: number;
    /**
     * The id of a connection.
     * @type {number}
     * @memberof Connection
     */
    readonly id?: number;
    /**
     * The last modified by.
     * @type {string}
     * @memberof Connection
     */
    readonly lastModifiedBy?: string;
    /**
     * The last modified date.
     * @type {Date}
     * @memberof Connection
     */
    readonly lastModifiedDate?: Date;
    /**
     * The name of a connection.
     * @type {string}
     * @memberof Connection
     */
    name: string;
    /**
     * The parameters of a connection.
     * @type {{ [key: string]: any; }}
     * @memberof Connection
     */
    parameters: { [key: string]: any; };
    /**
     * 
     * @type {Array<Tag>}
     * @memberof Connection
     */
    tags?: Array<Tag>;
    /**
     * 
     * @type {number}
     * @memberof Connection
     */
    version?: number;
}



/**
 * Check if a given object implements the Connection interface.
 */
export function instanceOfConnection(value: object): value is Connection {
    if (!('componentName' in value) || value['componentName'] === undefined) return false;
    if (!('connectionVersion' in value) || value['connectionVersion'] === undefined) return false;
    if (!('name' in value) || value['name'] === undefined) return false;
    if (!('parameters' in value) || value['parameters'] === undefined) return false;
    return true;
}

export function ConnectionFromJSON(json: any): Connection {
    return ConnectionFromJSONTyped(json, false);
}

export function ConnectionFromJSONTyped(json: any, ignoreDiscriminator: boolean): Connection {
    if (json == null) {
        return json;
    }
    return {
        
        'active': json['active'] == null ? undefined : json['active'],
        'authorizationType': json['authorizationType'] == null ? undefined : AuthorizationTypeFromJSON(json['authorizationType']),
        'authorizationParameters': json['authorizationParameters'] == null ? undefined : json['authorizationParameters'],
        'baseUri': json['baseUri'] == null ? undefined : json['baseUri'],
        'componentName': json['componentName'],
        'connectionParameters': json['connectionParameters'] == null ? undefined : json['connectionParameters'],
        'connectionVersion': json['connectionVersion'],
        'createdBy': json['createdBy'] == null ? undefined : json['createdBy'],
        'createdDate': json['createdDate'] == null ? undefined : (new Date(json['createdDate'])),
        'credentialStatus': json['credentialStatus'] == null ? undefined : CredentialStatusFromJSON(json['credentialStatus']),
        'environmentId': json['environmentId'] == null ? undefined : json['environmentId'],
        'id': json['id'] == null ? undefined : json['id'],
        'lastModifiedBy': json['lastModifiedBy'] == null ? undefined : json['lastModifiedBy'],
        'lastModifiedDate': json['lastModifiedDate'] == null ? undefined : (new Date(json['lastModifiedDate'])),
        'name': json['name'],
        'parameters': json['parameters'],
        'tags': json['tags'] == null ? undefined : ((json['tags'] as Array<any>).map(TagFromJSON)),
        'version': json['__version'] == null ? undefined : json['__version'],
    };
}

export function ConnectionToJSON(json: any): Connection {
    return ConnectionToJSONTyped(json, false);
}

export function ConnectionToJSONTyped(value?: Omit<Connection, 'active'|'authorizationParameters'|'connectionParameters'|'createdBy'|'createdDate'|'id'|'lastModifiedBy'|'lastModifiedDate'> | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'authorizationType': AuthorizationTypeToJSON(value['authorizationType']),
        'baseUri': value['baseUri'],
        'componentName': value['componentName'],
        'connectionVersion': value['connectionVersion'],
        'credentialStatus': CredentialStatusToJSON(value['credentialStatus']),
        'environmentId': value['environmentId'],
        'name': value['name'],
        'parameters': value['parameters'],
        'tags': value['tags'] == null ? undefined : ((value['tags'] as Array<any>).map(TagToJSON)),
        '__version': value['version'],
    };
}

