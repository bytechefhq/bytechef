/* tslint:disable */
/* eslint-disable */
/**
 * The Embedded Configuration Internal API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AppEvent,
} from '../models/index';
import {
    AppEventFromJSON,
    AppEventToJSON,
} from '../models/index';

export interface CreateAppEventRequest {
    appEvent: Omit<AppEvent, 'createdBy'|'createdDate'|'lastModifiedBy'|'lastModifiedDate'>;
}

export interface DeleteAppEventRequest {
    id: number;
}

export interface GetAppEventRequest {
    id: number;
}

export interface UpdateAppEventRequest {
    id: number;
    appEvent: Omit<AppEvent, 'createdBy'|'createdDate'|'lastModifiedBy'|'lastModifiedDate'>;
}

/**
 * 
 */
export class AppEventApi extends runtime.BaseAPI {

    /**
     * Create a new app event.
     * Create a new app event
     */
    async createAppEventRaw(requestParameters: CreateAppEventRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<number>> {
        if (requestParameters['appEvent'] == null) {
            throw new runtime.RequiredError(
                'appEvent',
                'Required parameter "appEvent" was null or undefined when calling createAppEvent().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/app-events`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AppEventToJSON(requestParameters['appEvent']),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<number>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Create a new app event.
     * Create a new app event
     */
    async createAppEvent(requestParameters: CreateAppEventRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<number> {
        const response = await this.createAppEventRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete an app event.
     * Delete an app event
     */
    async deleteAppEventRaw(requestParameters: DeleteAppEventRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deleteAppEvent().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/app-events/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete an app event.
     * Delete an app event
     */
    async deleteAppEvent(requestParameters: DeleteAppEventRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteAppEventRaw(requestParameters, initOverrides);
    }

    /**
     * Get an app event by id.
     * Get an app event by id
     */
    async getAppEventRaw(requestParameters: GetAppEventRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AppEvent>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getAppEvent().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/app-events/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AppEventFromJSON(jsonValue));
    }

    /**
     * Get an app event by id.
     * Get an app event by id
     */
    async getAppEvent(requestParameters: GetAppEventRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AppEvent> {
        const response = await this.getAppEventRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get app events.
     * Get app events
     */
    async getAppEventsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<AppEvent>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/app-events`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(AppEventFromJSON));
    }

    /**
     * Get app events.
     * Get app events
     */
    async getAppEvents(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<AppEvent>> {
        const response = await this.getAppEventsRaw(initOverrides);
        return await response.value();
    }

    /**
     * Update an existing app event.
     * Update an existing app event
     */
    async updateAppEventRaw(requestParameters: UpdateAppEventRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling updateAppEvent().'
            );
        }

        if (requestParameters['appEvent'] == null) {
            throw new runtime.RequiredError(
                'appEvent',
                'Required parameter "appEvent" was null or undefined when calling updateAppEvent().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/app-events/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: AppEventToJSON(requestParameters['appEvent']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Update an existing app event.
     * Update an existing app event
     */
    async updateAppEvent(requestParameters: UpdateAppEventRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.updateAppEventRaw(requestParameters, initOverrides);
    }

}
