/* tslint:disable */
/* eslint-disable */
/**
 * The Embedded Configuration Internal API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ConnectedUserProjectWorkflow,
  Environment,
  PublishConnectedUserProjectWorkflowRequest,
} from '../models/index';
import {
    ConnectedUserProjectWorkflowFromJSON,
    ConnectedUserProjectWorkflowToJSON,
    EnvironmentFromJSON,
    EnvironmentToJSON,
    PublishConnectedUserProjectWorkflowRequestFromJSON,
    PublishConnectedUserProjectWorkflowRequestToJSON,
} from '../models/index';

export interface EnableConnectedUserProjectWorkflowRequest {
    workflowReferenceCode: string;
    enable: boolean;
    xEnvironment?: Environment;
}

export interface GetConnectedUserProjectWorkflowRequest {
    workflowReferenceCode: string;
    xEnvironment?: Environment;
}

export interface PublishConnectedUserProjectWorkflowOperationRequest {
    workflowReferenceCode: string;
    xEnvironment?: Environment;
    publishConnectedUserProjectWorkflowRequest?: PublishConnectedUserProjectWorkflowRequest;
}

/**
 * 
 */
export class ConnectedUserProjectWorkflowApi extends runtime.BaseAPI {

    /**
     * Enable/disable a connected user project workflow.
     * Enable/disable a connected user project workflow
     */
    async enableConnectedUserProjectWorkflowRaw(requestParameters: EnableConnectedUserProjectWorkflowRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['workflowReferenceCode'] == null) {
            throw new runtime.RequiredError(
                'workflowReferenceCode',
                'Required parameter "workflowReferenceCode" was null or undefined when calling enableConnectedUserProjectWorkflow().'
            );
        }

        if (requestParameters['enable'] == null) {
            throw new runtime.RequiredError(
                'enable',
                'Required parameter "enable" was null or undefined when calling enableConnectedUserProjectWorkflow().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['xEnvironment'] != null) {
            headerParameters['X-Environment'] = String(requestParameters['xEnvironment']);
        }


        let urlPath = `/connected-user-project-workflows/{workflowReferenceCode}/enable/{enable}`;
        urlPath = urlPath.replace(`{${"workflowReferenceCode"}}`, encodeURIComponent(String(requestParameters['workflowReferenceCode'])));
        urlPath = urlPath.replace(`{${"enable"}}`, encodeURIComponent(String(requestParameters['enable'])));

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Enable/disable a connected user project workflow.
     * Enable/disable a connected user project workflow
     */
    async enableConnectedUserProjectWorkflow(requestParameters: EnableConnectedUserProjectWorkflowRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.enableConnectedUserProjectWorkflowRaw(requestParameters, initOverrides);
    }

    /**
     * Get connected user project workflow.
     * Get connected user project workflow.
     */
    async getConnectedUserProjectWorkflowRaw(requestParameters: GetConnectedUserProjectWorkflowRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ConnectedUserProjectWorkflow>> {
        if (requestParameters['workflowReferenceCode'] == null) {
            throw new runtime.RequiredError(
                'workflowReferenceCode',
                'Required parameter "workflowReferenceCode" was null or undefined when calling getConnectedUserProjectWorkflow().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['xEnvironment'] != null) {
            headerParameters['X-Environment'] = String(requestParameters['xEnvironment']);
        }


        let urlPath = `/connected-user-project-workflows/{workflowReferenceCode}`;
        urlPath = urlPath.replace(`{${"workflowReferenceCode"}}`, encodeURIComponent(String(requestParameters['workflowReferenceCode'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ConnectedUserProjectWorkflowFromJSON(jsonValue));
    }

    /**
     * Get connected user project workflow.
     * Get connected user project workflow.
     */
    async getConnectedUserProjectWorkflow(requestParameters: GetConnectedUserProjectWorkflowRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ConnectedUserProjectWorkflow> {
        const response = await this.getConnectedUserProjectWorkflowRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Publishes existing connected user project workflow.
     * Publishes existing connected user project workflow
     */
    async publishConnectedUserProjectWorkflowRaw(requestParameters: PublishConnectedUserProjectWorkflowOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['workflowReferenceCode'] == null) {
            throw new runtime.RequiredError(
                'workflowReferenceCode',
                'Required parameter "workflowReferenceCode" was null or undefined when calling publishConnectedUserProjectWorkflow().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['xEnvironment'] != null) {
            headerParameters['X-Environment'] = String(requestParameters['xEnvironment']);
        }


        let urlPath = `/connected-user-project-workflows/{workflowReferenceCode}/publish`;
        urlPath = urlPath.replace(`{${"workflowReferenceCode"}}`, encodeURIComponent(String(requestParameters['workflowReferenceCode'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PublishConnectedUserProjectWorkflowRequestToJSON(requestParameters['publishConnectedUserProjectWorkflowRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Publishes existing connected user project workflow.
     * Publishes existing connected user project workflow
     */
    async publishConnectedUserProjectWorkflow(requestParameters: PublishConnectedUserProjectWorkflowOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.publishConnectedUserProjectWorkflowRaw(requestParameters, initOverrides);
    }

}
