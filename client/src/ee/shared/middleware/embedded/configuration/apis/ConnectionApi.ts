/* tslint:disable */
/* eslint-disable */
/**
 * The Embedded Configuration Internal API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Connection,
  UpdateConnectionRequest,
} from '../models/index';
import {
    ConnectionFromJSON,
    ConnectionToJSON,
    UpdateConnectionRequestFromJSON,
    UpdateConnectionRequestToJSON,
} from '../models/index';

export interface CreateConnectedUserProjectWorkflowConnectionRequest {
    connectedUserId: number;
    workflowUuid: string;
    connection: Omit<Connection, 'active'|'authorizationParameters'|'connectionParameters'|'createdBy'|'createdDate'|'id'|'lastModifiedBy'|'lastModifiedDate'>;
}

export interface CreateConnectionRequest {
    connection: Omit<Connection, 'active'|'authorizationParameters'|'connectionParameters'|'createdBy'|'createdDate'|'id'|'lastModifiedBy'|'lastModifiedDate'>;
}

export interface DeleteConnectionRequest {
    id: number;
}

export interface GetConnectedUserConnectionsRequest {
    connectedUserId: number;
    componentName: string;
    connectionIds?: Array<number>;
}

export interface GetConnectionRequest {
    id: number;
}

export interface GetConnectionsRequest {
    componentName?: string;
    connectionVersion?: number;
    environmentId?: number;
    tagId?: number;
}

export interface UpdateConnectionOperationRequest {
    id: number;
    updateConnectionRequest: UpdateConnectionRequest;
}

/**
 * 
 */
export class ConnectionApi extends runtime.BaseAPI {

    /**
     * Create a new connection for the connected user\'s project workflow.
     * Create a new connection for the connected user\'s project workflow
     */
    async createConnectedUserProjectWorkflowConnectionRaw(requestParameters: CreateConnectedUserProjectWorkflowConnectionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<number>> {
        if (requestParameters['connectedUserId'] == null) {
            throw new runtime.RequiredError(
                'connectedUserId',
                'Required parameter "connectedUserId" was null or undefined when calling createConnectedUserProjectWorkflowConnection().'
            );
        }

        if (requestParameters['workflowUuid'] == null) {
            throw new runtime.RequiredError(
                'workflowUuid',
                'Required parameter "workflowUuid" was null or undefined when calling createConnectedUserProjectWorkflowConnection().'
            );
        }

        if (requestParameters['connection'] == null) {
            throw new runtime.RequiredError(
                'connection',
                'Required parameter "connection" was null or undefined when calling createConnectedUserProjectWorkflowConnection().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/connected-users/{connectedUserId}/workflows/{workflowUuid}/connections`;
        urlPath = urlPath.replace(`{${"connectedUserId"}}`, encodeURIComponent(String(requestParameters['connectedUserId'])));
        urlPath = urlPath.replace(`{${"workflowUuid"}}`, encodeURIComponent(String(requestParameters['workflowUuid'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ConnectionToJSON(requestParameters['connection']),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<number>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Create a new connection for the connected user\'s project workflow.
     * Create a new connection for the connected user\'s project workflow
     */
    async createConnectedUserProjectWorkflowConnection(requestParameters: CreateConnectedUserProjectWorkflowConnectionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<number> {
        const response = await this.createConnectedUserProjectWorkflowConnectionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a new connection.
     * Create a new connection
     */
    async createConnectionRaw(requestParameters: CreateConnectionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<number>> {
        if (requestParameters['connection'] == null) {
            throw new runtime.RequiredError(
                'connection',
                'Required parameter "connection" was null or undefined when calling createConnection().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/connections`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ConnectionToJSON(requestParameters['connection']),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<number>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Create a new connection.
     * Create a new connection
     */
    async createConnection(requestParameters: CreateConnectionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<number> {
        const response = await this.createConnectionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a connection.
     * Delete a connection
     */
    async deleteConnectionRaw(requestParameters: DeleteConnectionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deleteConnection().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/connections/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a connection.
     * Delete a connection
     */
    async deleteConnection(requestParameters: DeleteConnectionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteConnectionRaw(requestParameters, initOverrides);
    }

    /**
     * Get all connected user\'s connections.
     * Get all connected user\'s connections
     */
    async getConnectedUserConnectionsRaw(requestParameters: GetConnectedUserConnectionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Connection>>> {
        if (requestParameters['connectedUserId'] == null) {
            throw new runtime.RequiredError(
                'connectedUserId',
                'Required parameter "connectedUserId" was null or undefined when calling getConnectedUserConnections().'
            );
        }

        if (requestParameters['componentName'] == null) {
            throw new runtime.RequiredError(
                'componentName',
                'Required parameter "componentName" was null or undefined when calling getConnectedUserConnections().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['connectionIds'] != null) {
            queryParameters['connectionIds'] = requestParameters['connectionIds'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/connected-users/{connectedUserId}/components/{componentName}/connections`;
        urlPath = urlPath.replace(`{${"connectedUserId"}}`, encodeURIComponent(String(requestParameters['connectedUserId'])));
        urlPath = urlPath.replace(`{${"componentName"}}`, encodeURIComponent(String(requestParameters['componentName'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ConnectionFromJSON));
    }

    /**
     * Get all connected user\'s connections.
     * Get all connected user\'s connections
     */
    async getConnectedUserConnections(requestParameters: GetConnectedUserConnectionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Connection>> {
        const response = await this.getConnectedUserConnectionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a connection by id.
     * Get a connection by id
     */
    async getConnectionRaw(requestParameters: GetConnectionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Connection>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getConnection().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/connections/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ConnectionFromJSON(jsonValue));
    }

    /**
     * Get a connection by id.
     * Get a connection by id
     */
    async getConnection(requestParameters: GetConnectionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Connection> {
        const response = await this.getConnectionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get all connections.
     * Get all connections
     */
    async getConnectionsRaw(requestParameters: GetConnectionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Connection>>> {
        const queryParameters: any = {};

        if (requestParameters['componentName'] != null) {
            queryParameters['componentName'] = requestParameters['componentName'];
        }

        if (requestParameters['connectionVersion'] != null) {
            queryParameters['connectionVersion'] = requestParameters['connectionVersion'];
        }

        if (requestParameters['environmentId'] != null) {
            queryParameters['environmentId'] = requestParameters['environmentId'];
        }

        if (requestParameters['tagId'] != null) {
            queryParameters['tagId'] = requestParameters['tagId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/connections`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ConnectionFromJSON));
    }

    /**
     * Get all connections.
     * Get all connections
     */
    async getConnections(requestParameters: GetConnectionsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Connection>> {
        const response = await this.getConnectionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update an existing connection.
     * Update an existing connection
     */
    async updateConnectionRaw(requestParameters: UpdateConnectionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling updateConnection().'
            );
        }

        if (requestParameters['updateConnectionRequest'] == null) {
            throw new runtime.RequiredError(
                'updateConnectionRequest',
                'Required parameter "updateConnectionRequest" was null or undefined when calling updateConnection().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/connections/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateConnectionRequestToJSON(requestParameters['updateConnectionRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Update an existing connection.
     * Update an existing connection
     */
    async updateConnection(requestParameters: UpdateConnectionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.updateConnectionRaw(requestParameters, initOverrides);
    }

}
