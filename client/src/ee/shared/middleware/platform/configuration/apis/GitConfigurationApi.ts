/* tslint:disable */
/* eslint-disable */
/**
 * The Platform Internal API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  GitConfiguration,
} from '../models/index';
import {
    GitConfigurationFromJSON,
    GitConfigurationToJSON,
} from '../models/index';

export interface UpdateGitConfigurationRequest {
    gitConfiguration: GitConfiguration;
}

/**
 * 
 */
export class GitConfigurationApi extends runtime.BaseAPI {

    /**
     * Get git configuration.
     * Get git configuration.
     */
    async getGitConfigurationRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GitConfiguration>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/git-configuration`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GitConfigurationFromJSON(jsonValue));
    }

    /**
     * Get git configuration.
     * Get git configuration.
     */
    async getGitConfiguration(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GitConfiguration> {
        const response = await this.getGitConfigurationRaw(initOverrides);
        return await response.value();
    }

    /**
     * Update git configuration.
     * Update git configuration.
     */
    async updateGitConfigurationRaw(requestParameters: UpdateGitConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['gitConfiguration'] == null) {
            throw new runtime.RequiredError(
                'gitConfiguration',
                'Required parameter "gitConfiguration" was null or undefined when calling updateGitConfiguration().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/git-configuration`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: GitConfigurationToJSON(requestParameters['gitConfiguration']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Update git configuration.
     * Update git configuration.
     */
    async updateGitConfiguration(requestParameters: UpdateGitConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.updateGitConfigurationRaw(requestParameters, initOverrides);
    }

}
