/* tslint:disable */
/* eslint-disable */
/**
 * The Platform Internal API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AiProvider,
  UpdateAiProviderRequest,
} from '../models/index';
import {
    AiProviderFromJSON,
    AiProviderToJSON,
    UpdateAiProviderRequestFromJSON,
    UpdateAiProviderRequestToJSON,
} from '../models/index';

export interface DeleteAiProviderRequest {
    id: number;
}

export interface EnableAiProviderRequest {
    id: number;
    enable: boolean;
}

export interface UpdateAiProviderOperationRequest {
    id: number;
    updateAiProviderRequest: UpdateAiProviderRequest;
}

/**
 * 
 */
export class AiProviderApi extends runtime.BaseAPI {

    /**
     * Delete an AI provider.
     * Delete an AI provider
     */
    async deleteAiProviderRaw(requestParameters: DeleteAiProviderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deleteAiProvider().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/ai-providers/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete an AI provider.
     * Delete an AI provider
     */
    async deleteAiProvider(requestParameters: DeleteAiProviderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteAiProviderRaw(requestParameters, initOverrides);
    }

    /**
     * Enable/disable an AI provider.
     * e
     */
    async enableAiProviderRaw(requestParameters: EnableAiProviderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling enableAiProvider().'
            );
        }

        if (requestParameters['enable'] == null) {
            throw new runtime.RequiredError(
                'enable',
                'Required parameter "enable" was null or undefined when calling enableAiProvider().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/ai-providers/{id}/enable/{enable}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))).replace(`{${"enable"}}`, encodeURIComponent(String(requestParameters['enable']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Enable/disable an AI provider.
     * e
     */
    async enableAiProvider(requestParameters: EnableAiProviderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.enableAiProviderRaw(requestParameters, initOverrides);
    }

    /**
     * Get AI providers.
     * Get AI providers
     */
    async getAiProvidersRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<AiProvider>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/ai-providers`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(AiProviderFromJSON));
    }

    /**
     * Get AI providers.
     * Get AI providers
     */
    async getAiProviders(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<AiProvider>> {
        const response = await this.getAiProvidersRaw(initOverrides);
        return await response.value();
    }

    /**
     * Update an existing AI provider.
     * Update an existing AI provider
     */
    async updateAiProviderRaw(requestParameters: UpdateAiProviderOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling updateAiProvider().'
            );
        }

        if (requestParameters['updateAiProviderRequest'] == null) {
            throw new runtime.RequiredError(
                'updateAiProviderRequest',
                'Required parameter "updateAiProviderRequest" was null or undefined when calling updateAiProvider().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/ai-providers/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateAiProviderRequestToJSON(requestParameters['updateAiProviderRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Update an existing AI provider.
     * Update an existing AI provider
     */
    async updateAiProvider(requestParameters: UpdateAiProviderOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.updateAiProviderRaw(requestParameters, initOverrides);
    }

}
