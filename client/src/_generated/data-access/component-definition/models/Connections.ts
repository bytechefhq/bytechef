/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ConnectionDefinition } from './ConnectionDefinition';
import {
    ConnectionDefinitionFromJSON,
    ConnectionDefinitionFromJSONTyped,
    ConnectionDefinitionToJSON,
} from './ConnectionDefinition';

/**
 * 
 * @export
 * @interface Connections
 */
export interface Connections {
    /**
     * 
     * @type {Array<ConnectionDefinition>}
     * @memberof Connections
     */
    connections?: Array<ConnectionDefinition>;
    /**
     * 
     * @type {string}
     * @memberof Connections
     */
    name?: string;
    /**
     * 
     * @type {number}
     * @memberof Connections
     */
    version?: number;
}

/**
 * Check if a given object implements the Connections interface.
 */
export function instanceOfConnections(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ConnectionsFromJSON(json: any): Connections {
    return ConnectionsFromJSONTyped(json, false);
}

export function ConnectionsFromJSONTyped(json: any, ignoreDiscriminator: boolean): Connections {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'connections': !exists(json, 'connections') ? undefined : ((json['connections'] as Array<any>).map(ConnectionDefinitionFromJSON)),
        'name': !exists(json, 'name') ? undefined : json['name'],
        'version': !exists(json, 'version') ? undefined : json['version'],
    };
}

export function ConnectionsToJSON(value?: Connections | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'connections': value.connections === undefined ? undefined : ((value.connections as Array<any>).map(ConnectionDefinitionToJSON)),
        'name': value.name,
        'version': value.version,
    };
}

