/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ConnectionDefinitionPropertiesInner } from './ConnectionDefinitionPropertiesInner';
import {
    ConnectionDefinitionPropertiesInnerFromJSON,
    ConnectionDefinitionPropertiesInnerFromJSONTyped,
    ConnectionDefinitionPropertiesInnerToJSON,
} from './ConnectionDefinitionPropertiesInner';
import type { Display } from './Display';
import {
    DisplayFromJSON,
    DisplayFromJSONTyped,
    DisplayToJSON,
} from './Display';
import type { Resources } from './Resources';
import {
    ResourcesFromJSON,
    ResourcesFromJSONTyped,
    ResourcesToJSON,
} from './Resources';

/**
 * 
 * @export
 * @interface ConnectionDefinition
 */
export interface ConnectionDefinition {
    /**
     * 
     * @type {Display}
     * @memberof ConnectionDefinition
     */
    display?: Display;
    /**
     * 
     * @type {string}
     * @memberof ConnectionDefinition
     */
    name?: string;
    /**
     * 
     * @type {Array<ConnectionDefinitionPropertiesInner>}
     * @memberof ConnectionDefinition
     */
    properties?: Array<ConnectionDefinitionPropertiesInner>;
    /**
     * 
     * @type {Resources}
     * @memberof ConnectionDefinition
     */
    resources?: Resources;
    /**
     * 
     * @type {string}
     * @memberof ConnectionDefinition
     */
    subtitle?: string;
    /**
     * 
     * @type {number}
     * @memberof ConnectionDefinition
     */
    version?: number;
}

/**
 * Check if a given object implements the ConnectionDefinition interface.
 */
export function instanceOfConnectionDefinition(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ConnectionDefinitionFromJSON(json: any): ConnectionDefinition {
    return ConnectionDefinitionFromJSONTyped(json, false);
}

export function ConnectionDefinitionFromJSONTyped(json: any, ignoreDiscriminator: boolean): ConnectionDefinition {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'display': !exists(json, 'display') ? undefined : DisplayFromJSON(json['display']),
        'name': !exists(json, 'name') ? undefined : json['name'],
        'properties': !exists(json, 'properties') ? undefined : ((json['properties'] as Array<any>).map(ConnectionDefinitionPropertiesInnerFromJSON)),
        'resources': !exists(json, 'resources') ? undefined : ResourcesFromJSON(json['resources']),
        'subtitle': !exists(json, 'subtitle') ? undefined : json['subtitle'],
        'version': !exists(json, 'version') ? undefined : json['version'],
    };
}

export function ConnectionDefinitionToJSON(value?: ConnectionDefinition | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'display': DisplayToJSON(value.display),
        'name': value.name,
        'properties': value.properties === undefined ? undefined : ((value.properties as Array<any>).map(ConnectionDefinitionPropertiesInnerToJSON)),
        'resources': ResourcesToJSON(value.resources),
        'subtitle': value.subtitle,
        'version': value.version,
    };
}

