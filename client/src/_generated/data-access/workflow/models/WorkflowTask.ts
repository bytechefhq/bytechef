/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface WorkflowTask
 */
export interface WorkflowTask {
    /**
     * 
     * @type {Array<WorkflowTask>}
     * @memberof WorkflowTask
     */
    finalize?: Array<WorkflowTask>;
    /**
     * 
     * @type {string}
     * @memberof WorkflowTask
     */
    label?: string;
    /**
     * 
     * @type {string}
     * @memberof WorkflowTask
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof WorkflowTask
     */
    node?: string;
    /**
     * 
     * @type {{ [key: string]: object; }}
     * @memberof WorkflowTask
     */
    parameters?: { [key: string]: object; };
    /**
     * 
     * @type {Array<WorkflowTask>}
     * @memberof WorkflowTask
     */
    post?: Array<WorkflowTask>;
    /**
     * 
     * @type {Array<WorkflowTask>}
     * @memberof WorkflowTask
     */
    pre?: Array<WorkflowTask>;
    /**
     * 
     * @type {string}
     * @memberof WorkflowTask
     */
    timeout?: string;
    /**
     * 
     * @type {string}
     * @memberof WorkflowTask
     */
    type?: string;
}

/**
 * Check if a given object implements the WorkflowTask interface.
 */
export function instanceOfWorkflowTask(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function WorkflowTaskFromJSON(json: any): WorkflowTask {
    return WorkflowTaskFromJSONTyped(json, false);
}

export function WorkflowTaskFromJSONTyped(json: any, ignoreDiscriminator: boolean): WorkflowTask {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'finalize': !exists(json, 'finalize') ? undefined : ((json['finalize'] as Array<any>).map(WorkflowTaskFromJSON)),
        'label': !exists(json, 'label') ? undefined : json['label'],
        'name': !exists(json, 'name') ? undefined : json['name'],
        'node': !exists(json, 'node') ? undefined : json['node'],
        'parameters': !exists(json, 'parameters') ? undefined : json['parameters'],
        'post': !exists(json, 'post') ? undefined : ((json['post'] as Array<any>).map(WorkflowTaskFromJSON)),
        'pre': !exists(json, 'pre') ? undefined : ((json['pre'] as Array<any>).map(WorkflowTaskFromJSON)),
        'timeout': !exists(json, 'timeout') ? undefined : json['timeout'],
        'type': !exists(json, 'type') ? undefined : json['type'],
    };
}

export function WorkflowTaskToJSON(value?: WorkflowTask | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'finalize': value.finalize === undefined ? undefined : ((value.finalize as Array<any>).map(WorkflowTaskToJSON)),
        'label': value.label,
        'name': value.name,
        'node': value.node,
        'parameters': value.parameters,
        'post': value.post === undefined ? undefined : ((value.post as Array<any>).map(WorkflowTaskToJSON)),
        'pre': value.pre === undefined ? undefined : ((value.pre as Array<any>).map(WorkflowTaskToJSON)),
        'timeout': value.timeout,
        'type': value.type,
    };
}

