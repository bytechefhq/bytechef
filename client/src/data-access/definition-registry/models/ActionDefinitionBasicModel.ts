/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { DisplayModel } from './DisplayModel';
import {
    DisplayModelFromJSON,
    DisplayModelFromJSONTyped,
    DisplayModelToJSON,
} from './DisplayModel';

/**
 * An action is a portion of reusable code that accomplish a specific task. When building a workflow, each action is represented as a task inside the workflow. The task 'type' property is defined as [component name]/v[component version]/[action name]. Action properties are used to set properties of the task inside the workflow.
 * @export
 * @interface ActionDefinitionBasicModel
 */
export interface ActionDefinitionBasicModel {
    /**
     * The action name.
     * @type {string}
     * @memberof ActionDefinitionBasicModel
     */
    name: string;
    /**
     * 
     * @type {DisplayModel}
     * @memberof ActionDefinitionBasicModel
     */
    display: DisplayModel;
}

/**
 * Check if a given object implements the ActionDefinitionBasicModel interface.
 */
export function instanceOfActionDefinitionBasicModel(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "display" in value;

    return isInstance;
}

export function ActionDefinitionBasicModelFromJSON(json: any): ActionDefinitionBasicModel {
    return ActionDefinitionBasicModelFromJSONTyped(json, false);
}

export function ActionDefinitionBasicModelFromJSONTyped(json: any, ignoreDiscriminator: boolean): ActionDefinitionBasicModel {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'name': json['name'],
        'display': DisplayModelFromJSON(json['display']),
    };
}

export function ActionDefinitionBasicModelToJSON(value?: ActionDefinitionBasicModel | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'name': value.name,
        'display': DisplayModelToJSON(value.display),
    };
}

