/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { PropertyOptionModel } from './PropertyOptionModel';
import {
    PropertyOptionModelFromJSON,
    PropertyOptionModelFromJSONTyped,
    PropertyOptionModelToJSON,
} from './PropertyOptionModel';

/**
 * 
 * @export
 * @interface ValuePropertyAllOfModel
 */
export interface ValuePropertyAllOfModel {
    /**
     * The property default value.
     * @type {object}
     * @memberof ValuePropertyAllOfModel
     */
    defaultValue?: object;
    /**
     * The property example value.
     * @type {object}
     * @memberof ValuePropertyAllOfModel
     */
    exampleValue?: object;
    /**
     * The list of valid property options.
     * @type {Array<PropertyOptionModel>}
     * @memberof ValuePropertyAllOfModel
     */
    options?: Array<PropertyOptionModel>;
}

/**
 * Check if a given object implements the ValuePropertyAllOfModel interface.
 */
export function instanceOfValuePropertyAllOfModel(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ValuePropertyAllOfModelFromJSON(json: any): ValuePropertyAllOfModel {
    return ValuePropertyAllOfModelFromJSONTyped(json, false);
}

export function ValuePropertyAllOfModelFromJSONTyped(json: any, ignoreDiscriminator: boolean): ValuePropertyAllOfModel {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'defaultValue': !exists(json, 'defaultValue') ? undefined : json['defaultValue'],
        'exampleValue': !exists(json, 'exampleValue') ? undefined : json['exampleValue'],
        'options': !exists(json, 'options') ? undefined : ((json['options'] as Array<any>).map(PropertyOptionModelFromJSON)),
    };
}

export function ValuePropertyAllOfModelToJSON(value?: ValuePropertyAllOfModel | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'defaultValue': value.defaultValue,
        'exampleValue': value.exampleValue,
        'options': value.options === undefined ? undefined : ((value.options as Array<any>).map(PropertyOptionModelToJSON)),
    };
}

