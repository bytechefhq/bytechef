/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { DisplayOption } from './DisplayOption';
import {
    DisplayOptionFromJSON,
    DisplayOptionFromJSONTyped,
    DisplayOptionToJSON,
} from './DisplayOption';
import type { Property } from './Property';
import {
    PropertyFromJSON,
    PropertyFromJSONTyped,
    PropertyToJSON,
} from './Property';
import type { PropertyOption } from './PropertyOption';
import {
    PropertyOptionFromJSON,
    PropertyOptionFromJSONTyped,
    PropertyOptionToJSON,
} from './PropertyOption';
import type { ValueProperty } from './ValueProperty';
import {
    ValuePropertyFromJSON,
    ValuePropertyFromJSONTyped,
    ValuePropertyToJSON,
} from './ValueProperty';

/**
 * An array property type.
 * @export
 * @interface ArrayProperty
 */
export interface ArrayProperty extends ValueProperty {
    /**
     * Types of the array items.
     * @type {Array<Property>}
     * @memberof ArrayProperty
     */
    items?: Array<Property>;
    /**
     * If the array can contain multiple items.
     * @type {boolean}
     * @memberof ArrayProperty
     */
    multipleValues?: boolean;
}

/**
 * Check if a given object implements the ArrayProperty interface.
 */
export function instanceOfArrayProperty(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ArrayPropertyFromJSON(json: any): ArrayProperty {
    return ArrayPropertyFromJSONTyped(json, false);
}

export function ArrayPropertyFromJSONTyped(json: any, ignoreDiscriminator: boolean): ArrayProperty {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        ...ValuePropertyFromJSONTyped(json, ignoreDiscriminator),
        'items': !exists(json, 'items') ? undefined : ((json['items'] as Array<any>).map(PropertyFromJSON)),
        'multipleValues': !exists(json, 'multipleValues') ? undefined : json['multipleValues'],
    };
}

export function ArrayPropertyToJSON(value?: ArrayProperty | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        ...ValuePropertyToJSON(value),
        'items': value.items === undefined ? undefined : ((value.items as Array<any>).map(PropertyToJSON)),
        'multipleValues': value.multipleValues,
    };
}

