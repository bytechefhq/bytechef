/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { DisplayOption } from './DisplayOption';
import {
    DisplayOptionFromJSON,
    DisplayOptionFromJSONTyped,
    DisplayOptionToJSON,
} from './DisplayOption';
import type { PropertyOption } from './PropertyOption';
import {
    PropertyOptionFromJSON,
    PropertyOptionFromJSONTyped,
    PropertyOptionToJSON,
} from './PropertyOption';
import type { ValueProperty } from './ValueProperty';
import {
    ValuePropertyFromJSON,
    ValuePropertyFromJSONTyped,
    ValuePropertyToJSON,
} from './ValueProperty';

/**
 * A date-time property type.
 * @export
 * @interface DateTimeProperty
 */
export interface DateTimeProperty extends ValueProperty {
    /**
     * 
     * @type {string}
     * @memberof DateTimeProperty
     */
    type: string;
}

/**
 * Check if a given object implements the DateTimeProperty interface.
 */
export function instanceOfDateTimeProperty(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "type" in value;

    return isInstance;
}

export function DateTimePropertyFromJSON(json: any): DateTimeProperty {
    return DateTimePropertyFromJSONTyped(json, false);
}

export function DateTimePropertyFromJSONTyped(json: any, ignoreDiscriminator: boolean): DateTimeProperty {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        ...ValuePropertyFromJSONTyped(json, ignoreDiscriminator),
        'type': json['type'],
    };
}

export function DateTimePropertyToJSON(value?: DateTimeProperty | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        ...ValuePropertyToJSON(value),
        'type': value.type,
    };
}

