/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { DisplayOption } from './DisplayOption';
import {
    DisplayOptionFromJSON,
    DisplayOptionFromJSONTyped,
    DisplayOptionToJSON,
} from './DisplayOption';
import type { Property } from './Property';
import {
    PropertyFromJSON,
    PropertyFromJSONTyped,
    PropertyToJSON,
} from './Property';
import type { PropertyOption } from './PropertyOption';
import {
    PropertyOptionFromJSON,
    PropertyOptionFromJSONTyped,
    PropertyOptionToJSON,
} from './PropertyOption';

/**
 * A base property for all value based properties.
 * @export
 * @interface ValueProperty
 */
export interface ValueProperty extends Property {
    /**
     * The property default value.
     * @type {object}
     * @memberof ValueProperty
     */
    defaultValue?: object;
    /**
     * The property example value.
     * @type {object}
     * @memberof ValueProperty
     */
    exampleValue?: object;
    /**
     * The list of valid property options.
     * @type {Array<PropertyOption>}
     * @memberof ValueProperty
     */
    options?: Array<PropertyOption>;
}

/**
 * Check if a given object implements the ValueProperty interface.
 */
export function instanceOfValueProperty(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ValuePropertyFromJSON(json: any): ValueProperty {
    return ValuePropertyFromJSONTyped(json, false);
}

export function ValuePropertyFromJSONTyped(json: any, ignoreDiscriminator: boolean): ValueProperty {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        ...PropertyFromJSONTyped(json, ignoreDiscriminator),
        'defaultValue': !exists(json, 'defaultValue') ? undefined : json['defaultValue'],
        'exampleValue': !exists(json, 'exampleValue') ? undefined : json['exampleValue'],
        'options': !exists(json, 'options') ? undefined : ((json['options'] as Array<any>).map(PropertyOptionFromJSON)),
    };
}

export function ValuePropertyToJSON(value?: ValueProperty | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        ...PropertyToJSON(value),
        'defaultValue': value.defaultValue,
        'exampleValue': value.exampleValue,
        'options': value.options === undefined ? undefined : ((value.options as Array<any>).map(PropertyOptionToJSON)),
    };
}

