/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists } from '../runtime';
import {BooleanProperty} from './BooleanProperty';
import {ArrayProperty} from './ArrayProperty';
import {DateProperty} from './DateProperty';
import {DateTimeProperty} from './DateTimeProperty';
import {IntegerProperty} from './IntegerProperty';
import {NullProperty} from './NullProperty';
import {NumberProperty} from './NumberProperty';
import {StringProperty} from './StringProperty';
import {ObjectProperty} from './ObjectProperty';
import type { Property } from './Property';
import {
    PropertyFromJSON,
    PropertyFromJSONTyped,
    PropertyToJSON,
} from './Property';

/**
 * An any property type.
 * @export
 * @interface AnyProperty
 */
export interface AnyProperty extends Property {
    /**
     *
     * @type {boolean}
     * @memberof AnyProperty
     */
    required?: boolean;
    /**
     * Possible types of properties that can be used.
     * @type {Array<ArrayProperty | BooleanProperty | DateProperty | DateTimeProperty | IntegerProperty | NullProperty | NumberProperty | StringProperty | ObjectProperty>}
     * @memberof AnyProperty
     */
    types?: Array<ArrayProperty | BooleanProperty | DateProperty | DateTimeProperty | IntegerProperty | NullProperty | NumberProperty | StringProperty | ObjectProperty>;
    /**
     *
     * @type {string}
     * @memberof AnyProperty
     */
    type: string;
}

/**
 * Check if a given object implements the AnyProperty interface.
 */
export function instanceOfAnyProperty(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "type" in value;

    return isInstance;
}

export function AnyPropertyFromJSON(json: any): AnyProperty {
    return AnyPropertyFromJSONTyped(json, false);
}

export function AnyPropertyFromJSONTyped(json: any, ignoreDiscriminator: boolean): AnyProperty {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        ...PropertyFromJSONTyped(json, ignoreDiscriminator),
        'required': !exists(json, 'required') ? undefined : json['required'],
        'types': !exists(json, 'types') ? undefined : ((json['types'] as Array<any>)),
        'type': json['type'],
    };
}

export function AnyPropertyToJSON(value?: AnyProperty | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        ...PropertyToJSON(value),
        'required': value.required,
        'types': value.types === undefined ? undefined : ((value.types as Array<any>)),
        'type': value.type,
    };
}

