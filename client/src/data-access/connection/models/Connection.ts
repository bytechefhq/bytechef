/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * TODO
 * @export
 * @interface Connection
 */
export interface Connection {
    /**
     * TODO
     * @type {string}
     * @memberof Connection
     */
    authorizationName?: string;
    /**
     * TODO
     * @type {string}
     * @memberof Connection
     */
    componentName?: string;
    /**
     * TODO
     * @type {string}
     * @memberof Connection
     */
    componentVersion?: string;
    /**
     * TODO
     * @type {string}
     * @memberof Connection
     */
    readonly createdBy?: string;
    /**
     * TODO
     * @type {Date}
     * @memberof Connection
     */
    readonly createdDate?: Date;
    /**
     * TODO
     * @type {string}
     * @memberof Connection
     */
    name?: string;
    /**
     * TODO
     * @type {string}
     * @memberof Connection
     */
    readonly id?: string;
    /**
     * TODO
     * @type {string}
     * @memberof Connection
     */
    readonly lastModifiedBy?: string;
    /**
     * TODO
     * @type {Date}
     * @memberof Connection
     */
    readonly lastModifiedDate?: Date;
    /**
     * TODO
     * @type {{ [key: string]: object; }}
     * @memberof Connection
     */
    parameters?: { [key: string]: object; };
}

/**
 * Check if a given object implements the Connection interface.
 */
export function instanceOfConnection(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ConnectionFromJSON(json: any): Connection {
    return ConnectionFromJSONTyped(json, false);
}

export function ConnectionFromJSONTyped(json: any, ignoreDiscriminator: boolean): Connection {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'authorizationName': !exists(json, 'authorizationName') ? undefined : json['authorizationName'],
        'componentName': !exists(json, 'componentName') ? undefined : json['componentName'],
        'componentVersion': !exists(json, 'componentVersion') ? undefined : json['componentVersion'],
        'createdBy': !exists(json, 'createdBy') ? undefined : json['createdBy'],
        'createdDate': !exists(json, 'createdDate') ? undefined : (new Date(json['createdDate'])),
        'name': !exists(json, 'name') ? undefined : json['name'],
        'id': !exists(json, 'id') ? undefined : json['id'],
        'lastModifiedBy': !exists(json, 'lastModifiedBy') ? undefined : json['lastModifiedBy'],
        'lastModifiedDate': !exists(json, 'lastModifiedDate') ? undefined : (new Date(json['lastModifiedDate'])),
        'parameters': !exists(json, 'parameters') ? undefined : json['parameters'],
    };
}

export function ConnectionToJSON(value?: Connection | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'authorizationName': value.authorizationName,
        'componentName': value.componentName,
        'componentVersion': value.componentVersion,
        'name': value.name,
        'parameters': value.parameters,
    };
}

