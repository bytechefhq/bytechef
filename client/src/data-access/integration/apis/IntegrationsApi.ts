/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  GetIntegrationTags200Response,
  Integration,
  PutIntegrationTagsRequest,
} from '../models';
import {
    GetIntegrationTags200ResponseFromJSON,
    GetIntegrationTags200ResponseToJSON,
    IntegrationFromJSON,
    IntegrationToJSON,
    PutIntegrationTagsRequestFromJSON,
    PutIntegrationTagsRequestToJSON,
} from '../models';

export interface DeleteIntegrationRequest {
    id: number;
}

export interface GetIntegrationRequest {
    id: number;
}

export interface PostIntegrationRequest {
    integration: Integration;
}

export interface PutIntegrationRequest {
    id: number;
    integration: Integration;
}

export interface PutIntegrationTagsOperationRequest {
    id: number;
    putIntegrationTagsRequest: PutIntegrationTagsRequest;
}

/**
 * 
 */
export class IntegrationsApi extends runtime.BaseAPI {

    /**
     * Delete an integration.
     * Delete an integration.
     */
    async deleteIntegrationRaw(requestParameters: DeleteIntegrationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteIntegration.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/integrations/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete an integration.
     * Delete an integration.
     */
    async deleteIntegration(requestParameters: DeleteIntegrationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteIntegrationRaw(requestParameters, initOverrides);
    }

    /**
     * Get an integration by id.
     * Get an integration by id.
     */
    async getIntegrationRaw(requestParameters: GetIntegrationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Integration>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getIntegration.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/integrations/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IntegrationFromJSON(jsonValue));
    }

    /**
     * Get an integration by id.
     * Get an integration by id.
     */
    async getIntegration(requestParameters: GetIntegrationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Integration> {
        const response = await this.getIntegrationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get integration tags.
     * Get integration tags.
     */
    async getIntegrationTagsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetIntegrationTags200Response>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/integration-tags`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetIntegrationTags200ResponseFromJSON(jsonValue));
    }

    /**
     * Get integration tags.
     * Get integration tags.
     */
    async getIntegrationTags(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetIntegrationTags200Response> {
        const response = await this.getIntegrationTagsRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get integrations.
     * Get integrations.
     */
    async getIntegrationsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Integration>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/integrations`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(IntegrationFromJSON));
    }

    /**
     * Get integrations.
     * Get integrations.
     */
    async getIntegrations(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Integration>> {
        const response = await this.getIntegrationsRaw(initOverrides);
        return await response.value();
    }

    /**
     * Create a new integration.
     * Create a new integration.
     */
    async postIntegrationRaw(requestParameters: PostIntegrationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Integration>> {
        if (requestParameters.integration === null || requestParameters.integration === undefined) {
            throw new runtime.RequiredError('integration','Required parameter requestParameters.integration was null or undefined when calling postIntegration.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/integrations`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: IntegrationToJSON(requestParameters.integration),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IntegrationFromJSON(jsonValue));
    }

    /**
     * Create a new integration.
     * Create a new integration.
     */
    async postIntegration(requestParameters: PostIntegrationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Integration> {
        const response = await this.postIntegrationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update an existing integration.
     * Update an existing integration.
     */
    async putIntegrationRaw(requestParameters: PutIntegrationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Integration>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling putIntegration.');
        }

        if (requestParameters.integration === null || requestParameters.integration === undefined) {
            throw new runtime.RequiredError('integration','Required parameter requestParameters.integration was null or undefined when calling putIntegration.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/integrations/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: IntegrationToJSON(requestParameters.integration),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IntegrationFromJSON(jsonValue));
    }

    /**
     * Update an existing integration.
     * Update an existing integration.
     */
    async putIntegration(requestParameters: PutIntegrationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Integration> {
        const response = await this.putIntegrationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates tags of an existing integration.
     * Updates tags of an existing integration.
     */
    async putIntegrationTagsRaw(requestParameters: PutIntegrationTagsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling putIntegrationTags.');
        }

        if (requestParameters.putIntegrationTagsRequest === null || requestParameters.putIntegrationTagsRequest === undefined) {
            throw new runtime.RequiredError('putIntegrationTagsRequest','Required parameter requestParameters.putIntegrationTagsRequest was null or undefined when calling putIntegrationTags.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/integrations/{id}/tags`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PutIntegrationTagsRequestToJSON(requestParameters.putIntegrationTagsRequest),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Updates tags of an existing integration.
     * Updates tags of an existing integration.
     */
    async putIntegrationTags(requestParameters: PutIntegrationTagsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.putIntegrationTagsRaw(requestParameters, initOverrides);
    }

}
