/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { WorkflowTask } from './WorkflowTask';
import {
    WorkflowTaskFromJSON,
    WorkflowTaskFromJSONTyped,
    WorkflowTaskToJSON,
} from './WorkflowTask';

/**
 * The lueprint that describe the execution of a job.
 * @export
 * @interface Workflow
 */
export interface Workflow {
    /**
     * Definition of the workflow that is executed as a job.
     * @type {string}
     * @memberof Workflow
     */
    definition?: string;
    /**
     * The created by.
     * @type {string}
     * @memberof Workflow
     */
    readonly createdBy?: string;
    /**
     * The created date.
     * @type {Date}
     * @memberof Workflow
     */
    readonly createdDate?: Date;
    /**
     * The format of the workflow definition.
     * @type {string}
     * @memberof Workflow
     */
    format?: WorkflowFormatEnum;
    /**
     * The id of the workflow.
     * @type {string}
     * @memberof Workflow
     */
    readonly id?: string;
    /**
     * The workflow's expected list of inputs.
     * @type {Array<{ [key: string]: object; }>}
     * @memberof Workflow
     */
    inputs?: Array<{ [key: string]: object; }>;
    /**
     * The descriptive name for the workflow
     * @type {string}
     * @memberof Workflow
     */
    label?: string;
    /**
     * The last modified by.
     * @type {string}
     * @memberof Workflow
     */
    readonly lastModifiedBy?: string;
    /**
     * The last modified date.
     * @type {Date}
     * @memberof Workflow
     */
    readonly lastModifiedDate?: Date;
    /**
     * The workflow's list of expected outputs.
     * @type {Array<{ [key: string]: object; }>}
     * @memberof Workflow
     */
    outputs?: Array<{ [key: string]: object; }>;
    /**
     * The maximum number of times a task may retry.
     * @type {number}
     * @memberof Workflow
     */
    retry?: number;
    /**
     * The steps that make up the workflow.
     * @type {Array<WorkflowTask>}
     * @memberof Workflow
     */
    tasks?: Array<WorkflowTask>;
}


/**
 * @export
 */
export const WorkflowFormatEnum = {
    Json: 'JSON',
    Yml: 'YML',
    Yaml: 'YAML'
} as const;
export type WorkflowFormatEnum = typeof WorkflowFormatEnum[keyof typeof WorkflowFormatEnum];


/**
 * Check if a given object implements the Workflow interface.
 */
export function instanceOfWorkflow(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function WorkflowFromJSON(json: any): Workflow {
    return WorkflowFromJSONTyped(json, false);
}

export function WorkflowFromJSONTyped(json: any, ignoreDiscriminator: boolean): Workflow {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'definition': !exists(json, 'definition') ? undefined : json['definition'],
        'createdBy': !exists(json, 'createdBy') ? undefined : json['createdBy'],
        'createdDate': !exists(json, 'createdDate') ? undefined : (new Date(json['createdDate'])),
        'format': !exists(json, 'format') ? undefined : json['format'],
        'id': !exists(json, 'id') ? undefined : json['id'],
        'inputs': !exists(json, 'inputs') ? undefined : json['inputs'],
        'label': !exists(json, 'label') ? undefined : json['label'],
        'lastModifiedBy': !exists(json, 'lastModifiedBy') ? undefined : json['lastModifiedBy'],
        'lastModifiedDate': !exists(json, 'lastModifiedDate') ? undefined : (new Date(json['lastModifiedDate'])),
        'outputs': !exists(json, 'outputs') ? undefined : json['outputs'],
        'retry': !exists(json, 'retry') ? undefined : json['retry'],
        'tasks': !exists(json, 'tasks') ? undefined : ((json['tasks'] as Array<any>).map(WorkflowTaskFromJSON)),
    };
}

export function WorkflowToJSON(value?: Workflow | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'definition': value.definition,
        'format': value.format,
        'inputs': value.inputs,
        'label': value.label,
        'outputs': value.outputs,
        'retry': value.retry,
        'tasks': value.tasks === undefined ? undefined : ((value.tasks as Array<any>).map(WorkflowTaskToJSON)),
    };
}

