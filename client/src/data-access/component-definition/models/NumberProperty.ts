/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { DisplayOption } from './DisplayOption';
import {
    DisplayOptionFromJSON,
    DisplayOptionFromJSONTyped,
    DisplayOptionToJSON,
} from './DisplayOption';
import type { PropertyOption } from './PropertyOption';
import {
    PropertyOptionFromJSON,
    PropertyOptionFromJSONTyped,
    PropertyOptionToJSON,
} from './PropertyOption';
import type { SingleValueProperty } from './SingleValueProperty';
import {
    SingleValuePropertyFromJSON,
    SingleValuePropertyFromJSONTyped,
    SingleValuePropertyToJSON,
} from './SingleValueProperty';

/**
 * A number property type.
 * @export
 * @interface NumberProperty
 */
export interface NumberProperty extends SingleValueProperty {
    /**
     * The maximum property value.
     * @type {number}
     * @memberof NumberProperty
     */
    maxValue?: number;
    /**
     * The minimum property value.
     * @type {number}
     * @memberof NumberProperty
     */
    minValue?: number;
    /**
     * The number value precision.
     * @type {number}
     * @memberof NumberProperty
     */
    numberPrecision?: number;
    /**
     * 
     * @type {string}
     * @memberof NumberProperty
     */
    type: string;
}

/**
 * Check if a given object implements the NumberProperty interface.
 */
export function instanceOfNumberProperty(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "type" in value;

    return isInstance;
}

export function NumberPropertyFromJSON(json: any): NumberProperty {
    return NumberPropertyFromJSONTyped(json, false);
}

export function NumberPropertyFromJSONTyped(json: any, ignoreDiscriminator: boolean): NumberProperty {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        ...SingleValuePropertyFromJSONTyped(json, ignoreDiscriminator),
        'maxValue': !exists(json, 'maxValue') ? undefined : json['maxValue'],
        'minValue': !exists(json, 'minValue') ? undefined : json['minValue'],
        'numberPrecision': !exists(json, 'numberPrecision') ? undefined : json['numberPrecision'],
        'type': json['type'],
    };
}

export function NumberPropertyToJSON(value?: NumberProperty | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        ...SingleValuePropertyToJSON(value),
        'maxValue': value.maxValue,
        'minValue': value.minValue,
        'numberPrecision': value.numberPrecision,
        'type': value.type,
    };
}

