/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {AnyProperty} from "./AnyProperty";
import {BooleanProperty} from "./BooleanProperty";
import {DateProperty} from "./DateProperty";
import {DateTimeProperty} from "./DateTimeProperty";
import {IntegerProperty} from "./IntegerProperty";
import {NumberProperty} from "./NumberProperty";
import {StringProperty} from "./StringProperty";
import {ObjectProperty} from "./ObjectProperty";
import type { DisplayOption } from './DisplayOption';
import {
    DisplayOptionFromJSON,
    DisplayOptionFromJSONTyped,
    DisplayOptionToJSON,
} from './DisplayOption';
import type { ValueProperty } from './ValueProperty';
import {
    ValuePropertyFromJSON,
    ValuePropertyFromJSONTyped,
    ValuePropertyToJSON,
} from './ValueProperty';

/**
 * An array property type.
 * @export
 * @interface ArrayProperty
 */
export interface ArrayProperty extends ValueProperty {
    /**
     * Types of the array items.
     * @type {Array<AnyProperty | ArrayProperty | BooleanProperty | DateProperty | DateTimeProperty | IntegerProperty | NumberProperty | StringProperty | ObjectProperty>}
     * @memberof ArrayProperty
     */
    items?: Array<AnyProperty | ArrayProperty | BooleanProperty | DateProperty | DateTimeProperty | IntegerProperty | NumberProperty | StringProperty | ObjectProperty>;
    /**
     *
     * @type {string}
     * @memberof ArrayProperty
     */
    type: string;
}

/**
 * Check if a given object implements the ArrayProperty interface.
 */
export function instanceOfArrayProperty(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "type" in value;

    return isInstance;
}

export function ArrayPropertyFromJSON(json: any): ArrayProperty {
    return ArrayPropertyFromJSONTyped(json, false);
}

export function ArrayPropertyFromJSONTyped(json: any, ignoreDiscriminator: boolean): ArrayProperty {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        ...ValuePropertyFromJSONTyped(json, ignoreDiscriminator),
        'items': !exists(json, 'items') ? undefined : ((json['items'] as Array<any>)),
        'type': json['type'],
    };
}

export function ArrayPropertyToJSON(value?: ArrayProperty | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        ...ValuePropertyToJSON(value),
        'items': value.items === undefined ? undefined : ((value.items as Array<any>)),
        'type': value.type,
    };
}

