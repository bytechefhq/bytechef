/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { DisplayOption } from './DisplayOption';
import {
    DisplayOptionFromJSON,
    DisplayOptionFromJSONTyped,
    DisplayOptionToJSON,
} from './DisplayOption';
import type { PropertyOption } from './PropertyOption';
import {
    PropertyOptionFromJSON,
    PropertyOptionFromJSONTyped,
    PropertyOptionToJSON,
} from './PropertyOption';
import type { SingleValueProperty } from './SingleValueProperty';
import {
    SingleValuePropertyFromJSON,
    SingleValuePropertyFromJSONTyped,
    SingleValuePropertyToJSON,
} from './SingleValueProperty';

/**
 * A boolean property type.
 * @export
 * @interface BooleanProperty
 */
export interface BooleanProperty extends SingleValueProperty {
    /**
     * 
     * @type {string}
     * @memberof BooleanProperty
     */
    type: string;
}

/**
 * Check if a given object implements the BooleanProperty interface.
 */
export function instanceOfBooleanProperty(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "type" in value;

    return isInstance;
}

export function BooleanPropertyFromJSON(json: any): BooleanProperty {
    return BooleanPropertyFromJSONTyped(json, false);
}

export function BooleanPropertyFromJSONTyped(json: any, ignoreDiscriminator: boolean): BooleanProperty {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        ...SingleValuePropertyFromJSONTyped(json, ignoreDiscriminator),
        'type': json['type'],
    };
}

export function BooleanPropertyToJSON(value?: BooleanProperty | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        ...SingleValuePropertyToJSON(value),
        'type': value.type,
    };
}

