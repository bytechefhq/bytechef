/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { DisplayOption } from './DisplayOption';
import {
    DisplayOptionFromJSON,
    DisplayOptionFromJSONTyped,
    DisplayOptionToJSON,
} from './DisplayOption';

import {
     ArrayPropertyFromJSONTyped,
     BooleanPropertyFromJSONTyped,
     DatePropertyFromJSONTyped,
     DateTimePropertyFromJSONTyped,
     IntegerPropertyFromJSONTyped,
     NullPropertyFromJSONTyped,
     NumberPropertyFromJSONTyped,
     ObjectPropertyFromJSONTyped,
     OneOfPropertyFromJSONTyped,
     StringPropertyFromJSONTyped
} from './';

/**
 * A base property.
 * @export
 * @interface Property
 */
export interface Property {
    /**
     * If the property should be grouped under advanced options.
     * @type {boolean}
     * @memberof Property
     */
    advancedOption?: boolean;
    /**
     * The property description.
     * @type {string}
     * @memberof Property
     */
    description?: string;
    /**
     * 
     * @type {DisplayOption}
     * @memberof Property
     */
    displayOption?: DisplayOption;
    /**
     * If the property should be hidden or not.
     * @type {boolean}
     * @memberof Property
     */
    hidden?: boolean;
    /**
     * The property label.
     * @type {string}
     * @memberof Property
     */
    label?: string;
    /**
     * Additional data that can be used during processing.
     * @type {{ [key: string]: Array<object>; }}
     * @memberof Property
     */
    metadata?: { [key: string]: Array<object>; };
    /**
     * The property name.
     * @type {string}
     * @memberof Property
     */
    name?: string;
    /**
     * If the property is required or not.
     * @type {boolean}
     * @memberof Property
     */
    required?: boolean;
}

/**
 * Check if a given object implements the Property interface.
 */
export function instanceOfProperty(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function PropertyFromJSON(json: any): Property {
    return PropertyFromJSONTyped(json, false);
}

export function PropertyFromJSONTyped(json: any, ignoreDiscriminator: boolean): Property {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    if (!ignoreDiscriminator) {
        if (json['type'] === 'ARRAY') {
            return ArrayPropertyFromJSONTyped(json, true);
        }
        if (json['type'] === 'BOOLEAN') {
            return BooleanPropertyFromJSONTyped(json, true);
        }
        if (json['type'] === 'DATE') {
            return DatePropertyFromJSONTyped(json, true);
        }
        if (json['type'] === 'DATE_TIME') {
            return DateTimePropertyFromJSONTyped(json, true);
        }
        if (json['type'] === 'INTEGER') {
            return IntegerPropertyFromJSONTyped(json, true);
        }
        if (json['type'] === 'NULL') {
            return NullPropertyFromJSONTyped(json, true);
        }
        if (json['type'] === 'NUMBER') {
            return NumberPropertyFromJSONTyped(json, true);
        }
        if (json['type'] === 'OBJECT') {
            return ObjectPropertyFromJSONTyped(json, true);
        }
        if (json['type'] === 'ONE_OF') {
            return OneOfPropertyFromJSONTyped(json, true);
        }
        if (json['type'] === 'STRING') {
            return StringPropertyFromJSONTyped(json, true);
        }
    }
    return {
        
        'advancedOption': !exists(json, 'advancedOption') ? undefined : json['advancedOption'],
        'description': !exists(json, 'description') ? undefined : json['description'],
        'displayOption': !exists(json, 'displayOption') ? undefined : DisplayOptionFromJSON(json['displayOption']),
        'hidden': !exists(json, 'hidden') ? undefined : json['hidden'],
        'label': !exists(json, 'label') ? undefined : json['label'],
        'metadata': !exists(json, 'metadata') ? undefined : json['metadata'],
        'name': !exists(json, 'name') ? undefined : json['name'],
        'required': !exists(json, 'required') ? undefined : json['required'],
    };
}

export function PropertyToJSON(value?: Property | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'advancedOption': value.advancedOption,
        'description': value.description,
        'displayOption': DisplayOptionToJSON(value.displayOption),
        'hidden': value.hidden,
        'label': value.label,
        'metadata': value.metadata,
        'name': value.name,
        'required': value.required,
    };
}

