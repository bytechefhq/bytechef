/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Action } from './Action';
import {
    ActionFromJSON,
    ActionFromJSONTyped,
    ActionToJSON,
} from './Action';
import type { ComponentDisplay } from './ComponentDisplay';
import {
    ComponentDisplayFromJSON,
    ComponentDisplayFromJSONTyped,
    ComponentDisplayToJSON,
} from './ComponentDisplay';
import type { ConnectionDefinition } from './ConnectionDefinition';
import {
    ConnectionDefinitionFromJSON,
    ConnectionDefinitionFromJSONTyped,
    ConnectionDefinitionToJSON,
} from './ConnectionDefinition';
import type { Resources } from './Resources';
import {
    ResourcesFromJSON,
    ResourcesFromJSONTyped,
    ResourcesToJSON,
} from './Resources';

/**
 * A component contains a set of reusable code(actions) that accomplish specific tasks, triggers(TODO) and connections if there is a need for a connection to an outside service.
 * @export
 * @interface ComponentDefinition
 */
export interface ComponentDefinition {
    /**
     * The list of all available actions the component can perform.
     * @type {Array<Action>}
     * @memberof ComponentDefinition
     */
    actions?: Array<Action>;
    /**
     * The list of possible connections to an outside service.
     * @type {Array<ConnectionDefinition>}
     * @memberof ComponentDefinition
     */
    connections?: Array<ConnectionDefinition>;
    /**
     * 
     * @type {ComponentDisplay}
     * @memberof ComponentDefinition
     */
    display?: ComponentDisplay;
    /**
     * The connection name.
     * @type {string}
     * @memberof ComponentDefinition
     */
    name?: string;
    /**
     * 
     * @type {Resources}
     * @memberof ComponentDefinition
     */
    resources?: Resources;
    /**
     * 
     * @type {number}
     * @memberof ComponentDefinition
     */
    version?: number;
}

/**
 * Check if a given object implements the ComponentDefinition interface.
 */
export function instanceOfComponentDefinition(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ComponentDefinitionFromJSON(json: any): ComponentDefinition {
    return ComponentDefinitionFromJSONTyped(json, false);
}

export function ComponentDefinitionFromJSONTyped(json: any, ignoreDiscriminator: boolean): ComponentDefinition {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'actions': !exists(json, 'actions') ? undefined : ((json['actions'] as Array<any>).map(ActionFromJSON)),
        'connections': !exists(json, 'connections') ? undefined : ((json['connections'] as Array<any>).map(ConnectionDefinitionFromJSON)),
        'display': !exists(json, 'display') ? undefined : ComponentDisplayFromJSON(json['display']),
        'name': !exists(json, 'name') ? undefined : json['name'],
        'resources': !exists(json, 'resources') ? undefined : ResourcesFromJSON(json['resources']),
        'version': !exists(json, 'version') ? undefined : json['version'],
    };
}

export function ComponentDefinitionToJSON(value?: ComponentDefinition | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'actions': value.actions === undefined ? undefined : ((value.actions as Array<any>).map(ActionToJSON)),
        'connections': value.connections === undefined ? undefined : ((value.connections as Array<any>).map(ConnectionDefinitionToJSON)),
        'display': ComponentDisplayToJSON(value.display),
        'name': value.name,
        'resources': ResourcesToJSON(value.resources),
        'version': value.version,
    };
}

