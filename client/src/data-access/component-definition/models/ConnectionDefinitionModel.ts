/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { AuthorizationModel } from './AuthorizationModel';
import {
    AuthorizationModelFromJSON,
    AuthorizationModelFromJSONTyped,
    AuthorizationModelToJSON,
} from './AuthorizationModel';
import type { DisplayModel } from './DisplayModel';
import {
    DisplayModelFromJSON,
    DisplayModelFromJSONTyped,
    DisplayModelToJSON,
} from './DisplayModel';
import type { ResourcesModel } from './ResourcesModel';
import {
    ResourcesModelFromJSON,
    ResourcesModelFromJSONTyped,
    ResourcesModelToJSON,
} from './ResourcesModel';
import type { ValuePropertyModel } from './ValuePropertyModel';
import {
    ValuePropertyModelFromJSON,
    ValuePropertyModelFromJSONTyped,
    ValuePropertyModelToJSON,
} from './ValuePropertyModel';

/**
 * A connection to an outside service.
 * @export
 * @interface ConnectionDefinitionModel
 */
export interface ConnectionDefinitionModel {
    /**
     * 
     * @type {Array<AuthorizationModel>}
     * @memberof ConnectionDefinitionModel
     */
    authorizations?: Array<AuthorizationModel>;
    /**
     * The name of a component this connection can be used for.
     * @type {string}
     * @memberof ConnectionDefinitionModel
     */
    componentName?: string;
    /**
     * The version of a component this connection can be used for.
     * @type {string}
     * @memberof ConnectionDefinitionModel
     */
    componentVersion?: string;
    /**
     * 
     * @type {DisplayModel}
     * @memberof ConnectionDefinitionModel
     */
    display?: DisplayModel;
    /**
     * Properties of the connection.
     * @type {Array<ValuePropertyModel>}
     * @memberof ConnectionDefinitionModel
     */
    properties?: Array<ValuePropertyModel>;
    /**
     * 
     * @type {ResourcesModel}
     * @memberof ConnectionDefinitionModel
     */
    resources?: ResourcesModel;
    /**
     * Additional explanation.
     * @type {string}
     * @memberof ConnectionDefinitionModel
     */
    subtitle?: string;
    /**
     * 
     * @type {number}
     * @memberof ConnectionDefinitionModel
     */
    version?: number;
}

/**
 * Check if a given object implements the ConnectionDefinitionModel interface.
 */
export function instanceOfConnectionDefinitionModel(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ConnectionDefinitionModelFromJSON(json: any): ConnectionDefinitionModel {
    return ConnectionDefinitionModelFromJSONTyped(json, false);
}

export function ConnectionDefinitionModelFromJSONTyped(json: any, ignoreDiscriminator: boolean): ConnectionDefinitionModel {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'authorizations': !exists(json, 'authorizations') ? undefined : ((json['authorizations'] as Array<any>).map(AuthorizationModelFromJSON)),
        'componentName': !exists(json, 'componentName') ? undefined : json['componentName'],
        'componentVersion': !exists(json, 'componentVersion') ? undefined : json['componentVersion'],
        'display': !exists(json, 'display') ? undefined : DisplayModelFromJSON(json['display']),
        'properties': !exists(json, 'properties') ? undefined : ((json['properties'] as Array<any>).map(ValuePropertyModelFromJSON)),
        'resources': !exists(json, 'resources') ? undefined : ResourcesModelFromJSON(json['resources']),
        'subtitle': !exists(json, 'subtitle') ? undefined : json['subtitle'],
        'version': !exists(json, 'version') ? undefined : json['version'],
    };
}

export function ConnectionDefinitionModelToJSON(value?: ConnectionDefinitionModel | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'authorizations': value.authorizations === undefined ? undefined : ((value.authorizations as Array<any>).map(AuthorizationModelToJSON)),
        'componentName': value.componentName,
        'componentVersion': value.componentVersion,
        'display': DisplayModelToJSON(value.display),
        'properties': value.properties === undefined ? undefined : ((value.properties as Array<any>).map(ValuePropertyModelToJSON)),
        'resources': ResourcesModelToJSON(value.resources),
        'subtitle': value.subtitle,
        'version': value.version,
    };
}

