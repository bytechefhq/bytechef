/* tslint:disable */
/* eslint-disable */
/**
 * The Automation Configuration Internal API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { ProjectInstanceWorkflow } from './ProjectInstanceWorkflow';
import {
    ProjectInstanceWorkflowFromJSON,
    ProjectInstanceWorkflowFromJSONTyped,
    ProjectInstanceWorkflowToJSON,
    ProjectInstanceWorkflowToJSONTyped,
} from './ProjectInstanceWorkflow';
import type { Environment } from './Environment';
import {
    EnvironmentFromJSON,
    EnvironmentFromJSONTyped,
    EnvironmentToJSON,
    EnvironmentToJSONTyped,
} from './Environment';
import type { Tag } from './Tag';
import {
    TagFromJSON,
    TagFromJSONTyped,
    TagToJSON,
    TagToJSONTyped,
} from './Tag';

/**
 * Contains configurations and connections required for the execution of project workflows.
 * @export
 * @interface ProjectInstance
 */
export interface ProjectInstance {
    /**
     * The created by.
     * @type {string}
     * @memberof ProjectInstance
     */
    readonly createdBy?: string;
    /**
     * The created date.
     * @type {Date}
     * @memberof ProjectInstance
     */
    readonly createdDate?: Date;
    /**
     * The description of a project instance.
     * @type {string}
     * @memberof ProjectInstance
     */
    description?: string;
    /**
     * If a project instance is enabled or not.
     * @type {boolean}
     * @memberof ProjectInstance
     */
    enabled?: boolean;
    /**
     * 
     * @type {Environment}
     * @memberof ProjectInstance
     */
    environment?: Environment;
    /**
     * The id of a project instance.
     * @type {number}
     * @memberof ProjectInstance
     */
    readonly id?: number;
    /**
     * The last execution date.
     * @type {Date}
     * @memberof ProjectInstance
     */
    readonly lastExecutionDate?: Date;
    /**
     * The last modified by.
     * @type {string}
     * @memberof ProjectInstance
     */
    readonly lastModifiedBy?: string;
    /**
     * The last modified date.
     * @type {Date}
     * @memberof ProjectInstance
     */
    readonly lastModifiedDate?: Date;
    /**
     * The name of a project instance.
     * @type {string}
     * @memberof ProjectInstance
     */
    name: string;
    /**
     * The id of a project.
     * @type {number}
     * @memberof ProjectInstance
     */
    projectId?: number;
    /**
     * The version of a project.
     * @type {number}
     * @memberof ProjectInstance
     */
    projectVersion?: number;
    /**
     * 
     * @type {object}
     * @memberof ProjectInstance
     */
    readonly project?: object;
    /**
     * 
     * @type {Array<ProjectInstanceWorkflow>}
     * @memberof ProjectInstance
     */
    projectInstanceWorkflows?: Array<ProjectInstanceWorkflow>;
    /**
     * 
     * @type {Array<Tag>}
     * @memberof ProjectInstance
     */
    tags?: Array<Tag>;
    /**
     * 
     * @type {number}
     * @memberof ProjectInstance
     */
    version?: number;
}



/**
 * Check if a given object implements the ProjectInstance interface.
 */
export function instanceOfProjectInstance(value: object): value is ProjectInstance {
    if (!('name' in value) || value['name'] === undefined) return false;
    return true;
}

export function ProjectInstanceFromJSON(json: any): ProjectInstance {
    return ProjectInstanceFromJSONTyped(json, false);
}

export function ProjectInstanceFromJSONTyped(json: any, ignoreDiscriminator: boolean): ProjectInstance {
    if (json == null) {
        return json;
    }
    return {
        
        'createdBy': json['createdBy'] == null ? undefined : json['createdBy'],
        'createdDate': json['createdDate'] == null ? undefined : (new Date(json['createdDate'])),
        'description': json['description'] == null ? undefined : json['description'],
        'enabled': json['enabled'] == null ? undefined : json['enabled'],
        'environment': json['environment'] == null ? undefined : EnvironmentFromJSON(json['environment']),
        'id': json['id'] == null ? undefined : json['id'],
        'lastExecutionDate': json['lastExecutionDate'] == null ? undefined : (new Date(json['lastExecutionDate'])),
        'lastModifiedBy': json['lastModifiedBy'] == null ? undefined : json['lastModifiedBy'],
        'lastModifiedDate': json['lastModifiedDate'] == null ? undefined : (new Date(json['lastModifiedDate'])),
        'name': json['name'],
        'projectId': json['projectId'] == null ? undefined : json['projectId'],
        'projectVersion': json['projectVersion'] == null ? undefined : json['projectVersion'],
        'project': json['project'] == null ? undefined : json['project'],
        'projectInstanceWorkflows': json['projectInstanceWorkflows'] == null ? undefined : ((json['projectInstanceWorkflows'] as Array<any>).map(ProjectInstanceWorkflowFromJSON)),
        'tags': json['tags'] == null ? undefined : ((json['tags'] as Array<any>).map(TagFromJSON)),
        'version': json['__version'] == null ? undefined : json['__version'],
    };
}

export function ProjectInstanceToJSON(json: any): ProjectInstance {
    return ProjectInstanceToJSONTyped(json, false);
}

export function ProjectInstanceToJSONTyped(value?: Omit<ProjectInstance, 'createdBy'|'createdDate'|'id'|'lastExecutionDate'|'lastModifiedBy'|'lastModifiedDate'|'project'> | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'description': value['description'],
        'enabled': value['enabled'],
        'environment': EnvironmentToJSON(value['environment']),
        'name': value['name'],
        'projectId': value['projectId'],
        'projectVersion': value['projectVersion'],
        'projectInstanceWorkflows': value['projectInstanceWorkflows'] == null ? undefined : ((value['projectInstanceWorkflows'] as Array<any>).map(ProjectInstanceWorkflowToJSON)),
        'tags': value['tags'] == null ? undefined : ((value['tags'] as Array<any>).map(TagToJSON)),
        '__version': value['version'],
    };
}

