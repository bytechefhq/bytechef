/* tslint:disable */
/* eslint-disable */
/**
 * The Automation Configuration Internal API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { ProjectStatus } from './ProjectStatus';
import {
    ProjectStatusFromJSON,
    ProjectStatusFromJSONTyped,
    ProjectStatusToJSON,
    ProjectStatusToJSONTyped,
} from './ProjectStatus';
import type { Category } from './Category';
import {
    CategoryFromJSON,
    CategoryFromJSONTyped,
    CategoryToJSON,
    CategoryToJSONTyped,
} from './Category';
import type { Tag } from './Tag';
import {
    TagFromJSON,
    TagFromJSONTyped,
    TagToJSON,
    TagToJSONTyped,
} from './Tag';

/**
 * A group of workflows that make one logical project.
 * @export
 * @interface Project
 */
export interface Project {
    /**
     * The created by.
     * @type {string}
     * @memberof Project
     */
    readonly createdBy?: string;
    /**
     * The created date.
     * @type {Date}
     * @memberof Project
     */
    readonly createdDate?: Date;
    /**
     * The description of a project.
     * @type {string}
     * @memberof Project
     */
    description?: string;
    /**
     * The id of a project.
     * @type {number}
     * @memberof Project
     */
    readonly id?: number;
    /**
     * The last modified by.
     * @type {string}
     * @memberof Project
     */
    readonly lastModifiedBy?: string;
    /**
     * The last modified date.
     * @type {Date}
     * @memberof Project
     */
    readonly lastModifiedDate?: Date;
    /**
     * The name of a project.
     * @type {string}
     * @memberof Project
     */
    name: string;
    /**
     * The last published date.
     * @type {Date}
     * @memberof Project
     */
    readonly lastPublishedDate?: Date;
    /**
     * 
     * @type {ProjectStatus}
     * @memberof Project
     */
    lastStatus?: ProjectStatus;
    /**
     * The last version of a project.
     * @type {number}
     * @memberof Project
     */
    readonly lastProjectVersion?: number;
    /**
     * 
     * @type {Category}
     * @memberof Project
     */
    category?: Category;
    /**
     * The project workflow ids belonging to this project.
     * @type {Array<number>}
     * @memberof Project
     */
    projectWorkflowIds?: Array<number>;
    /**
     * 
     * @type {Array<Tag>}
     * @memberof Project
     */
    tags?: Array<Tag>;
    /**
     * The workspace id.
     * @type {number}
     * @memberof Project
     */
    workspaceId: number;
    /**
     * 
     * @type {number}
     * @memberof Project
     */
    version?: number;
}



/**
 * Check if a given object implements the Project interface.
 */
export function instanceOfProject(value: object): value is Project {
    if (!('name' in value) || value['name'] === undefined) return false;
    if (!('workspaceId' in value) || value['workspaceId'] === undefined) return false;
    return true;
}

export function ProjectFromJSON(json: any): Project {
    return ProjectFromJSONTyped(json, false);
}

export function ProjectFromJSONTyped(json: any, ignoreDiscriminator: boolean): Project {
    if (json == null) {
        return json;
    }
    return {
        
        'createdBy': json['createdBy'] == null ? undefined : json['createdBy'],
        'createdDate': json['createdDate'] == null ? undefined : (new Date(json['createdDate'])),
        'description': json['description'] == null ? undefined : json['description'],
        'id': json['id'] == null ? undefined : json['id'],
        'lastModifiedBy': json['lastModifiedBy'] == null ? undefined : json['lastModifiedBy'],
        'lastModifiedDate': json['lastModifiedDate'] == null ? undefined : (new Date(json['lastModifiedDate'])),
        'name': json['name'],
        'lastPublishedDate': json['lastPublishedDate'] == null ? undefined : (new Date(json['lastPublishedDate'])),
        'lastStatus': json['lastStatus'] == null ? undefined : ProjectStatusFromJSON(json['lastStatus']),
        'lastProjectVersion': json['lastProjectVersion'] == null ? undefined : json['lastProjectVersion'],
        'category': json['category'] == null ? undefined : CategoryFromJSON(json['category']),
        'projectWorkflowIds': json['projectWorkflowIds'] == null ? undefined : json['projectWorkflowIds'],
        'tags': json['tags'] == null ? undefined : ((json['tags'] as Array<any>).map(TagFromJSON)),
        'workspaceId': json['workspaceId'],
        'version': json['__version'] == null ? undefined : json['__version'],
    };
}

export function ProjectToJSON(json: any): Project {
    return ProjectToJSONTyped(json, false);
}

export function ProjectToJSONTyped(value?: Omit<Project, 'createdBy'|'createdDate'|'id'|'lastModifiedBy'|'lastModifiedDate'|'lastPublishedDate'|'lastProjectVersion'> | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'description': value['description'],
        'name': value['name'],
        'lastStatus': ProjectStatusToJSON(value['lastStatus']),
        'category': CategoryToJSON(value['category']),
        'projectWorkflowIds': value['projectWorkflowIds'],
        'tags': value['tags'] == null ? undefined : ((value['tags'] as Array<any>).map(TagToJSON)),
        'workspaceId': value['workspaceId'],
        '__version': value['version'],
    };
}

