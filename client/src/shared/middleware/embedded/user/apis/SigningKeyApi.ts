/* tslint:disable */
/* eslint-disable */
/**
 * The Embedded User Internal API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateSigningKey200ResponseModel,
  SigningKeyModel,
} from '../models/index';
import {
    CreateSigningKey200ResponseModelFromJSON,
    CreateSigningKey200ResponseModelToJSON,
    SigningKeyModelFromJSON,
    SigningKeyModelToJSON,
} from '../models/index';

export interface CreateSigningKeyRequest {
    signingKeyModel: Omit<SigningKeyModel, 'createdBy'|'createdDate'|'id'|'keyId'|'lastModifiedBy'|'lastModifiedDate'|'lastUsedDate'>;
}

export interface DeleteSigningKeyRequest {
    id: number;
}

export interface GetSigningKeyRequest {
    id: number;
}

export interface UpdateSigningKeyRequest {
    id: number;
    signingKeyModel: Omit<SigningKeyModel, 'createdBy'|'createdDate'|'id'|'keyId'|'lastModifiedBy'|'lastModifiedDate'|'lastUsedDate'>;
}

/**
 * 
 */
export class SigningKeyApi extends runtime.BaseAPI {

    /**
     * Create a new Signing key.
     * Create a new Signing key
     */
    async createSigningKeyRaw(requestParameters: CreateSigningKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateSigningKey200ResponseModel>> {
        if (requestParameters['signingKeyModel'] == null) {
            throw new runtime.RequiredError(
                'signingKeyModel',
                'Required parameter "signingKeyModel" was null or undefined when calling createSigningKey().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/signing-keys`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SigningKeyModelToJSON(requestParameters['signingKeyModel']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateSigningKey200ResponseModelFromJSON(jsonValue));
    }

    /**
     * Create a new Signing key.
     * Create a new Signing key
     */
    async createSigningKey(requestParameters: CreateSigningKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateSigningKey200ResponseModel> {
        const response = await this.createSigningKeyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete an Signing key.
     * Delete an Signing key
     */
    async deleteSigningKeyRaw(requestParameters: DeleteSigningKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deleteSigningKey().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/signing-keys/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete an Signing key.
     * Delete an Signing key
     */
    async deleteSigningKey(requestParameters: DeleteSigningKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteSigningKeyRaw(requestParameters, initOverrides);
    }

    /**
     * Get an Signing key by id.
     * Get an Signing key by id
     */
    async getSigningKeyRaw(requestParameters: GetSigningKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SigningKeyModel>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getSigningKey().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/signing-keys/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SigningKeyModelFromJSON(jsonValue));
    }

    /**
     * Get an Signing key by id.
     * Get an Signing key by id
     */
    async getSigningKey(requestParameters: GetSigningKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SigningKeyModel> {
        const response = await this.getSigningKeyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Signing keys.
     * Get Signing keys
     */
    async getSigningKeysRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<SigningKeyModel>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/signing-keys`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(SigningKeyModelFromJSON));
    }

    /**
     * Get Signing keys.
     * Get Signing keys
     */
    async getSigningKeys(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<SigningKeyModel>> {
        const response = await this.getSigningKeysRaw(initOverrides);
        return await response.value();
    }

    /**
     * Update an existing Signing key.
     * Update an existing Signing key
     */
    async updateSigningKeyRaw(requestParameters: UpdateSigningKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SigningKeyModel>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling updateSigningKey().'
            );
        }

        if (requestParameters['signingKeyModel'] == null) {
            throw new runtime.RequiredError(
                'signingKeyModel',
                'Required parameter "signingKeyModel" was null or undefined when calling updateSigningKey().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/signing-keys/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: SigningKeyModelToJSON(requestParameters['signingKeyModel']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SigningKeyModelFromJSON(jsonValue));
    }

    /**
     * Update an existing Signing key.
     * Update an existing Signing key
     */
    async updateSigningKey(requestParameters: UpdateSigningKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SigningKeyModel> {
        const response = await this.updateSigningKeyRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
