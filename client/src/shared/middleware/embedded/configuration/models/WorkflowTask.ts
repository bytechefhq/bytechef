/* tslint:disable */
/* eslint-disable */
/**
 * The Embedded Configuration Internal API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { DataStreamComponent } from './DataStreamComponent';
import {
    DataStreamComponentFromJSON,
    DataStreamComponentFromJSONTyped,
    DataStreamComponentToJSON,
    DataStreamComponentToJSONTyped,
} from './DataStreamComponent';
import type { WorkflowConnection } from './WorkflowConnection';
import {
    WorkflowConnectionFromJSON,
    WorkflowConnectionFromJSONTyped,
    WorkflowConnectionToJSON,
    WorkflowConnectionToJSONTyped,
} from './WorkflowConnection';

/**
 * Represents a definition of a workflow task.
 * @export
 * @interface WorkflowTask
 */
export interface WorkflowTask {
    /**
     * 
     * @type {Array<WorkflowConnection>}
     * @memberof WorkflowTask
     */
    readonly connections?: Array<WorkflowConnection>;
    /**
     * The description of the task.
     * @type {string}
     * @memberof WorkflowTask
     */
    description?: string;
    /**
     * 
     * @type {DataStreamComponent}
     * @memberof WorkflowTask
     */
    destination?: DataStreamComponent;
    /**
     * The (optional) list of tasks that are to be executed after execution of a task -- regardless of whether it had failed or not.
     * @type {Array<WorkflowTask>}
     * @memberof WorkflowTask
     */
    finalize?: Array<WorkflowTask>;
    /**
     * The human-readable description of the task.
     * @type {string}
     * @memberof WorkflowTask
     */
    label?: string;
    /**
     * Key-value map of metadata.
     * @type {{ [key: string]: any; }}
     * @memberof WorkflowTask
     */
    metadata?: { [key: string]: any; };
    /**
     * The identifier name of the task. Task names are used for assigning the output of one task so it can be later used by subsequent tasks.
     * @type {string}
     * @memberof WorkflowTask
     */
    name: string;
    /**
     * Defines the name of the type of the node that the task execution will be routed to. For instance, if the node value is "encoder", then the task will be routed to the "encoder" queue which is presumably subscribed to by worker nodes of "encoder" type.
     * @type {string}
     * @memberof WorkflowTask
     */
    node?: string;
    /**
     * Key-value map of task parameters.
     * @type {{ [key: string]: any; }}
     * @memberof WorkflowTask
     */
    parameters?: { [key: string]: any; };
    /**
     * The (optional) list of tasks that are to be executed after the successful execution of a task.
     * @type {Array<WorkflowTask>}
     * @memberof WorkflowTask
     */
    post?: Array<WorkflowTask>;
    /**
     * The (optional) list of tasks that are to be executed prior to a task.
     * @type {Array<WorkflowTask>}
     * @memberof WorkflowTask
     */
    pre?: Array<WorkflowTask>;
    /**
     * 
     * @type {DataStreamComponent}
     * @memberof WorkflowTask
     */
    source?: DataStreamComponent;
    /**
     * The timeout expression which describes when a task should be deemed as timed-out.
     * @type {string}
     * @memberof WorkflowTask
     */
    timeout?: string;
    /**
     * The type of the task.
     * @type {string}
     * @memberof WorkflowTask
     */
    type: string;
}

/**
 * Check if a given object implements the WorkflowTask interface.
 */
export function instanceOfWorkflowTask(value: object): value is WorkflowTask {
    if (!('name' in value) || value['name'] === undefined) return false;
    if (!('type' in value) || value['type'] === undefined) return false;
    return true;
}

export function WorkflowTaskFromJSON(json: any): WorkflowTask {
    return WorkflowTaskFromJSONTyped(json, false);
}

export function WorkflowTaskFromJSONTyped(json: any, ignoreDiscriminator: boolean): WorkflowTask {
    if (json == null) {
        return json;
    }
    return {
        
        'connections': json['connections'] == null ? undefined : ((json['connections'] as Array<any>).map(WorkflowConnectionFromJSON)),
        'description': json['description'] == null ? undefined : json['description'],
        'destination': json['destination'] == null ? undefined : DataStreamComponentFromJSON(json['destination']),
        'finalize': json['finalize'] == null ? undefined : ((json['finalize'] as Array<any>).map(WorkflowTaskFromJSON)),
        'label': json['label'] == null ? undefined : json['label'],
        'metadata': json['metadata'] == null ? undefined : json['metadata'],
        'name': json['name'],
        'node': json['node'] == null ? undefined : json['node'],
        'parameters': json['parameters'] == null ? undefined : json['parameters'],
        'post': json['post'] == null ? undefined : ((json['post'] as Array<any>).map(WorkflowTaskFromJSON)),
        'pre': json['pre'] == null ? undefined : ((json['pre'] as Array<any>).map(WorkflowTaskFromJSON)),
        'source': json['source'] == null ? undefined : DataStreamComponentFromJSON(json['source']),
        'timeout': json['timeout'] == null ? undefined : json['timeout'],
        'type': json['type'],
    };
}

export function WorkflowTaskToJSON(json: any): WorkflowTask {
    return WorkflowTaskToJSONTyped(json, false);
}

export function WorkflowTaskToJSONTyped(value?: Omit<WorkflowTask, 'connections'> | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'description': value['description'],
        'destination': DataStreamComponentToJSON(value['destination']),
        'finalize': value['finalize'] == null ? undefined : ((value['finalize'] as Array<any>).map(WorkflowTaskToJSON)),
        'label': value['label'],
        'metadata': value['metadata'],
        'name': value['name'],
        'node': value['node'],
        'parameters': value['parameters'],
        'post': value['post'] == null ? undefined : ((value['post'] as Array<any>).map(WorkflowTaskToJSON)),
        'pre': value['pre'] == null ? undefined : ((value['pre'] as Array<any>).map(WorkflowTaskToJSON)),
        'source': DataStreamComponentToJSON(value['source']),
        'timeout': value['timeout'],
        'type': value['type'],
    };
}

