/* tslint:disable */
/* eslint-disable */
/**
 * The Embedded Configuration API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ConnectedUserModel,
  CredentialStatusModel,
  PageModel,
} from '../models/index';
import {
    ConnectedUserModelFromJSON,
    ConnectedUserModelToJSON,
    CredentialStatusModelFromJSON,
    CredentialStatusModelToJSON,
    PageModelFromJSON,
    PageModelToJSON,
} from '../models/index';

export interface DeleteConnectedUserRequest {
    id: number;
}

export interface EnableConnectedUserRequest {
    id: number;
    enable: boolean;
}

export interface GetConnectedUserRequest {
    id: number;
}

export interface GetConnectedUsersRequest {
    search?: string;
    credentialStatus?: CredentialStatusModel;
    integrationId?: number;
    createDateFrom?: Date;
    createDateTo?: Date;
    pageNumber?: number;
}

/**
 * 
 */
export class ConnectedUserApi extends runtime.BaseAPI {

    /**
     * Delete a connected user.
     * Delete a connected user
     */
    async deleteConnectedUserRaw(requestParameters: DeleteConnectedUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deleteConnectedUser().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/connected-users/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a connected user.
     * Delete a connected user
     */
    async deleteConnectedUser(requestParameters: DeleteConnectedUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteConnectedUserRaw(requestParameters, initOverrides);
    }

    /**
     * Enable/disable a connected user.
     * Enable/disable a connected user
     */
    async enableConnectedUserRaw(requestParameters: EnableConnectedUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling enableConnectedUser().'
            );
        }

        if (requestParameters['enable'] == null) {
            throw new runtime.RequiredError(
                'enable',
                'Required parameter "enable" was null or undefined when calling enableConnectedUser().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/connected-users/{id}/enable/{enable}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))).replace(`{${"enable"}}`, encodeURIComponent(String(requestParameters['enable']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Enable/disable a connected user.
     * Enable/disable a connected user
     */
    async enableConnectedUser(requestParameters: EnableConnectedUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.enableConnectedUserRaw(requestParameters, initOverrides);
    }

    /**
     * Get a connected user.
     * Get a connected user
     */
    async getConnectedUserRaw(requestParameters: GetConnectedUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ConnectedUserModel>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getConnectedUser().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/connected-users/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ConnectedUserModelFromJSON(jsonValue));
    }

    /**
     * Get a connected user.
     * Get a connected user
     */
    async getConnectedUser(requestParameters: GetConnectedUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ConnectedUserModel> {
        const response = await this.getConnectedUserRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get all connected users.
     * Get all connected users
     */
    async getConnectedUsersRaw(requestParameters: GetConnectedUsersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PageModel>> {
        const queryParameters: any = {};

        if (requestParameters['search'] != null) {
            queryParameters['search'] = requestParameters['search'];
        }

        if (requestParameters['credentialStatus'] != null) {
            queryParameters['credentialStatus'] = requestParameters['credentialStatus'];
        }

        if (requestParameters['integrationId'] != null) {
            queryParameters['integrationId'] = requestParameters['integrationId'];
        }

        if (requestParameters['createDateFrom'] != null) {
            queryParameters['createDateFrom'] = (requestParameters['createDateFrom'] as any).toISOString().substring(0,10);
        }

        if (requestParameters['createDateTo'] != null) {
            queryParameters['createDateTo'] = (requestParameters['createDateTo'] as any).toISOString().substring(0,10);
        }

        if (requestParameters['pageNumber'] != null) {
            queryParameters['pageNumber'] = requestParameters['pageNumber'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/connected-users`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PageModelFromJSON(jsonValue));
    }

    /**
     * Get all connected users.
     * Get all connected users
     */
    async getConnectedUsers(requestParameters: GetConnectedUsersRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PageModel> {
        const response = await this.getConnectedUsersRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
