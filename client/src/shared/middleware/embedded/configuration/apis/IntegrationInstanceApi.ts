/* tslint:disable */
/* eslint-disable */
/**
 * The Embedded Configuration Internal API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  IntegrationInstanceModel,
} from '../models/index';
import {
    IntegrationInstanceModelFromJSON,
    IntegrationInstanceModelToJSON,
} from '../models/index';

export interface DeleteIntegrationInstanceRequest {
    id: number;
}

export interface EnableIntegrationInstanceRequest {
    id: number;
    enable: boolean;
}

export interface EnableIntegrationInstanceWorkflowRequest {
    id: number;
    workflowId: string;
    enable: boolean;
}

export interface GetIntegrationInstanceRequest {
    id: number;
}

/**
 * 
 */
export class IntegrationInstanceApi extends runtime.BaseAPI {

    /**
     * Delete an integration instance.
     * Delete an integration instance
     */
    async deleteIntegrationInstanceRaw(requestParameters: DeleteIntegrationInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deleteIntegrationInstance().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/integration-instances/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete an integration instance.
     * Delete an integration instance
     */
    async deleteIntegrationInstance(requestParameters: DeleteIntegrationInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteIntegrationInstanceRaw(requestParameters, initOverrides);
    }

    /**
     * Enable/disable an integration instance.
     * Enable/disable an integration instance
     */
    async enableIntegrationInstanceRaw(requestParameters: EnableIntegrationInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling enableIntegrationInstance().'
            );
        }

        if (requestParameters['enable'] == null) {
            throw new runtime.RequiredError(
                'enable',
                'Required parameter "enable" was null or undefined when calling enableIntegrationInstance().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/integration-instances/{id}/enable/{enable}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))).replace(`{${"enable"}}`, encodeURIComponent(String(requestParameters['enable']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Enable/disable an integration instance.
     * Enable/disable an integration instance
     */
    async enableIntegrationInstance(requestParameters: EnableIntegrationInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.enableIntegrationInstanceRaw(requestParameters, initOverrides);
    }

    /**
     * Enable/disable an integration instance workflow.
     * Enable/disable an integration instance workflow
     */
    async enableIntegrationInstanceWorkflowRaw(requestParameters: EnableIntegrationInstanceWorkflowRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling enableIntegrationInstanceWorkflow().'
            );
        }

        if (requestParameters['workflowId'] == null) {
            throw new runtime.RequiredError(
                'workflowId',
                'Required parameter "workflowId" was null or undefined when calling enableIntegrationInstanceWorkflow().'
            );
        }

        if (requestParameters['enable'] == null) {
            throw new runtime.RequiredError(
                'enable',
                'Required parameter "enable" was null or undefined when calling enableIntegrationInstanceWorkflow().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/integration-instances/{id}/workflows/{workflowId}/enable/{enable}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))).replace(`{${"workflowId"}}`, encodeURIComponent(String(requestParameters['workflowId']))).replace(`{${"enable"}}`, encodeURIComponent(String(requestParameters['enable']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Enable/disable an integration instance workflow.
     * Enable/disable an integration instance workflow
     */
    async enableIntegrationInstanceWorkflow(requestParameters: EnableIntegrationInstanceWorkflowRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.enableIntegrationInstanceWorkflowRaw(requestParameters, initOverrides);
    }

    /**
     * Get an integration instance by id.
     * Get an integration instance by id
     */
    async getIntegrationInstanceRaw(requestParameters: GetIntegrationInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IntegrationInstanceModel>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getIntegrationInstance().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/integration-instances/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IntegrationInstanceModelFromJSON(jsonValue));
    }

    /**
     * Get an integration instance by id.
     * Get an integration instance by id
     */
    async getIntegrationInstance(requestParameters: GetIntegrationInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IntegrationInstanceModel> {
        const response = await this.getIntegrationInstanceRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
