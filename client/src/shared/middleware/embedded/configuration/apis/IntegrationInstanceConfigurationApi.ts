/* tslint:disable */
/* eslint-disable */
/**
 * The Embedded Configuration Internal API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateIntegrationInstanceConfigurationWorkflowJob200Response,
  Environment,
  IntegrationInstanceConfiguration,
  IntegrationInstanceConfigurationWorkflow,
} from '../models/index';
import {
    CreateIntegrationInstanceConfigurationWorkflowJob200ResponseFromJSON,
    CreateIntegrationInstanceConfigurationWorkflowJob200ResponseToJSON,
    EnvironmentFromJSON,
    EnvironmentToJSON,
    IntegrationInstanceConfigurationFromJSON,
    IntegrationInstanceConfigurationToJSON,
    IntegrationInstanceConfigurationWorkflowFromJSON,
    IntegrationInstanceConfigurationWorkflowToJSON,
} from '../models/index';

export interface CreateIntegrationInstanceConfigurationRequest {
    integrationInstanceConfiguration: IntegrationInstanceConfiguration;
}

export interface CreateIntegrationInstanceConfigurationWorkflowJobRequest {
    id: number;
    workflowId: string;
}

export interface DeleteIntegrationInstanceConfigurationRequest {
    id: number;
}

export interface EnableIntegrationInstanceConfigurationRequest {
    id: number;
    enable: boolean;
}

export interface EnableIntegrationInstanceConfigurationWorkflowRequest {
    id: number;
    workflowId: string;
    enable: boolean;
}

export interface GetIntegrationInstanceConfigurationRequest {
    id: number;
}

export interface GetIntegrationInstanceConfigurationsRequest {
    environment?: Environment;
    integrationId?: number;
    tagId?: number;
}

export interface UpdateIntegrationInstanceConfigurationRequest {
    id: number;
    integrationInstanceConfiguration: IntegrationInstanceConfiguration;
}

export interface UpdateIntegrationInstanceConfigurationWorkflowRequest {
    id: number;
    workflowId: number;
    integrationInstanceConfigurationWorkflow: Omit<IntegrationInstanceConfigurationWorkflow, 'createdBy'|'createdDate'|'id'|'lastModifiedBy'|'lastModifiedDate'|'workflowReferenceCode'>;
}

/**
 * 
 */
export class IntegrationInstanceConfigurationApi extends runtime.BaseAPI {

    /**
     * Create a new integration instance configuration.
     * Create a new integration instance configuration
     */
    async createIntegrationInstanceConfigurationRaw(requestParameters: CreateIntegrationInstanceConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IntegrationInstanceConfiguration>> {
        if (requestParameters['integrationInstanceConfiguration'] == null) {
            throw new runtime.RequiredError(
                'integrationInstanceConfiguration',
                'Required parameter "integrationInstanceConfiguration" was null or undefined when calling createIntegrationInstanceConfiguration().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/integration-instance-configurations`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: IntegrationInstanceConfigurationToJSON(requestParameters['integrationInstanceConfiguration']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IntegrationInstanceConfigurationFromJSON(jsonValue));
    }

    /**
     * Create a new integration instance configuration.
     * Create a new integration instance configuration
     */
    async createIntegrationInstanceConfiguration(requestParameters: CreateIntegrationInstanceConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IntegrationInstanceConfiguration> {
        const response = await this.createIntegrationInstanceConfigurationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a request for running a new job.
     * Create a request for running a new job
     */
    async createIntegrationInstanceConfigurationWorkflowJobRaw(requestParameters: CreateIntegrationInstanceConfigurationWorkflowJobRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateIntegrationInstanceConfigurationWorkflowJob200Response>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling createIntegrationInstanceConfigurationWorkflowJob().'
            );
        }

        if (requestParameters['workflowId'] == null) {
            throw new runtime.RequiredError(
                'workflowId',
                'Required parameter "workflowId" was null or undefined when calling createIntegrationInstanceConfigurationWorkflowJob().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/integration-instance-configurations/{id}/workflows/{workflowId}/jobs`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))).replace(`{${"workflowId"}}`, encodeURIComponent(String(requestParameters['workflowId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateIntegrationInstanceConfigurationWorkflowJob200ResponseFromJSON(jsonValue));
    }

    /**
     * Create a request for running a new job.
     * Create a request for running a new job
     */
    async createIntegrationInstanceConfigurationWorkflowJob(requestParameters: CreateIntegrationInstanceConfigurationWorkflowJobRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateIntegrationInstanceConfigurationWorkflowJob200Response> {
        const response = await this.createIntegrationInstanceConfigurationWorkflowJobRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete an integration instance configuration.
     * Delete an integration instance configuration
     */
    async deleteIntegrationInstanceConfigurationRaw(requestParameters: DeleteIntegrationInstanceConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deleteIntegrationInstanceConfiguration().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/integration-instance-configurations/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete an integration instance configuration.
     * Delete an integration instance configuration
     */
    async deleteIntegrationInstanceConfiguration(requestParameters: DeleteIntegrationInstanceConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteIntegrationInstanceConfigurationRaw(requestParameters, initOverrides);
    }

    /**
     * Enable/disable an integration instance configuration.
     * Enable/disable an integration instance configuration
     */
    async enableIntegrationInstanceConfigurationRaw(requestParameters: EnableIntegrationInstanceConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling enableIntegrationInstanceConfiguration().'
            );
        }

        if (requestParameters['enable'] == null) {
            throw new runtime.RequiredError(
                'enable',
                'Required parameter "enable" was null or undefined when calling enableIntegrationInstanceConfiguration().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/integration-instance-configurations/{id}/enable/{enable}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))).replace(`{${"enable"}}`, encodeURIComponent(String(requestParameters['enable']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Enable/disable an integration instance configuration.
     * Enable/disable an integration instance configuration
     */
    async enableIntegrationInstanceConfiguration(requestParameters: EnableIntegrationInstanceConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.enableIntegrationInstanceConfigurationRaw(requestParameters, initOverrides);
    }

    /**
     * Enable/disable a workflow of an integration instance configuration.
     * Enable/disable a workflow of an integration instance configuration
     */
    async enableIntegrationInstanceConfigurationWorkflowRaw(requestParameters: EnableIntegrationInstanceConfigurationWorkflowRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling enableIntegrationInstanceConfigurationWorkflow().'
            );
        }

        if (requestParameters['workflowId'] == null) {
            throw new runtime.RequiredError(
                'workflowId',
                'Required parameter "workflowId" was null or undefined when calling enableIntegrationInstanceConfigurationWorkflow().'
            );
        }

        if (requestParameters['enable'] == null) {
            throw new runtime.RequiredError(
                'enable',
                'Required parameter "enable" was null or undefined when calling enableIntegrationInstanceConfigurationWorkflow().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/integration-instance-configurations/{id}/workflows/{workflowId}/enable/{enable}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))).replace(`{${"workflowId"}}`, encodeURIComponent(String(requestParameters['workflowId']))).replace(`{${"enable"}}`, encodeURIComponent(String(requestParameters['enable']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Enable/disable a workflow of an integration instance configuration.
     * Enable/disable a workflow of an integration instance configuration
     */
    async enableIntegrationInstanceConfigurationWorkflow(requestParameters: EnableIntegrationInstanceConfigurationWorkflowRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.enableIntegrationInstanceConfigurationWorkflowRaw(requestParameters, initOverrides);
    }

    /**
     * Get an integration instance configuration by id.
     * Get an integration instance configuration by id
     */
    async getIntegrationInstanceConfigurationRaw(requestParameters: GetIntegrationInstanceConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IntegrationInstanceConfiguration>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getIntegrationInstanceConfiguration().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/integration-instance-configurations/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IntegrationInstanceConfigurationFromJSON(jsonValue));
    }

    /**
     * Get an integration instance configuration by id.
     * Get an integration instance configuration by id
     */
    async getIntegrationInstanceConfiguration(requestParameters: GetIntegrationInstanceConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IntegrationInstanceConfiguration> {
        const response = await this.getIntegrationInstanceConfigurationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get integration instance configurations.
     * Get integration instance configurations
     */
    async getIntegrationInstanceConfigurationsRaw(requestParameters: GetIntegrationInstanceConfigurationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<IntegrationInstanceConfiguration>>> {
        const queryParameters: any = {};

        if (requestParameters['environment'] != null) {
            queryParameters['environment'] = requestParameters['environment'];
        }

        if (requestParameters['integrationId'] != null) {
            queryParameters['integrationId'] = requestParameters['integrationId'];
        }

        if (requestParameters['tagId'] != null) {
            queryParameters['tagId'] = requestParameters['tagId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/integration-instance-configurations`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(IntegrationInstanceConfigurationFromJSON));
    }

    /**
     * Get integration instance configurations.
     * Get integration instance configurations
     */
    async getIntegrationInstanceConfigurations(requestParameters: GetIntegrationInstanceConfigurationsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<IntegrationInstanceConfiguration>> {
        const response = await this.getIntegrationInstanceConfigurationsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update an existing integration instance configuration.
     * Update an existing integration instance configuration
     */
    async updateIntegrationInstanceConfigurationRaw(requestParameters: UpdateIntegrationInstanceConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IntegrationInstanceConfiguration>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling updateIntegrationInstanceConfiguration().'
            );
        }

        if (requestParameters['integrationInstanceConfiguration'] == null) {
            throw new runtime.RequiredError(
                'integrationInstanceConfiguration',
                'Required parameter "integrationInstanceConfiguration" was null or undefined when calling updateIntegrationInstanceConfiguration().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/integration-instance-configurations/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: IntegrationInstanceConfigurationToJSON(requestParameters['integrationInstanceConfiguration']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IntegrationInstanceConfigurationFromJSON(jsonValue));
    }

    /**
     * Update an existing integration instance configuration.
     * Update an existing integration instance configuration
     */
    async updateIntegrationInstanceConfiguration(requestParameters: UpdateIntegrationInstanceConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IntegrationInstanceConfiguration> {
        const response = await this.updateIntegrationInstanceConfigurationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update an existing integration instance configuration workflow.
     * Update an existing integration instance configuration workflow
     */
    async updateIntegrationInstanceConfigurationWorkflowRaw(requestParameters: UpdateIntegrationInstanceConfigurationWorkflowRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IntegrationInstanceConfigurationWorkflow>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling updateIntegrationInstanceConfigurationWorkflow().'
            );
        }

        if (requestParameters['workflowId'] == null) {
            throw new runtime.RequiredError(
                'workflowId',
                'Required parameter "workflowId" was null or undefined when calling updateIntegrationInstanceConfigurationWorkflow().'
            );
        }

        if (requestParameters['integrationInstanceConfigurationWorkflow'] == null) {
            throw new runtime.RequiredError(
                'integrationInstanceConfigurationWorkflow',
                'Required parameter "integrationInstanceConfigurationWorkflow" was null or undefined when calling updateIntegrationInstanceConfigurationWorkflow().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/integration-instance-configurations/{id}/workflows/{workflowId}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))).replace(`{${"workflowId"}}`, encodeURIComponent(String(requestParameters['workflowId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: IntegrationInstanceConfigurationWorkflowToJSON(requestParameters['integrationInstanceConfigurationWorkflow']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IntegrationInstanceConfigurationWorkflowFromJSON(jsonValue));
    }

    /**
     * Update an existing integration instance configuration workflow.
     * Update an existing integration instance configuration workflow
     */
    async updateIntegrationInstanceConfigurationWorkflow(requestParameters: UpdateIntegrationInstanceConfigurationWorkflowRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IntegrationInstanceConfigurationWorkflow> {
        const response = await this.updateIntegrationInstanceConfigurationWorkflowRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
