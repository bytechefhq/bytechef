/* tslint:disable */
/* eslint-disable */
/**
 * The Embedded Configuration API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  EnvironmentModel,
  IntegrationInstanceConfigurationModel,
} from '../models/index';
import {
    EnvironmentModelFromJSON,
    EnvironmentModelToJSON,
    IntegrationInstanceConfigurationModelFromJSON,
    IntegrationInstanceConfigurationModelToJSON,
} from '../models/index';

export interface GetEnvironmentIntegrationInstanceConfigurationsRequest {
    environment: EnvironmentModel;
}

/**
 * 
 */
export class PublicApiApi extends runtime.BaseAPI {

    /**
     * Get integration instance configurations.
     * Get integration instance configurations
     */
    async getEnvironmentIntegrationInstanceConfigurationsRaw(requestParameters: GetEnvironmentIntegrationInstanceConfigurationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<IntegrationInstanceConfigurationModel>>> {
        if (requestParameters['environment'] == null) {
            throw new runtime.RequiredError(
                'environment',
                'Required parameter "environment" was null or undefined when calling getEnvironmentIntegrationInstanceConfigurations().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/integration-instance-configurations/by-environment/{environment}`.replace(`{${"environment"}}`, encodeURIComponent(String(requestParameters['environment']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(IntegrationInstanceConfigurationModelFromJSON));
    }

    /**
     * Get integration instance configurations.
     * Get integration instance configurations
     */
    async getEnvironmentIntegrationInstanceConfigurations(requestParameters: GetEnvironmentIntegrationInstanceConfigurationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<IntegrationInstanceConfigurationModel>> {
        const response = await this.getEnvironmentIntegrationInstanceConfigurationsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
