/* tslint:disable */
/* eslint-disable */
/**
 * ByteChef Platform ApiKey API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ApiKey,
  CreateApiKey200Response,
} from '../models/index';
import {
    ApiKeyFromJSON,
    ApiKeyToJSON,
    CreateApiKey200ResponseFromJSON,
    CreateApiKey200ResponseToJSON,
} from '../models/index';

export interface CreateApiKeyRequest {
    apiKey: ApiKey;
}

export interface DeleteApiKeyRequest {
    id: number;
}

export interface GetApiKeyRequest {
    id: number;
}

export interface GetApiKeysRequest {
    environmentId: number;
}

export interface UpdateApiKeyRequest {
    id: number;
    apiKey: ApiKey;
}

/**
 * 
 */
export class ApiKeyApi extends runtime.BaseAPI {

    /**
     * Create API Key
     */
    async createApiKeyRaw(requestParameters: CreateApiKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateApiKey200Response>> {
        if (requestParameters['apiKey'] == null) {
            throw new runtime.RequiredError(
                'apiKey',
                'Required parameter "apiKey" was null or undefined when calling createApiKey().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api-keys`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ApiKeyToJSON(requestParameters['apiKey']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateApiKey200ResponseFromJSON(jsonValue));
    }

    /**
     * Create API Key
     */
    async createApiKey(requestParameters: CreateApiKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateApiKey200Response> {
        const response = await this.createApiKeyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete API Key
     */
    async deleteApiKeyRaw(requestParameters: DeleteApiKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deleteApiKey().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api-keys/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete API Key
     */
    async deleteApiKey(requestParameters: DeleteApiKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteApiKeyRaw(requestParameters, initOverrides);
    }

    /**
     * Get API Key
     */
    async getApiKeyRaw(requestParameters: GetApiKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiKey>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getApiKey().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api-keys/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiKeyFromJSON(jsonValue));
    }

    /**
     * Get API Key
     */
    async getApiKey(requestParameters: GetApiKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiKey> {
        const response = await this.getApiKeyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get API Keys
     */
    async getApiKeysRaw(requestParameters: GetApiKeysRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ApiKey>>> {
        if (requestParameters['environmentId'] == null) {
            throw new runtime.RequiredError(
                'environmentId',
                'Required parameter "environmentId" was null or undefined when calling getApiKeys().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['environmentId'] != null) {
            queryParameters['environmentId'] = requestParameters['environmentId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api-keys`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ApiKeyFromJSON));
    }

    /**
     * Get API Keys
     */
    async getApiKeys(requestParameters: GetApiKeysRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ApiKey>> {
        const response = await this.getApiKeysRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update API Key
     */
    async updateApiKeyRaw(requestParameters: UpdateApiKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling updateApiKey().'
            );
        }

        if (requestParameters['apiKey'] == null) {
            throw new runtime.RequiredError(
                'apiKey',
                'Required parameter "apiKey" was null or undefined when calling updateApiKey().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api-keys/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ApiKeyToJSON(requestParameters['apiKey']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Update API Key
     */
    async updateApiKey(requestParameters: UpdateApiKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.updateApiKeyRaw(requestParameters, initOverrides);
    }

}
