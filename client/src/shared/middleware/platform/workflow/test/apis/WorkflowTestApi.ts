/* tslint:disable */
/* eslint-disable */
/**
 * The Platform Workflow Test Internal API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  TestWorkflowRequest,
  WorkflowTestExecution,
} from '../models/index';
import {
    TestWorkflowRequestFromJSON,
    TestWorkflowRequestToJSON,
    WorkflowTestExecutionFromJSON,
    WorkflowTestExecutionToJSON,
} from '../models/index';

export interface TestWorkflowOperationRequest {
    id: string;
    environmentId: number;
    testWorkflowRequest?: TestWorkflowRequest;
}

/**
 * 
 */
export class WorkflowTestApi extends runtime.BaseAPI {

    /**
     * Execute a workflow synchronously for testing purposes.
     * Execute a workflow synchronously for testing purpose
     */
    async testWorkflowRaw(requestParameters: TestWorkflowOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WorkflowTestExecution>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling testWorkflow().'
            );
        }

        if (requestParameters['environmentId'] == null) {
            throw new runtime.RequiredError(
                'environmentId',
                'Required parameter "environmentId" was null or undefined when calling testWorkflow().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['environmentId'] != null) {
            queryParameters['environmentId'] = requestParameters['environmentId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/workflows/{id}/tests`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TestWorkflowRequestToJSON(requestParameters['testWorkflowRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WorkflowTestExecutionFromJSON(jsonValue));
    }

    /**
     * Execute a workflow synchronously for testing purposes.
     * Execute a workflow synchronously for testing purpose
     */
    async testWorkflow(requestParameters: TestWorkflowOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WorkflowTestExecution> {
        const response = await this.testWorkflowRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
