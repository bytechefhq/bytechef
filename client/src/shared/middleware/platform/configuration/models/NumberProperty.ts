/* tslint:disable */
/* eslint-disable */
/**
 * The Platform Configuration Internal API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { OptionsDataSource } from './OptionsDataSource';
import {
    OptionsDataSourceFromJSON,
    OptionsDataSourceFromJSONTyped,
    OptionsDataSourceToJSON,
    OptionsDataSourceToJSONTyped,
} from './OptionsDataSource';
import type { ControlType } from './ControlType';
import {
    ControlTypeFromJSON,
    ControlTypeFromJSONTyped,
    ControlTypeToJSON,
    ControlTypeToJSONTyped,
} from './ControlType';
import type { Option } from './Option';
import {
    OptionFromJSON,
    OptionFromJSONTyped,
    OptionToJSON,
    OptionToJSONTyped,
} from './Option';
import type { PropertyType } from './PropertyType';
import {
    PropertyTypeFromJSON,
    PropertyTypeFromJSONTyped,
    PropertyTypeToJSON,
    PropertyTypeToJSONTyped,
} from './PropertyType';
import type { ValueProperty } from './ValueProperty';
import {
    ValuePropertyFromJSON,
    ValuePropertyFromJSONTyped,
    ValuePropertyToJSON,
    ValuePropertyToJSONTyped,
} from './ValueProperty';

/**
 * A number property type.
 * @export
 * @interface NumberProperty
 */
export interface NumberProperty extends ValueProperty {
    /**
     * The property default value.
     * @type {number}
     * @memberof NumberProperty
     */
    defaultValue?: number;
    /**
     * The property sample value.
     * @type {number}
     * @memberof NumberProperty
     */
    exampleValue?: number;
    /**
     * The number value precision.
     * @type {number}
     * @memberof NumberProperty
     */
    maxNumberPrecision?: number;
    /**
     * The maximum property value.
     * @type {number}
     * @memberof NumberProperty
     */
    maxValue?: number;
    /**
     * The number value precision.
     * @type {number}
     * @memberof NumberProperty
     */
    minNumberPrecision?: number;
    /**
     * The minimum property value.
     * @type {number}
     * @memberof NumberProperty
     */
    minValue?: number;
    /**
     * The number value precision.
     * @type {number}
     * @memberof NumberProperty
     */
    numberPrecision?: number;
    /**
     * The list of valid property options.
     * @type {Array<Option>}
     * @memberof NumberProperty
     */
    options?: Array<Option>;
    /**
     * 
     * @type {OptionsDataSource}
     * @memberof NumberProperty
     */
    optionsDataSource?: OptionsDataSource;
}



/**
 * Check if a given object implements the NumberProperty interface.
 */
export function instanceOfNumberProperty(value: object): value is NumberProperty {
    return true;
}

export function NumberPropertyFromJSON(json: any): NumberProperty {
    return NumberPropertyFromJSONTyped(json, false);
}

export function NumberPropertyFromJSONTyped(json: any, ignoreDiscriminator: boolean): NumberProperty {
    if (json == null) {
        return json;
    }
    return {
        ...ValuePropertyFromJSONTyped(json, true),
        'defaultValue': json['defaultValue'] == null ? undefined : json['defaultValue'],
        'exampleValue': json['exampleValue'] == null ? undefined : json['exampleValue'],
        'maxNumberPrecision': json['maxNumberPrecision'] == null ? undefined : json['maxNumberPrecision'],
        'maxValue': json['maxValue'] == null ? undefined : json['maxValue'],
        'minNumberPrecision': json['minNumberPrecision'] == null ? undefined : json['minNumberPrecision'],
        'minValue': json['minValue'] == null ? undefined : json['minValue'],
        'numberPrecision': json['numberPrecision'] == null ? undefined : json['numberPrecision'],
        'options': json['options'] == null ? undefined : ((json['options'] as Array<any>).map(OptionFromJSON)),
        'optionsDataSource': json['optionsDataSource'] == null ? undefined : OptionsDataSourceFromJSON(json['optionsDataSource']),
    };
}

export function NumberPropertyToJSON(json: any): NumberProperty {
    return NumberPropertyToJSONTyped(json, false);
}

export function NumberPropertyToJSONTyped(value?: NumberProperty | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        ...ValuePropertyToJSONTyped(value, true),
        'defaultValue': value['defaultValue'],
        'exampleValue': value['exampleValue'],
        'maxNumberPrecision': value['maxNumberPrecision'],
        'maxValue': value['maxValue'],
        'minNumberPrecision': value['minNumberPrecision'],
        'minValue': value['minValue'],
        'numberPrecision': value['numberPrecision'],
        'options': value['options'] == null ? undefined : ((value['options'] as Array<any>).map(OptionToJSON)),
        'optionsDataSource': OptionsDataSourceToJSON(value['optionsDataSource']),
    };
}

