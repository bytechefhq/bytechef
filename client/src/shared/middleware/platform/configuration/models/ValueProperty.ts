/* tslint:disable */
/* eslint-disable */
/**
 * The Platform Configuration Internal API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { ControlType } from './ControlType';
import {
    ControlTypeFromJSON,
    ControlTypeFromJSONTyped,
    ControlTypeToJSON,
} from './ControlType';
import type { PropertyType } from './PropertyType';
import {
    PropertyTypeFromJSON,
    PropertyTypeFromJSONTyped,
    PropertyTypeToJSON,
} from './PropertyType';
import type { Property } from './Property';
import {
    PropertyFromJSON,
    PropertyFromJSONTyped,
    PropertyToJSON,
} from './Property';

/**
 * A base property for all value based properties.
 * @export
 * @interface ValueProperty
 */
export interface ValueProperty extends Property {
    /**
     * 
     * @type {ControlType}
     * @memberof ValueProperty
     */
    controlType: ControlType;
    /**
     * The property label.
     * @type {string}
     * @memberof ValueProperty
     */
    label?: string;
    /**
     * The property placeholder.
     * @type {string}
     * @memberof ValueProperty
     */
    placeholder?: string;
}



/**
 * Check if a given object implements the ValueProperty interface.
 */
export function instanceOfValueProperty(value: object): value is ValueProperty {
    if (!('controlType' in value) || value['controlType'] === undefined) return false;
    return true;
}

export function ValuePropertyFromJSON(json: any): ValueProperty {
    return ValuePropertyFromJSONTyped(json, false);
}

export function ValuePropertyFromJSONTyped(json: any, ignoreDiscriminator: boolean): ValueProperty {
    if (json == null) {
        return json;
    }
    return {
        ...PropertyFromJSONTyped(json, ignoreDiscriminator),
        'controlType': ControlTypeFromJSON(json['controlType']),
        'label': json['label'] == null ? undefined : json['label'],
        'placeholder': json['placeholder'] == null ? undefined : json['placeholder'],
    };
}

export function ValuePropertyToJSON(value?: ValueProperty | null): any {
    if (value == null) {
        return value;
    }
    return {
        ...PropertyToJSON(value),
        'controlType': ControlTypeToJSON(value['controlType']),
        'label': value['label'],
        'placeholder': value['placeholder'],
    };
}

