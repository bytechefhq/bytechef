/* tslint:disable */
/* eslint-disable */
/**
 * The Platform Configuration Internal API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { TriggerDefinition } from './TriggerDefinition';
import {
    TriggerDefinitionFromJSON,
    TriggerDefinitionFromJSONTyped,
    TriggerDefinitionToJSON,
    TriggerDefinitionToJSONTyped,
} from './TriggerDefinition';
import type { Property } from './Property';
import {
    PropertyFromJSON,
    PropertyFromJSONTyped,
    PropertyToJSON,
    PropertyToJSONTyped,
} from './Property';
import type { ActionDefinition } from './ActionDefinition';
import {
    ActionDefinitionFromJSON,
    ActionDefinitionFromJSONTyped,
    ActionDefinitionToJSON,
    ActionDefinitionToJSONTyped,
} from './ActionDefinition';
import type { TaskDispatcherDefinition } from './TaskDispatcherDefinition';
import {
    TaskDispatcherDefinitionFromJSON,
    TaskDispatcherDefinitionFromJSONTyped,
    TaskDispatcherDefinitionToJSON,
    TaskDispatcherDefinitionToJSONTyped,
} from './TaskDispatcherDefinition';

/**
 * The workflow node output
 * @export
 * @interface WorkflowNodeOutput
 */
export interface WorkflowNodeOutput {
    /**
     * 
     * @type {ActionDefinition}
     * @memberof WorkflowNodeOutput
     */
    actionDefinition?: ActionDefinition;
    /**
     * 
     * @type {Property}
     * @memberof WorkflowNodeOutput
     */
    outputSchema: Property;
    /**
     * The sample value of an output.
     * @type {object}
     * @memberof WorkflowNodeOutput
     */
    sampleOutput?: object;
    /**
     * 
     * @type {TaskDispatcherDefinition}
     * @memberof WorkflowNodeOutput
     */
    taskDispatcherDefinition?: TaskDispatcherDefinition;
    /**
     * 
     * @type {TriggerDefinition}
     * @memberof WorkflowNodeOutput
     */
    triggerDefinition?: TriggerDefinition;
    /**
     * The workflow node name
     * @type {string}
     * @memberof WorkflowNodeOutput
     */
    workflowNodeName: string;
}

/**
 * Check if a given object implements the WorkflowNodeOutput interface.
 */
export function instanceOfWorkflowNodeOutput(value: object): value is WorkflowNodeOutput {
    if (!('outputSchema' in value) || value['outputSchema'] === undefined) return false;
    if (!('workflowNodeName' in value) || value['workflowNodeName'] === undefined) return false;
    return true;
}

export function WorkflowNodeOutputFromJSON(json: any): WorkflowNodeOutput {
    return WorkflowNodeOutputFromJSONTyped(json, false);
}

export function WorkflowNodeOutputFromJSONTyped(json: any, ignoreDiscriminator: boolean): WorkflowNodeOutput {
    if (json == null) {
        return json;
    }
    return {
        
        'actionDefinition': json['actionDefinition'] == null ? undefined : ActionDefinitionFromJSON(json['actionDefinition']),
        'outputSchema': PropertyFromJSON(json['outputSchema']),
        'sampleOutput': json['sampleOutput'] == null ? undefined : json['sampleOutput'],
        'taskDispatcherDefinition': json['taskDispatcherDefinition'] == null ? undefined : TaskDispatcherDefinitionFromJSON(json['taskDispatcherDefinition']),
        'triggerDefinition': json['triggerDefinition'] == null ? undefined : TriggerDefinitionFromJSON(json['triggerDefinition']),
        'workflowNodeName': json['workflowNodeName'],
    };
}

export function WorkflowNodeOutputToJSON(json: any): WorkflowNodeOutput {
    return WorkflowNodeOutputToJSONTyped(json, false);
}

export function WorkflowNodeOutputToJSONTyped(value?: WorkflowNodeOutput | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'actionDefinition': ActionDefinitionToJSON(value['actionDefinition']),
        'outputSchema': PropertyToJSON(value['outputSchema']),
        'sampleOutput': value['sampleOutput'],
        'taskDispatcherDefinition': TaskDispatcherDefinitionToJSON(value['taskDispatcherDefinition']),
        'triggerDefinition': TriggerDefinitionToJSON(value['triggerDefinition']),
        'workflowNodeName': value['workflowNodeName'],
    };
}

