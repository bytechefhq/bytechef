/* tslint:disable */
/* eslint-disable */
/**
 * The Platform Configuration Internal API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  DeleteClusterElementParameter200Response,
  DeleteClusterElementParameterRequest,
  GetClusterElementParameterDisplayConditions200Response,
  UpdateClusterElementParameter200Response,
  UpdateClusterElementParameterRequest,
} from '../models/index';
import {
    DeleteClusterElementParameter200ResponseFromJSON,
    DeleteClusterElementParameter200ResponseToJSON,
    DeleteClusterElementParameterRequestFromJSON,
    DeleteClusterElementParameterRequestToJSON,
    GetClusterElementParameterDisplayConditions200ResponseFromJSON,
    GetClusterElementParameterDisplayConditions200ResponseToJSON,
    UpdateClusterElementParameter200ResponseFromJSON,
    UpdateClusterElementParameter200ResponseToJSON,
    UpdateClusterElementParameterRequestFromJSON,
    UpdateClusterElementParameterRequestToJSON,
} from '../models/index';

export interface DeleteClusterElementParameterOperationRequest {
    id: string;
    workflowNodeName: string;
    clusterElementType: string;
    clusterElementWorkflowNodeName: string;
    deleteClusterElementParameterRequest: DeleteClusterElementParameterRequest;
}

export interface DeleteWorkflowNodeParameterRequest {
    id: string;
    workflowNodeName: string;
    deleteClusterElementParameterRequest: DeleteClusterElementParameterRequest;
}

export interface GetClusterElementParameterDisplayConditionsRequest {
    id: string;
    workflowNodeName: string;
    clusterElementType: string;
    clusterElementWorkflowNodeName: string;
}

export interface GetWorkflowNodeParameterDisplayConditionsRequest {
    id: string;
    workflowNodeName: string;
}

export interface UpdateClusterElementParameterOperationRequest {
    id: string;
    workflowNodeName: string;
    clusterElementType: string;
    clusterElementWorkflowNodeName: string;
    updateClusterElementParameterRequest: UpdateClusterElementParameterRequest;
}

export interface UpdateWorkflowNodeParameterRequest {
    id: string;
    workflowNodeName: string;
    updateClusterElementParameterRequest: UpdateClusterElementParameterRequest;
}

/**
 * 
 */
export class WorkflowNodeParameterApi extends runtime.BaseAPI {

    /**
     * Deletes a cluster element parameter.
     * Deletes a cluster element parameter
     */
    async deleteClusterElementParameterRaw(requestParameters: DeleteClusterElementParameterOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeleteClusterElementParameter200Response>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deleteClusterElementParameter().'
            );
        }

        if (requestParameters['workflowNodeName'] == null) {
            throw new runtime.RequiredError(
                'workflowNodeName',
                'Required parameter "workflowNodeName" was null or undefined when calling deleteClusterElementParameter().'
            );
        }

        if (requestParameters['clusterElementType'] == null) {
            throw new runtime.RequiredError(
                'clusterElementType',
                'Required parameter "clusterElementType" was null or undefined when calling deleteClusterElementParameter().'
            );
        }

        if (requestParameters['clusterElementWorkflowNodeName'] == null) {
            throw new runtime.RequiredError(
                'clusterElementWorkflowNodeName',
                'Required parameter "clusterElementWorkflowNodeName" was null or undefined when calling deleteClusterElementParameter().'
            );
        }

        if (requestParameters['deleteClusterElementParameterRequest'] == null) {
            throw new runtime.RequiredError(
                'deleteClusterElementParameterRequest',
                'Required parameter "deleteClusterElementParameterRequest" was null or undefined when calling deleteClusterElementParameter().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/workflows/{id}/workflow-nodes/{workflowNodeName}/cluster-elements/{clusterElementType}/{clusterElementWorkflowNodeName}/parameters`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));
        urlPath = urlPath.replace(`{${"workflowNodeName"}}`, encodeURIComponent(String(requestParameters['workflowNodeName'])));
        urlPath = urlPath.replace(`{${"clusterElementType"}}`, encodeURIComponent(String(requestParameters['clusterElementType'])));
        urlPath = urlPath.replace(`{${"clusterElementWorkflowNodeName"}}`, encodeURIComponent(String(requestParameters['clusterElementWorkflowNodeName'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: DeleteClusterElementParameterRequestToJSON(requestParameters['deleteClusterElementParameterRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DeleteClusterElementParameter200ResponseFromJSON(jsonValue));
    }

    /**
     * Deletes a cluster element parameter.
     * Deletes a cluster element parameter
     */
    async deleteClusterElementParameter(requestParameters: DeleteClusterElementParameterOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeleteClusterElementParameter200Response> {
        const response = await this.deleteClusterElementParameterRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deletes a workflow node parameter.
     * Deletes a workflow node parameter
     */
    async deleteWorkflowNodeParameterRaw(requestParameters: DeleteWorkflowNodeParameterRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeleteClusterElementParameter200Response>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deleteWorkflowNodeParameter().'
            );
        }

        if (requestParameters['workflowNodeName'] == null) {
            throw new runtime.RequiredError(
                'workflowNodeName',
                'Required parameter "workflowNodeName" was null or undefined when calling deleteWorkflowNodeParameter().'
            );
        }

        if (requestParameters['deleteClusterElementParameterRequest'] == null) {
            throw new runtime.RequiredError(
                'deleteClusterElementParameterRequest',
                'Required parameter "deleteClusterElementParameterRequest" was null or undefined when calling deleteWorkflowNodeParameter().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/workflows/{id}/workflow-nodes/{workflowNodeName}/parameters`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));
        urlPath = urlPath.replace(`{${"workflowNodeName"}}`, encodeURIComponent(String(requestParameters['workflowNodeName'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: DeleteClusterElementParameterRequestToJSON(requestParameters['deleteClusterElementParameterRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DeleteClusterElementParameter200ResponseFromJSON(jsonValue));
    }

    /**
     * Deletes a workflow node parameter.
     * Deletes a workflow node parameter
     */
    async deleteWorkflowNodeParameter(requestParameters: DeleteWorkflowNodeParameterRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeleteClusterElementParameter200Response> {
        const response = await this.deleteWorkflowNodeParameterRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get cluster element options shown in the editor.
     * Get cluster element property options shown in the editor
     */
    async getClusterElementParameterDisplayConditionsRaw(requestParameters: GetClusterElementParameterDisplayConditionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetClusterElementParameterDisplayConditions200Response>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getClusterElementParameterDisplayConditions().'
            );
        }

        if (requestParameters['workflowNodeName'] == null) {
            throw new runtime.RequiredError(
                'workflowNodeName',
                'Required parameter "workflowNodeName" was null or undefined when calling getClusterElementParameterDisplayConditions().'
            );
        }

        if (requestParameters['clusterElementType'] == null) {
            throw new runtime.RequiredError(
                'clusterElementType',
                'Required parameter "clusterElementType" was null or undefined when calling getClusterElementParameterDisplayConditions().'
            );
        }

        if (requestParameters['clusterElementWorkflowNodeName'] == null) {
            throw new runtime.RequiredError(
                'clusterElementWorkflowNodeName',
                'Required parameter "clusterElementWorkflowNodeName" was null or undefined when calling getClusterElementParameterDisplayConditions().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/workflows/{id}/workflow-nodes/{workflowNodeName}/cluster-elements/{clusterElementType}/{clusterElementWorkflowNodeName}/display-conditions`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));
        urlPath = urlPath.replace(`{${"workflowNodeName"}}`, encodeURIComponent(String(requestParameters['workflowNodeName'])));
        urlPath = urlPath.replace(`{${"clusterElementType"}}`, encodeURIComponent(String(requestParameters['clusterElementType'])));
        urlPath = urlPath.replace(`{${"clusterElementWorkflowNodeName"}}`, encodeURIComponent(String(requestParameters['clusterElementWorkflowNodeName'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetClusterElementParameterDisplayConditions200ResponseFromJSON(jsonValue));
    }

    /**
     * Get cluster element options shown in the editor.
     * Get cluster element property options shown in the editor
     */
    async getClusterElementParameterDisplayConditions(requestParameters: GetClusterElementParameterDisplayConditionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetClusterElementParameterDisplayConditions200Response> {
        const response = await this.getClusterElementParameterDisplayConditionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get action or trigger display conditions shown in the editor.
     * Get action or trigger display conditions shown in the editor
     */
    async getWorkflowNodeParameterDisplayConditionsRaw(requestParameters: GetWorkflowNodeParameterDisplayConditionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetClusterElementParameterDisplayConditions200Response>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getWorkflowNodeParameterDisplayConditions().'
            );
        }

        if (requestParameters['workflowNodeName'] == null) {
            throw new runtime.RequiredError(
                'workflowNodeName',
                'Required parameter "workflowNodeName" was null or undefined when calling getWorkflowNodeParameterDisplayConditions().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/workflows/{id}/workflow-nodes/{workflowNodeName}/display-conditions`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));
        urlPath = urlPath.replace(`{${"workflowNodeName"}}`, encodeURIComponent(String(requestParameters['workflowNodeName'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetClusterElementParameterDisplayConditions200ResponseFromJSON(jsonValue));
    }

    /**
     * Get action or trigger display conditions shown in the editor.
     * Get action or trigger display conditions shown in the editor
     */
    async getWorkflowNodeParameterDisplayConditions(requestParameters: GetWorkflowNodeParameterDisplayConditionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetClusterElementParameterDisplayConditions200Response> {
        const response = await this.getWorkflowNodeParameterDisplayConditionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates a cluster element parameter.
     * Updates a cluster element parameter
     */
    async updateClusterElementParameterRaw(requestParameters: UpdateClusterElementParameterOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UpdateClusterElementParameter200Response>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling updateClusterElementParameter().'
            );
        }

        if (requestParameters['workflowNodeName'] == null) {
            throw new runtime.RequiredError(
                'workflowNodeName',
                'Required parameter "workflowNodeName" was null or undefined when calling updateClusterElementParameter().'
            );
        }

        if (requestParameters['clusterElementType'] == null) {
            throw new runtime.RequiredError(
                'clusterElementType',
                'Required parameter "clusterElementType" was null or undefined when calling updateClusterElementParameter().'
            );
        }

        if (requestParameters['clusterElementWorkflowNodeName'] == null) {
            throw new runtime.RequiredError(
                'clusterElementWorkflowNodeName',
                'Required parameter "clusterElementWorkflowNodeName" was null or undefined when calling updateClusterElementParameter().'
            );
        }

        if (requestParameters['updateClusterElementParameterRequest'] == null) {
            throw new runtime.RequiredError(
                'updateClusterElementParameterRequest',
                'Required parameter "updateClusterElementParameterRequest" was null or undefined when calling updateClusterElementParameter().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/workflows/{id}/workflow-nodes/{workflowNodeName}/cluster-elements/{clusterElementType}/{clusterElementWorkflowNodeName}/parameters`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));
        urlPath = urlPath.replace(`{${"workflowNodeName"}}`, encodeURIComponent(String(requestParameters['workflowNodeName'])));
        urlPath = urlPath.replace(`{${"clusterElementType"}}`, encodeURIComponent(String(requestParameters['clusterElementType'])));
        urlPath = urlPath.replace(`{${"clusterElementWorkflowNodeName"}}`, encodeURIComponent(String(requestParameters['clusterElementWorkflowNodeName'])));

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateClusterElementParameterRequestToJSON(requestParameters['updateClusterElementParameterRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UpdateClusterElementParameter200ResponseFromJSON(jsonValue));
    }

    /**
     * Updates a cluster element parameter.
     * Updates a cluster element parameter
     */
    async updateClusterElementParameter(requestParameters: UpdateClusterElementParameterOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UpdateClusterElementParameter200Response> {
        const response = await this.updateClusterElementParameterRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates a workflow node parameter.
     * Updates a workflow node parameter
     */
    async updateWorkflowNodeParameterRaw(requestParameters: UpdateWorkflowNodeParameterRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UpdateClusterElementParameter200Response>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling updateWorkflowNodeParameter().'
            );
        }

        if (requestParameters['workflowNodeName'] == null) {
            throw new runtime.RequiredError(
                'workflowNodeName',
                'Required parameter "workflowNodeName" was null or undefined when calling updateWorkflowNodeParameter().'
            );
        }

        if (requestParameters['updateClusterElementParameterRequest'] == null) {
            throw new runtime.RequiredError(
                'updateClusterElementParameterRequest',
                'Required parameter "updateClusterElementParameterRequest" was null or undefined when calling updateWorkflowNodeParameter().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/workflows/{id}/workflow-nodes/{workflowNodeName}/parameters`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));
        urlPath = urlPath.replace(`{${"workflowNodeName"}}`, encodeURIComponent(String(requestParameters['workflowNodeName'])));

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateClusterElementParameterRequestToJSON(requestParameters['updateClusterElementParameterRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UpdateClusterElementParameter200ResponseFromJSON(jsonValue));
    }

    /**
     * Updates a workflow node parameter.
     * Updates a workflow node parameter
     */
    async updateWorkflowNodeParameter(requestParameters: UpdateWorkflowNodeParameterRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UpdateClusterElementParameter200Response> {
        const response = await this.updateWorkflowNodeParameterRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
