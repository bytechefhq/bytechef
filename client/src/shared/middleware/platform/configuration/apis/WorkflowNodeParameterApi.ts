/* tslint:disable */
/* eslint-disable */
/**
 * The Platform Configuration Internal API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  DeleteWorkflowNodeParameter200Response,
  DeleteWorkflowNodeParameterRequest,
  GetWorkflowNodeParameterDisplayConditions200Response,
  UpdateWorkflowNodeParameter200Response,
  UpdateWorkflowNodeParameterRequest,
} from '../models/index';
import {
    DeleteWorkflowNodeParameter200ResponseFromJSON,
    DeleteWorkflowNodeParameter200ResponseToJSON,
    DeleteWorkflowNodeParameterRequestFromJSON,
    DeleteWorkflowNodeParameterRequestToJSON,
    GetWorkflowNodeParameterDisplayConditions200ResponseFromJSON,
    GetWorkflowNodeParameterDisplayConditions200ResponseToJSON,
    UpdateWorkflowNodeParameter200ResponseFromJSON,
    UpdateWorkflowNodeParameter200ResponseToJSON,
    UpdateWorkflowNodeParameterRequestFromJSON,
    UpdateWorkflowNodeParameterRequestToJSON,
} from '../models/index';

export interface DeleteWorkflowNodeParameterOperationRequest {
    id: string;
    deleteWorkflowNodeParameterRequest?: DeleteWorkflowNodeParameterRequest;
}

export interface GetWorkflowNodeParameterDisplayConditionsRequest {
    id: string;
    workflowNodeName: string;
}

export interface UpdateWorkflowNodeParameterOperationRequest {
    id: string;
    updateWorkflowNodeParameterRequest?: UpdateWorkflowNodeParameterRequest;
}

/**
 * 
 */
export class WorkflowNodeParameterApi extends runtime.BaseAPI {

    /**
     * Deletes a workflow node parameter.
     * Deletes a workflow node parameter
     */
    async deleteWorkflowNodeParameterRaw(requestParameters: DeleteWorkflowNodeParameterOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeleteWorkflowNodeParameter200Response>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deleteWorkflowNodeParameter().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/workflows/{id}/parameters`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: DeleteWorkflowNodeParameterRequestToJSON(requestParameters['deleteWorkflowNodeParameterRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DeleteWorkflowNodeParameter200ResponseFromJSON(jsonValue));
    }

    /**
     * Deletes a workflow node parameter.
     * Deletes a workflow node parameter
     */
    async deleteWorkflowNodeParameter(requestParameters: DeleteWorkflowNodeParameterOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeleteWorkflowNodeParameter200Response> {
        const response = await this.deleteWorkflowNodeParameterRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get an action or trigger property options shown in the editor.
     * Get an action or trigger property options shown in the editor
     */
    async getWorkflowNodeParameterDisplayConditionsRaw(requestParameters: GetWorkflowNodeParameterDisplayConditionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetWorkflowNodeParameterDisplayConditions200Response>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getWorkflowNodeParameterDisplayConditions().'
            );
        }

        if (requestParameters['workflowNodeName'] == null) {
            throw new runtime.RequiredError(
                'workflowNodeName',
                'Required parameter "workflowNodeName" was null or undefined when calling getWorkflowNodeParameterDisplayConditions().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/workflows/{id}/parameters/{workflowNodeName}/display-conditions`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))).replace(`{${"workflowNodeName"}}`, encodeURIComponent(String(requestParameters['workflowNodeName']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetWorkflowNodeParameterDisplayConditions200ResponseFromJSON(jsonValue));
    }

    /**
     * Get an action or trigger property options shown in the editor.
     * Get an action or trigger property options shown in the editor
     */
    async getWorkflowNodeParameterDisplayConditions(requestParameters: GetWorkflowNodeParameterDisplayConditionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetWorkflowNodeParameterDisplayConditions200Response> {
        const response = await this.getWorkflowNodeParameterDisplayConditionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates a workflow node parameter.
     * Updates a workflow node parameter
     */
    async updateWorkflowNodeParameterRaw(requestParameters: UpdateWorkflowNodeParameterOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UpdateWorkflowNodeParameter200Response>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling updateWorkflowNodeParameter().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/workflows/{id}/parameters`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateWorkflowNodeParameterRequestToJSON(requestParameters['updateWorkflowNodeParameterRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UpdateWorkflowNodeParameter200ResponseFromJSON(jsonValue));
    }

    /**
     * Updates a workflow node parameter.
     * Updates a workflow node parameter
     */
    async updateWorkflowNodeParameter(requestParameters: UpdateWorkflowNodeParameterOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UpdateWorkflowNodeParameter200Response> {
        const response = await this.updateWorkflowNodeParameterRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
