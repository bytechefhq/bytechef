/* tslint:disable */
/* eslint-disable */
/**
 * The Platform Configuration Internal API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  StartWebhookTriggerTest200Response,
} from '../models/index';
import {
    StartWebhookTriggerTest200ResponseFromJSON,
    StartWebhookTriggerTest200ResponseToJSON,
} from '../models/index';

export interface StartWebhookTriggerTestRequest {
    modeType: StartWebhookTriggerTestModeTypeEnum;
    workflowId: string;
}

export interface StopWebhookTriggerTestRequest {
    modeType: StopWebhookTriggerTestModeTypeEnum;
    workflowId: string;
}

/**
 * 
 */
export class WebhookTriggerTestApi extends runtime.BaseAPI {

    /**
     * Test a webhook trigger.
     * Test a webhook trigger
     */
    async startWebhookTriggerTestRaw(requestParameters: StartWebhookTriggerTestRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StartWebhookTriggerTest200Response>> {
        if (requestParameters['modeType'] == null) {
            throw new runtime.RequiredError(
                'modeType',
                'Required parameter "modeType" was null or undefined when calling startWebhookTriggerTest().'
            );
        }

        if (requestParameters['workflowId'] == null) {
            throw new runtime.RequiredError(
                'workflowId',
                'Required parameter "workflowId" was null or undefined when calling startWebhookTriggerTest().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['modeType'] != null) {
            queryParameters['modeType'] = requestParameters['modeType'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/webhooks/{workflowId}/test/start`.replace(`{${"workflowId"}}`, encodeURIComponent(String(requestParameters['workflowId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StartWebhookTriggerTest200ResponseFromJSON(jsonValue));
    }

    /**
     * Test a webhook trigger.
     * Test a webhook trigger
     */
    async startWebhookTriggerTest(requestParameters: StartWebhookTriggerTestRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StartWebhookTriggerTest200Response> {
        const response = await this.startWebhookTriggerTestRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Test a webhook trigger.
     * Test a webhook trigger
     */
    async stopWebhookTriggerTestRaw(requestParameters: StopWebhookTriggerTestRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['modeType'] == null) {
            throw new runtime.RequiredError(
                'modeType',
                'Required parameter "modeType" was null or undefined when calling stopWebhookTriggerTest().'
            );
        }

        if (requestParameters['workflowId'] == null) {
            throw new runtime.RequiredError(
                'workflowId',
                'Required parameter "workflowId" was null or undefined when calling stopWebhookTriggerTest().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['modeType'] != null) {
            queryParameters['modeType'] = requestParameters['modeType'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/webhooks/{workflowId}/test/stop`.replace(`{${"workflowId"}}`, encodeURIComponent(String(requestParameters['workflowId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Test a webhook trigger.
     * Test a webhook trigger
     */
    async stopWebhookTriggerTest(requestParameters: StopWebhookTriggerTestRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.stopWebhookTriggerTestRaw(requestParameters, initOverrides);
    }

}

/**
 * @export
 */
export const StartWebhookTriggerTestModeTypeEnum = {
    AUTOMATION: 0,
    EMBEDDED: 1
} as const;
export type StartWebhookTriggerTestModeTypeEnum = typeof StartWebhookTriggerTestModeTypeEnum[keyof typeof StartWebhookTriggerTestModeTypeEnum];
/**
 * @export
 */
export const StopWebhookTriggerTestModeTypeEnum = {
    AUTOMATION: 0,
    EMBEDDED: 1
} as const;
export type StopWebhookTriggerTestModeTypeEnum = typeof StopWebhookTriggerTestModeTypeEnum[keyof typeof StopWebhookTriggerTestModeTypeEnum];
