/* tslint:disable */
/* eslint-disable */
/**
 * The Platform Configuration Internal API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ClusterElementDefinition,
  ClusterElementDefinitionBasic,
} from '../models/index';
import {
    ClusterElementDefinitionFromJSON,
    ClusterElementDefinitionToJSON,
    ClusterElementDefinitionBasicFromJSON,
    ClusterElementDefinitionBasicToJSON,
} from '../models/index';

export interface GetComponentClusterElementDefinitionRequest {
    componentName: string;
    componentVersion: number;
    clusterElementName: string;
}

export interface GetRootComponentClusterElementDefinitionsRequest {
    rootComponentName: string;
    rootComponentVersion: number;
    clusterElementType: string;
}

/**
 * 
 */
export class ClusterElementDefinitionApi extends runtime.BaseAPI {

    /**
     * Get a cluster element definition of a component.
     * Get a cluster element definition of a component
     */
    async getComponentClusterElementDefinitionRaw(requestParameters: GetComponentClusterElementDefinitionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ClusterElementDefinition>> {
        if (requestParameters['componentName'] == null) {
            throw new runtime.RequiredError(
                'componentName',
                'Required parameter "componentName" was null or undefined when calling getComponentClusterElementDefinition().'
            );
        }

        if (requestParameters['componentVersion'] == null) {
            throw new runtime.RequiredError(
                'componentVersion',
                'Required parameter "componentVersion" was null or undefined when calling getComponentClusterElementDefinition().'
            );
        }

        if (requestParameters['clusterElementName'] == null) {
            throw new runtime.RequiredError(
                'clusterElementName',
                'Required parameter "clusterElementName" was null or undefined when calling getComponentClusterElementDefinition().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/component-definitions/{componentName}/versions/{componentVersion}/cluster-element-definition/{clusterElementName}`;
        urlPath = urlPath.replace(`{${"componentName"}}`, encodeURIComponent(String(requestParameters['componentName'])));
        urlPath = urlPath.replace(`{${"componentVersion"}}`, encodeURIComponent(String(requestParameters['componentVersion'])));
        urlPath = urlPath.replace(`{${"clusterElementName"}}`, encodeURIComponent(String(requestParameters['clusterElementName'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ClusterElementDefinitionFromJSON(jsonValue));
    }

    /**
     * Get a cluster element definition of a component.
     * Get a cluster element definition of a component
     */
    async getComponentClusterElementDefinition(requestParameters: GetComponentClusterElementDefinitionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ClusterElementDefinition> {
        const response = await this.getComponentClusterElementDefinitionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a cluster element definitions of a root component.
     * Get a cluster element definitions of a root component.
     */
    async getRootComponentClusterElementDefinitionsRaw(requestParameters: GetRootComponentClusterElementDefinitionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ClusterElementDefinitionBasic>>> {
        if (requestParameters['rootComponentName'] == null) {
            throw new runtime.RequiredError(
                'rootComponentName',
                'Required parameter "rootComponentName" was null or undefined when calling getRootComponentClusterElementDefinitions().'
            );
        }

        if (requestParameters['rootComponentVersion'] == null) {
            throw new runtime.RequiredError(
                'rootComponentVersion',
                'Required parameter "rootComponentVersion" was null or undefined when calling getRootComponentClusterElementDefinitions().'
            );
        }

        if (requestParameters['clusterElementType'] == null) {
            throw new runtime.RequiredError(
                'clusterElementType',
                'Required parameter "clusterElementType" was null or undefined when calling getRootComponentClusterElementDefinitions().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/component-definitions/{rootComponentName}/versions/{rootComponentVersion}/cluster-element-definitions/{clusterElementType}`;
        urlPath = urlPath.replace(`{${"rootComponentName"}}`, encodeURIComponent(String(requestParameters['rootComponentName'])));
        urlPath = urlPath.replace(`{${"rootComponentVersion"}}`, encodeURIComponent(String(requestParameters['rootComponentVersion'])));
        urlPath = urlPath.replace(`{${"clusterElementType"}}`, encodeURIComponent(String(requestParameters['clusterElementType'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ClusterElementDefinitionBasicFromJSON));
    }

    /**
     * Get a cluster element definitions of a root component.
     * Get a cluster element definitions of a root component.
     */
    async getRootComponentClusterElementDefinitions(requestParameters: GetRootComponentClusterElementDefinitionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ClusterElementDefinitionBasic>> {
        const response = await this.getRootComponentClusterElementDefinitionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
