/* tslint:disable */
/* eslint-disable */
/**
 * The Platform Configuration Internal API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  WorkflowNodeOutput,
} from '../models/index';
import {
    WorkflowNodeOutputFromJSON,
    WorkflowNodeOutputToJSON,
} from '../models/index';

export interface GetPreviousWorkflowNodeOutputsRequest {
    id: string;
    lastWorkflowNodeName?: string;
}

export interface GetWorkflowNodeOutputRequest {
    id: string;
    workflowNodeName: string;
}

/**
 * 
 */
export class WorkflowNodeOutputApi extends runtime.BaseAPI {

    /**
     * Get all workflow node outputs used in a workflow.
     * Get all dynamic workflow node outputs used in a workflow
     */
    async getPreviousWorkflowNodeOutputsRaw(requestParameters: GetPreviousWorkflowNodeOutputsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<WorkflowNodeOutput>>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getPreviousWorkflowNodeOutputs().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['lastWorkflowNodeName'] != null) {
            queryParameters['lastWorkflowNodeName'] = requestParameters['lastWorkflowNodeName'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/workflows/{id}/outputs`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(WorkflowNodeOutputFromJSON));
    }

    /**
     * Get all workflow node outputs used in a workflow.
     * Get all dynamic workflow node outputs used in a workflow
     */
    async getPreviousWorkflowNodeOutputs(requestParameters: GetPreviousWorkflowNodeOutputsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<WorkflowNodeOutput>> {
        const response = await this.getPreviousWorkflowNodeOutputsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get workflow node output of an action task or trigger used in a workflow.
     * Get workflow node output of an action task or trigger used in a workflow
     */
    async getWorkflowNodeOutputRaw(requestParameters: GetWorkflowNodeOutputRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WorkflowNodeOutput>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getWorkflowNodeOutput().'
            );
        }

        if (requestParameters['workflowNodeName'] == null) {
            throw new runtime.RequiredError(
                'workflowNodeName',
                'Required parameter "workflowNodeName" was null or undefined when calling getWorkflowNodeOutput().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/workflows/{id}/outputs/{workflowNodeName}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))).replace(`{${"workflowNodeName"}}`, encodeURIComponent(String(requestParameters['workflowNodeName']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WorkflowNodeOutputFromJSON(jsonValue));
    }

    /**
     * Get workflow node output of an action task or trigger used in a workflow.
     * Get workflow node output of an action task or trigger used in a workflow
     */
    async getWorkflowNodeOutput(requestParameters: GetWorkflowNodeOutputRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WorkflowNodeOutput> {
        const response = await this.getWorkflowNodeOutputRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
