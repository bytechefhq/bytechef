/* tslint:disable */
/* eslint-disable */
/**
 * The Platform Configuration Internal API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  GetWorkflowNodeDescription200Response,
} from '../models/index';
import {
    GetWorkflowNodeDescription200ResponseFromJSON,
    GetWorkflowNodeDescription200ResponseToJSON,
} from '../models/index';

export interface GetClusterElementWorkflowNodeDescriptionRequest {
    id: string;
    workflowNodeName: string;
    clusterElementName: string;
    environmentId: number;
}

export interface GetWorkflowNodeDescriptionRequest {
    id: string;
    workflowNodeName: string;
    environmentId: number;
}

/**
 * 
 */
export class WorkflowNodeDescriptionApi extends runtime.BaseAPI {

    /**
     * Get an action description shown in the editor.
     * Get an action description shown in the editor
     */
    async getClusterElementWorkflowNodeDescriptionRaw(requestParameters: GetClusterElementWorkflowNodeDescriptionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetWorkflowNodeDescription200Response>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getClusterElementWorkflowNodeDescription().'
            );
        }

        if (requestParameters['workflowNodeName'] == null) {
            throw new runtime.RequiredError(
                'workflowNodeName',
                'Required parameter "workflowNodeName" was null or undefined when calling getClusterElementWorkflowNodeDescription().'
            );
        }

        if (requestParameters['clusterElementName'] == null) {
            throw new runtime.RequiredError(
                'clusterElementName',
                'Required parameter "clusterElementName" was null or undefined when calling getClusterElementWorkflowNodeDescription().'
            );
        }

        if (requestParameters['environmentId'] == null) {
            throw new runtime.RequiredError(
                'environmentId',
                'Required parameter "environmentId" was null or undefined when calling getClusterElementWorkflowNodeDescription().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['environmentId'] != null) {
            queryParameters['environmentId'] = requestParameters['environmentId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/workflows/{id}/workflow-nodes/{workflowNodeName}/cluster-element-definition/{clusterElementName}/descriptions`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));
        urlPath = urlPath.replace(`{${"workflowNodeName"}}`, encodeURIComponent(String(requestParameters['workflowNodeName'])));
        urlPath = urlPath.replace(`{${"clusterElementName"}}`, encodeURIComponent(String(requestParameters['clusterElementName'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetWorkflowNodeDescription200ResponseFromJSON(jsonValue));
    }

    /**
     * Get an action description shown in the editor.
     * Get an action description shown in the editor
     */
    async getClusterElementWorkflowNodeDescription(requestParameters: GetClusterElementWorkflowNodeDescriptionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetWorkflowNodeDescription200Response> {
        const response = await this.getClusterElementWorkflowNodeDescriptionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get an action description shown in the editor.
     * Get an action description shown in the editor
     */
    async getWorkflowNodeDescriptionRaw(requestParameters: GetWorkflowNodeDescriptionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetWorkflowNodeDescription200Response>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getWorkflowNodeDescription().'
            );
        }

        if (requestParameters['workflowNodeName'] == null) {
            throw new runtime.RequiredError(
                'workflowNodeName',
                'Required parameter "workflowNodeName" was null or undefined when calling getWorkflowNodeDescription().'
            );
        }

        if (requestParameters['environmentId'] == null) {
            throw new runtime.RequiredError(
                'environmentId',
                'Required parameter "environmentId" was null or undefined when calling getWorkflowNodeDescription().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['environmentId'] != null) {
            queryParameters['environmentId'] = requestParameters['environmentId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/workflows/{id}/workflow-nodes/{workflowNodeName}/descriptions`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));
        urlPath = urlPath.replace(`{${"workflowNodeName"}}`, encodeURIComponent(String(requestParameters['workflowNodeName'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetWorkflowNodeDescription200ResponseFromJSON(jsonValue));
    }

    /**
     * Get an action description shown in the editor.
     * Get an action description shown in the editor
     */
    async getWorkflowNodeDescription(requestParameters: GetWorkflowNodeDescriptionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetWorkflowNodeDescription200Response> {
        const response = await this.getWorkflowNodeDescriptionRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
