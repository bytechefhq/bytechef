/* tslint:disable */
/* eslint-disable */
/**
 * The Platform Configuration Internal API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Notification,
} from '../models/index';
import {
    NotificationFromJSON,
    NotificationToJSON,
} from '../models/index';

export interface CreateNotificationRequest {
    notification: Omit<Notification, 'id'|'createdBy'|'createdDate'|'lastModifiedBy'|'lastModifiedDate'|'notificationEvents'>;
}

/**
 * 
 */
export class NotificationApi extends runtime.BaseAPI {

    /**
     * Create a notification entry
     * Create a notification entry
     */
    async createNotificationRaw(requestParameters: CreateNotificationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Notification>> {
        if (requestParameters['notification'] == null) {
            throw new runtime.RequiredError(
                'notification',
                'Required parameter "notification" was null or undefined when calling createNotification().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/notifications`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: NotificationToJSON(requestParameters['notification']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => NotificationFromJSON(jsonValue));
    }

    /**
     * Create a notification entry
     * Create a notification entry
     */
    async createNotification(requestParameters: CreateNotificationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Notification> {
        const response = await this.createNotificationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a list of notifications
     * Get a list of notifications
     */
    async getNotificationsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Notification>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/notifications`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(NotificationFromJSON));
    }

    /**
     * Get a list of notifications
     * Get a list of notifications
     */
    async getNotifications(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Notification>> {
        const response = await this.getNotificationsRaw(initOverrides);
        return await response.value();
    }

}
