/* tslint:disable */
/* eslint-disable */
/**
 * The Platform Configuration Internal API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Property,
} from '../models/index';
import {
    PropertyFromJSON,
    PropertyToJSON,
} from '../models/index';

export interface GetClusterElementDynamicPropertiesRequest {
    id: string;
    workflowNodeName: string;
    clusterElementType: string;
    clusterElementWorkflowNodeName: string;
    propertyName: string;
    environmentId: number;
    lookupDependsOnPaths?: Array<string>;
}

export interface GetWorkflowNodeDynamicPropertiesRequest {
    id: string;
    workflowNodeName: string;
    propertyName: string;
    environmentId: number;
    lookupDependsOnPaths?: Array<string>;
}

/**
 * 
 */
export class WorkflowNodeDynamicPropertiesApi extends runtime.BaseAPI {

    /**
     * Get dynamic properties for an action or trigger property shown in the editor.
     * Get dynamic properties for an action or trigger property shown in the editor
     */
    async getClusterElementDynamicPropertiesRaw(requestParameters: GetClusterElementDynamicPropertiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Property>>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getClusterElementDynamicProperties().'
            );
        }

        if (requestParameters['workflowNodeName'] == null) {
            throw new runtime.RequiredError(
                'workflowNodeName',
                'Required parameter "workflowNodeName" was null or undefined when calling getClusterElementDynamicProperties().'
            );
        }

        if (requestParameters['clusterElementType'] == null) {
            throw new runtime.RequiredError(
                'clusterElementType',
                'Required parameter "clusterElementType" was null or undefined when calling getClusterElementDynamicProperties().'
            );
        }

        if (requestParameters['clusterElementWorkflowNodeName'] == null) {
            throw new runtime.RequiredError(
                'clusterElementWorkflowNodeName',
                'Required parameter "clusterElementWorkflowNodeName" was null or undefined when calling getClusterElementDynamicProperties().'
            );
        }

        if (requestParameters['propertyName'] == null) {
            throw new runtime.RequiredError(
                'propertyName',
                'Required parameter "propertyName" was null or undefined when calling getClusterElementDynamicProperties().'
            );
        }

        if (requestParameters['environmentId'] == null) {
            throw new runtime.RequiredError(
                'environmentId',
                'Required parameter "environmentId" was null or undefined when calling getClusterElementDynamicProperties().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['lookupDependsOnPaths'] != null) {
            queryParameters['lookupDependsOnPaths'] = requestParameters['lookupDependsOnPaths'];
        }

        if (requestParameters['environmentId'] != null) {
            queryParameters['environmentId'] = requestParameters['environmentId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/workflows/{id}/workflow-nodes/{workflowNodeName}/cluster-elements/{clusterElementType}/{clusterElementWorkflowNodeName}/dynamic-properties/{propertyName}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));
        urlPath = urlPath.replace(`{${"workflowNodeName"}}`, encodeURIComponent(String(requestParameters['workflowNodeName'])));
        urlPath = urlPath.replace(`{${"clusterElementType"}}`, encodeURIComponent(String(requestParameters['clusterElementType'])));
        urlPath = urlPath.replace(`{${"clusterElementWorkflowNodeName"}}`, encodeURIComponent(String(requestParameters['clusterElementWorkflowNodeName'])));
        urlPath = urlPath.replace(`{${"propertyName"}}`, encodeURIComponent(String(requestParameters['propertyName'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PropertyFromJSON));
    }

    /**
     * Get dynamic properties for an action or trigger property shown in the editor.
     * Get dynamic properties for an action or trigger property shown in the editor
     */
    async getClusterElementDynamicProperties(requestParameters: GetClusterElementDynamicPropertiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Property>> {
        const response = await this.getClusterElementDynamicPropertiesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get dynamic properties for an action or trigger property shown in the editor.
     * Get dynamic properties for an action or trigger property shown in the editor
     */
    async getWorkflowNodeDynamicPropertiesRaw(requestParameters: GetWorkflowNodeDynamicPropertiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Property>>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getWorkflowNodeDynamicProperties().'
            );
        }

        if (requestParameters['workflowNodeName'] == null) {
            throw new runtime.RequiredError(
                'workflowNodeName',
                'Required parameter "workflowNodeName" was null or undefined when calling getWorkflowNodeDynamicProperties().'
            );
        }

        if (requestParameters['propertyName'] == null) {
            throw new runtime.RequiredError(
                'propertyName',
                'Required parameter "propertyName" was null or undefined when calling getWorkflowNodeDynamicProperties().'
            );
        }

        if (requestParameters['environmentId'] == null) {
            throw new runtime.RequiredError(
                'environmentId',
                'Required parameter "environmentId" was null or undefined when calling getWorkflowNodeDynamicProperties().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['lookupDependsOnPaths'] != null) {
            queryParameters['lookupDependsOnPaths'] = requestParameters['lookupDependsOnPaths'];
        }

        if (requestParameters['environmentId'] != null) {
            queryParameters['environmentId'] = requestParameters['environmentId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/workflows/{id}/workflow-nodes/{workflowNodeName}/dynamic-properties/{propertyName}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));
        urlPath = urlPath.replace(`{${"workflowNodeName"}}`, encodeURIComponent(String(requestParameters['workflowNodeName'])));
        urlPath = urlPath.replace(`{${"propertyName"}}`, encodeURIComponent(String(requestParameters['propertyName'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PropertyFromJSON));
    }

    /**
     * Get dynamic properties for an action or trigger property shown in the editor.
     * Get dynamic properties for an action or trigger property shown in the editor
     */
    async getWorkflowNodeDynamicProperties(requestParameters: GetWorkflowNodeDynamicPropertiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Property>> {
        const response = await this.getWorkflowNodeDynamicPropertiesRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
