/* tslint:disable */
/* eslint-disable */
/**
 * The Definition API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ControlTypeModel } from './ControlTypeModel';
import {
    ControlTypeModelFromJSON,
    ControlTypeModelFromJSONTyped,
    ControlTypeModelToJSON,
} from './ControlTypeModel';
import type { OptionModel } from './OptionModel';
import {
    OptionModelFromJSON,
    OptionModelFromJSONTyped,
    OptionModelToJSON,
} from './OptionModel';
import type { PropertyTypeModel } from './PropertyTypeModel';
import {
    PropertyTypeModelFromJSON,
    PropertyTypeModelFromJSONTyped,
    PropertyTypeModelToJSON,
} from './PropertyTypeModel';
import type { ValuePropertyModel } from './ValuePropertyModel';
import {
    ValuePropertyModelFromJSON,
    ValuePropertyModelFromJSONTyped,
    ValuePropertyModelToJSON,
} from './ValuePropertyModel';

/**
 * A boolean property type.
 * @export
 * @interface BooleanPropertyModel
 */
export interface BooleanPropertyModel extends ValuePropertyModel {
    /**
     * The property default value.
     * @type {boolean}
     * @memberof BooleanPropertyModel
     */
    defaultValue?: boolean;
    /**
     * The property sample value.
     * @type {boolean}
     * @memberof BooleanPropertyModel
     */
    exampleValue?: boolean;
    /**
     * The list of valid property options.
     * @type {Array<OptionModel>}
     * @memberof BooleanPropertyModel
     */
    options?: Array<OptionModel>;
}

/**
 * Check if a given object implements the BooleanPropertyModel interface.
 */
export function instanceOfBooleanPropertyModel(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function BooleanPropertyModelFromJSON(json: any): BooleanPropertyModel {
    return BooleanPropertyModelFromJSONTyped(json, false);
}

export function BooleanPropertyModelFromJSONTyped(json: any, ignoreDiscriminator: boolean): BooleanPropertyModel {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        ...ValuePropertyModelFromJSONTyped(json, ignoreDiscriminator),
        'defaultValue': !exists(json, 'defaultValue') ? undefined : json['defaultValue'],
        'exampleValue': !exists(json, 'exampleValue') ? undefined : json['exampleValue'],
        'options': !exists(json, 'options') ? undefined : ((json['options'] as Array<any>).map(OptionModelFromJSON)),
    };
}

export function BooleanPropertyModelToJSON(value?: BooleanPropertyModel | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        ...ValuePropertyModelToJSON(value),
        'defaultValue': value.defaultValue,
        'exampleValue': value.exampleValue,
        'options': value.options === undefined ? undefined : ((value.options as Array<any>).map(OptionModelToJSON)),
    };
}

