/* tslint:disable */
/* eslint-disable */
/**
 * Core Workflow API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ConnectionDefinitionBasicModel,
  ConnectionDefinitionModel,
  GetOAuth2AuthorizationParametersRequestModel,
  OAuth2AuthorizationParametersModel,
} from '../models';
import {
    ConnectionDefinitionBasicModelFromJSON,
    ConnectionDefinitionBasicModelToJSON,
    ConnectionDefinitionModelFromJSON,
    ConnectionDefinitionModelToJSON,
    GetOAuth2AuthorizationParametersRequestModelFromJSON,
    GetOAuth2AuthorizationParametersRequestModelToJSON,
    OAuth2AuthorizationParametersModelFromJSON,
    OAuth2AuthorizationParametersModelToJSON,
} from '../models';

export interface GetComponentConnectionDefinitionRequest {
    componentName: string;
    componentVersion: number;
}

export interface GetComponentConnectionDefinitionsRequest {
    componentName: string;
    componentVersion: number;
}

export interface GetOAuth2AuthorizationParametersRequest {
    getOAuth2AuthorizationParametersRequestModel: GetOAuth2AuthorizationParametersRequestModel;
}

/**
 * 
 */
export class ConnectionDefinitionsApi extends runtime.BaseAPI {

    /**
     * Get connection definition for a component.
     * Get connection definition for a component
     */
    async getComponentConnectionDefinitionRaw(requestParameters: GetComponentConnectionDefinitionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ConnectionDefinitionModel>> {
        if (requestParameters.componentName === null || requestParameters.componentName === undefined) {
            throw new runtime.RequiredError('componentName','Required parameter requestParameters.componentName was null or undefined when calling getComponentConnectionDefinition.');
        }

        if (requestParameters.componentVersion === null || requestParameters.componentVersion === undefined) {
            throw new runtime.RequiredError('componentVersion','Required parameter requestParameters.componentVersion was null or undefined when calling getComponentConnectionDefinition.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/component-definitions/{componentName}/{componentVersion}/connection-definition`.replace(`{${"componentName"}}`, encodeURIComponent(String(requestParameters.componentName))).replace(`{${"componentVersion"}}`, encodeURIComponent(String(requestParameters.componentVersion))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ConnectionDefinitionModelFromJSON(jsonValue));
    }

    /**
     * Get connection definition for a component.
     * Get connection definition for a component
     */
    async getComponentConnectionDefinition(requestParameters: GetComponentConnectionDefinitionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ConnectionDefinitionModel> {
        const response = await this.getComponentConnectionDefinitionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get all compatible connection definitions for a component.
     * Get all compatible connection definitions for a component
     */
    async getComponentConnectionDefinitionsRaw(requestParameters: GetComponentConnectionDefinitionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ConnectionDefinitionBasicModel>>> {
        if (requestParameters.componentName === null || requestParameters.componentName === undefined) {
            throw new runtime.RequiredError('componentName','Required parameter requestParameters.componentName was null or undefined when calling getComponentConnectionDefinitions.');
        }

        if (requestParameters.componentVersion === null || requestParameters.componentVersion === undefined) {
            throw new runtime.RequiredError('componentVersion','Required parameter requestParameters.componentVersion was null or undefined when calling getComponentConnectionDefinitions.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/component-definitions/{componentName}/{componentVersion}/connection-definitions`.replace(`{${"componentName"}}`, encodeURIComponent(String(requestParameters.componentName))).replace(`{${"componentVersion"}}`, encodeURIComponent(String(requestParameters.componentVersion))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ConnectionDefinitionBasicModelFromJSON));
    }

    /**
     * Get all compatible connection definitions for a component.
     * Get all compatible connection definitions for a component
     */
    async getComponentConnectionDefinitions(requestParameters: GetComponentConnectionDefinitionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ConnectionDefinitionBasicModel>> {
        const response = await this.getComponentConnectionDefinitionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves oauth2 authorization parameters.
     * Retrieves oauth2 authorization parameters.
     */
    async getOAuth2AuthorizationParametersRaw(requestParameters: GetOAuth2AuthorizationParametersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OAuth2AuthorizationParametersModel>> {
        if (requestParameters.getOAuth2AuthorizationParametersRequestModel === null || requestParameters.getOAuth2AuthorizationParametersRequestModel === undefined) {
            throw new runtime.RequiredError('getOAuth2AuthorizationParametersRequestModel','Required parameter requestParameters.getOAuth2AuthorizationParametersRequestModel was null or undefined when calling getOAuth2AuthorizationParameters.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/connection-definitions/oauth2`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GetOAuth2AuthorizationParametersRequestModelToJSON(requestParameters.getOAuth2AuthorizationParametersRequestModel),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OAuth2AuthorizationParametersModelFromJSON(jsonValue));
    }

    /**
     * Retrieves oauth2 authorization parameters.
     * Retrieves oauth2 authorization parameters.
     */
    async getOAuth2AuthorizationParameters(requestParameters: GetOAuth2AuthorizationParametersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OAuth2AuthorizationParametersModel> {
        const response = await this.getOAuth2AuthorizationParametersRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
