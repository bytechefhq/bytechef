/* tslint:disable */
/* eslint-disable */
/**
 * Connection API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface OAuth2AuthorizationParametersModel
 */
export interface OAuth2AuthorizationParametersModel {
    /**
     * 
     * @type {string}
     * @memberof OAuth2AuthorizationParametersModel
     */
    authorizationUrl?: string;
    /**
     * 
     * @type {string}
     * @memberof OAuth2AuthorizationParametersModel
     */
    clientId?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof OAuth2AuthorizationParametersModel
     */
    scopes?: Array<string>;
}

/**
 * Check if a given object implements the OAuth2AuthorizationParametersModel interface.
 */
export function instanceOfOAuth2AuthorizationParametersModel(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function OAuth2AuthorizationParametersModelFromJSON(json: any): OAuth2AuthorizationParametersModel {
    return OAuth2AuthorizationParametersModelFromJSONTyped(json, false);
}

export function OAuth2AuthorizationParametersModelFromJSONTyped(json: any, ignoreDiscriminator: boolean): OAuth2AuthorizationParametersModel {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'authorizationUrl': !exists(json, 'authorizationUrl') ? undefined : json['authorizationUrl'],
        'clientId': !exists(json, 'clientId') ? undefined : json['clientId'],
        'scopes': !exists(json, 'scopes') ? undefined : json['scopes'],
    };
}

export function OAuth2AuthorizationParametersModelToJSON(value?: OAuth2AuthorizationParametersModel | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'authorizationUrl': value.authorizationUrl,
        'clientId': value.clientId,
        'scopes': value.scopes,
    };
}

