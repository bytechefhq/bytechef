/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { TagModel } from './TagModel';
import {
    TagModelFromJSON,
    TagModelFromJSONTyped,
    TagModelToJSON,
} from './TagModel';

/**
 * TODO
 * @export
 * @interface ConnectionModel
 */
export interface ConnectionModel {
    /**
     * TODO
     * @type {string}
     * @memberof ConnectionModel
     */
    authorizationName?: string;
    /**
     * TODO
     * @type {string}
     * @memberof ConnectionModel
     */
    componentName: string;
    /**
     * TODO
     * @type {number}
     * @memberof ConnectionModel
     */
    connectionVersion: number;
    /**
     * TODO
     * @type {string}
     * @memberof ConnectionModel
     */
    readonly createdBy?: string;
    /**
     * TODO
     * @type {Date}
     * @memberof ConnectionModel
     */
    readonly createdDate?: Date;
    /**
     * TODO
     * @type {string}
     * @memberof ConnectionModel
     */
    name: string;
    /**
     * TODO
     * @type {number}
     * @memberof ConnectionModel
     */
    readonly id?: number;
    /**
     * TODO
     * @type {string}
     * @memberof ConnectionModel
     */
    readonly lastModifiedBy?: string;
    /**
     * TODO
     * @type {Date}
     * @memberof ConnectionModel
     */
    readonly lastModifiedDate?: Date;
    /**
     * TODO
     * @type {{ [key: string]: object; }}
     * @memberof ConnectionModel
     */
    parameters: { [key: string]: object; };
    /**
     * 
     * @type {Array<TagModel>}
     * @memberof ConnectionModel
     */
    tags?: Array<TagModel>;
    /**
     * 
     * @type {number}
     * @memberof ConnectionModel
     */
    version?: number;
}

/**
 * Check if a given object implements the ConnectionModel interface.
 */
export function instanceOfConnectionModel(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "componentName" in value;
    isInstance = isInstance && "connectionVersion" in value;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "parameters" in value;

    return isInstance;
}

export function ConnectionModelFromJSON(json: any): ConnectionModel {
    return ConnectionModelFromJSONTyped(json, false);
}

export function ConnectionModelFromJSONTyped(json: any, ignoreDiscriminator: boolean): ConnectionModel {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'authorizationName': !exists(json, 'authorizationName') ? undefined : json['authorizationName'],
        'componentName': json['componentName'],
        'connectionVersion': json['connectionVersion'],
        'createdBy': !exists(json, 'createdBy') ? undefined : json['createdBy'],
        'createdDate': !exists(json, 'createdDate') ? undefined : (new Date(json['createdDate'])),
        'name': json['name'],
        'id': !exists(json, 'id') ? undefined : json['id'],
        'lastModifiedBy': !exists(json, 'lastModifiedBy') ? undefined : json['lastModifiedBy'],
        'lastModifiedDate': !exists(json, 'lastModifiedDate') ? undefined : (new Date(json['lastModifiedDate'])),
        'parameters': json['parameters'],
        'tags': !exists(json, 'tags') ? undefined : ((json['tags'] as Array<any>).map(TagModelFromJSON)),
        'version': !exists(json, 'version') ? undefined : json['version'],
    };
}

export function ConnectionModelToJSON(value?: ConnectionModel | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'authorizationName': value.authorizationName,
        'componentName': value.componentName,
        'connectionVersion': value.connectionVersion,
        'name': value.name,
        'parameters': value.parameters,
        'tags': value.tags === undefined ? undefined : ((value.tags as Array<any>).map(TagModelToJSON)),
        'version': value.version,
    };
}

