/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { DisplayModel } from './DisplayModel';
import {
    DisplayModelFromJSON,
    DisplayModelFromJSONTyped,
    DisplayModelToJSON,
} from './DisplayModel';
import type { PropertyModel } from './PropertyModel';
import {
    PropertyModelFromJSON,
    PropertyModelFromJSONTyped,
    PropertyModelToJSON,
} from './PropertyModel';

/**
 * An action is a portion of reusable code that accomplish a specific task. When building a workflow, each action is represented as a task inside the workflow. The task 'type' property is defined as [component name]/v[component version]/[action name]. Action properties are used to set properties of the task inside the workflow.
 * @export
 * @interface ActionDefinitionModel
 */
export interface ActionDefinitionModel {
    /**
     * 
     * @type {DisplayModel}
     * @memberof ActionDefinitionModel
     */
    display?: DisplayModel;
    /**
     * The example of the action's output.
     * @type {object}
     * @memberof ActionDefinitionModel
     */
    exampleOutput?: object;
    /**
     * The action name.
     * @type {string}
     * @memberof ActionDefinitionModel
     */
    name?: string;
    /**
     * The output schema of an execution result.
     * @type {Array<PropertyModel>}
     * @memberof ActionDefinitionModel
     */
    output?: Array<PropertyModel>;
    /**
     * The list of action properties.
     * @type {Array<PropertyModel>}
     * @memberof ActionDefinitionModel
     */
    properties?: Array<PropertyModel>;
    /**
     * Contains information required for a connection's authorization.
     * @type {object}
     * @memberof ActionDefinitionModel
     */
    performFunction?: object;
}

/**
 * Check if a given object implements the ActionDefinitionModel interface.
 */
export function instanceOfActionDefinitionModel(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ActionDefinitionModelFromJSON(json: any): ActionDefinitionModel {
    return ActionDefinitionModelFromJSONTyped(json, false);
}

export function ActionDefinitionModelFromJSONTyped(json: any, ignoreDiscriminator: boolean): ActionDefinitionModel {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'display': !exists(json, 'display') ? undefined : DisplayModelFromJSON(json['display']),
        'exampleOutput': !exists(json, 'exampleOutput') ? undefined : json['exampleOutput'],
        'name': !exists(json, 'name') ? undefined : json['name'],
        'output': !exists(json, 'output') ? undefined : ((json['output'] as Array<any>).map(PropertyModelFromJSON)),
        'properties': !exists(json, 'properties') ? undefined : ((json['properties'] as Array<any>).map(PropertyModelFromJSON)),
        'performFunction': !exists(json, 'performFunction') ? undefined : json['performFunction'],
    };
}

export function ActionDefinitionModelToJSON(value?: ActionDefinitionModel | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'display': DisplayModelToJSON(value.display),
        'exampleOutput': value.exampleOutput,
        'name': value.name,
        'output': value.output === undefined ? undefined : ((value.output as Array<any>).map(PropertyModelToJSON)),
        'properties': value.properties === undefined ? undefined : ((value.properties as Array<any>).map(PropertyModelToJSON)),
        'performFunction': value.performFunction,
    };
}

