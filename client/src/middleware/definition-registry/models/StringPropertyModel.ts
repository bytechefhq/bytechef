/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ControlTypeModel } from './ControlTypeModel';
import {
    ControlTypeModelFromJSON,
    ControlTypeModelFromJSONTyped,
    ControlTypeModelToJSON,
} from './ControlTypeModel';
import type { DisplayOptionModel } from './DisplayOptionModel';
import {
    DisplayOptionModelFromJSON,
    DisplayOptionModelFromJSONTyped,
    DisplayOptionModelToJSON,
} from './DisplayOptionModel';
import type { PropertyOptionModel } from './PropertyOptionModel';
import {
    PropertyOptionModelFromJSON,
    PropertyOptionModelFromJSONTyped,
    PropertyOptionModelToJSON,
} from './PropertyOptionModel';
import type { PropertyTypeModel } from './PropertyTypeModel';
import {
    PropertyTypeModelFromJSON,
    PropertyTypeModelFromJSONTyped,
    PropertyTypeModelToJSON,
} from './PropertyTypeModel';
import type { ValuePropertyModel } from './ValuePropertyModel';
import {
    ValuePropertyModelFromJSON,
    ValuePropertyModelFromJSONTyped,
    ValuePropertyModelToJSON,
} from './ValuePropertyModel';

/**
 * A string property.
 * @export
 * @interface StringPropertyModel
 */
export interface StringPropertyModel extends ValuePropertyModel {
    /**
     * 
     * @type {ControlTypeModel}
     * @memberof StringPropertyModel
     */
    controlType?: ControlTypeModel;
}

/**
 * Check if a given object implements the StringPropertyModel interface.
 */
export function instanceOfStringPropertyModel(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function StringPropertyModelFromJSON(json: any): StringPropertyModel {
    return StringPropertyModelFromJSONTyped(json, false);
}

export function StringPropertyModelFromJSONTyped(json: any, ignoreDiscriminator: boolean): StringPropertyModel {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        ...ValuePropertyModelFromJSONTyped(json, ignoreDiscriminator),
        'controlType': !exists(json, 'controlType') ? undefined : ControlTypeModelFromJSON(json['controlType']),
    };
}

export function StringPropertyModelToJSON(value?: StringPropertyModel | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        ...ValuePropertyModelToJSON(value),
        'controlType': ControlTypeModelToJSON(value.controlType),
    };
}

