/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { DisplayOptionModel } from './DisplayOptionModel';
import {
    DisplayOptionModelFromJSON,
    DisplayOptionModelFromJSONTyped,
    DisplayOptionModelToJSON,
} from './DisplayOptionModel';

/**
 * Defines valid property value.
 * @export
 * @interface PropertyOptionModel
 */
export interface PropertyOptionModel {
    /**
     * Description of the option.
     * @type {string}
     * @memberof PropertyOptionModel
     */
    description?: string;
    /**
     * 
     * @type {DisplayOptionModel}
     * @memberof PropertyOptionModel
     */
    displayOption?: DisplayOptionModel;
    /**
     * The name of an option.
     * @type {string}
     * @memberof PropertyOptionModel
     */
    name?: string;
    /**
     * The value of an option.
     * @type {object}
     * @memberof PropertyOptionModel
     */
    value?: object;
}

/**
 * Check if a given object implements the PropertyOptionModel interface.
 */
export function instanceOfPropertyOptionModel(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function PropertyOptionModelFromJSON(json: any): PropertyOptionModel {
    return PropertyOptionModelFromJSONTyped(json, false);
}

export function PropertyOptionModelFromJSONTyped(json: any, ignoreDiscriminator: boolean): PropertyOptionModel {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'description': !exists(json, 'description') ? undefined : json['description'],
        'displayOption': !exists(json, 'displayOption') ? undefined : DisplayOptionModelFromJSON(json['displayOption']),
        'name': !exists(json, 'name') ? undefined : json['name'],
        'value': !exists(json, 'value') ? undefined : json['value'],
    };
}

export function PropertyOptionModelToJSON(value?: PropertyOptionModel | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'description': value.description,
        'displayOption': DisplayOptionModelToJSON(value.displayOption),
        'name': value.name,
        'value': value.value,
    };
}

