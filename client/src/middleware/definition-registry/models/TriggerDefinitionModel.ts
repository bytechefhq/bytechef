/* tslint:disable */
/* eslint-disable */
/**
 * Definition API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { DisplayModel } from './DisplayModel';
import {
    DisplayModelFromJSON,
    DisplayModelFromJSONTyped,
    DisplayModelToJSON,
} from './DisplayModel';
import type { PropertyModel } from './PropertyModel';
import {
    PropertyModelFromJSON,
    PropertyModelFromJSONTyped,
    PropertyModelToJSON,
} from './PropertyModel';
import type { ResourcesModel } from './ResourcesModel';
import {
    ResourcesModelFromJSON,
    ResourcesModelFromJSONTyped,
    ResourcesModelToJSON,
} from './ResourcesModel';
import type { TriggerTypeModel } from './TriggerTypeModel';
import {
    TriggerTypeModelFromJSON,
    TriggerTypeModelFromJSONTyped,
    TriggerTypeModelToJSON,
} from './TriggerTypeModel';

/**
 * A trigger definition defines ways to trigger workflows from the outside services.
 * @export
 * @interface TriggerDefinitionModel
 */
export interface TriggerDefinitionModel {
    /**
     * 
     * @type {DisplayModel}
     * @memberof TriggerDefinitionModel
     */
    display: DisplayModel;
    /**
     * The example value of the action's output.
     * @type {object}
     * @memberof TriggerDefinitionModel
     */
    exampleOutput?: object;
    /**
     * The action name.
     * @type {string}
     * @memberof TriggerDefinitionModel
     */
    name: string;
    /**
     * The output schema of an execution result.
     * @type {Array<PropertyModel>}
     * @memberof TriggerDefinitionModel
     */
    outputSchema?: Array<PropertyModel>;
    /**
     * The list of action properties.
     * @type {Array<PropertyModel>}
     * @memberof TriggerDefinitionModel
     */
    properties?: Array<PropertyModel>;
    /**
     * 
     * @type {ResourcesModel}
     * @memberof TriggerDefinitionModel
     */
    resources?: ResourcesModel;
    /**
     * 
     * @type {TriggerTypeModel}
     * @memberof TriggerDefinitionModel
     */
    type: TriggerTypeModel;
}

/**
 * Check if a given object implements the TriggerDefinitionModel interface.
 */
export function instanceOfTriggerDefinitionModel(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "display" in value;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "type" in value;

    return isInstance;
}

export function TriggerDefinitionModelFromJSON(json: any): TriggerDefinitionModel {
    return TriggerDefinitionModelFromJSONTyped(json, false);
}

export function TriggerDefinitionModelFromJSONTyped(json: any, ignoreDiscriminator: boolean): TriggerDefinitionModel {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'display': DisplayModelFromJSON(json['display']),
        'exampleOutput': !exists(json, 'exampleOutput') ? undefined : json['exampleOutput'],
        'name': json['name'],
        'outputSchema': !exists(json, 'outputSchema') ? undefined : ((json['outputSchema'] as Array<any>).map(PropertyModelFromJSON)),
        'properties': !exists(json, 'properties') ? undefined : ((json['properties'] as Array<any>).map(PropertyModelFromJSON)),
        'resources': !exists(json, 'resources') ? undefined : ResourcesModelFromJSON(json['resources']),
        'type': TriggerTypeModelFromJSON(json['type']),
    };
}

export function TriggerDefinitionModelToJSON(value?: TriggerDefinitionModel | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'display': DisplayModelToJSON(value.display),
        'exampleOutput': value.exampleOutput,
        'name': value.name,
        'outputSchema': value.outputSchema === undefined ? undefined : ((value.outputSchema as Array<any>).map(PropertyModelToJSON)),
        'properties': value.properties === undefined ? undefined : ((value.properties as Array<any>).map(PropertyModelToJSON)),
        'resources': ResourcesModelToJSON(value.resources),
        'type': TriggerTypeModelToJSON(value.type),
    };
}

