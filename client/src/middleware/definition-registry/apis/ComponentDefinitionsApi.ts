/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ComponentDefinitionBasicModel,
  ComponentDefinitionWithBasicActionsModel,
} from '../models';
import {
    ComponentDefinitionBasicModelFromJSON,
    ComponentDefinitionBasicModelToJSON,
    ComponentDefinitionWithBasicActionsModelFromJSON,
    ComponentDefinitionWithBasicActionsModelToJSON,
} from '../models';

export interface GetComponentDefinitionRequest {
    componentName: string;
    componentVersion: number;
}

export interface GetComponentDefinitionVersionsRequest {
    componentName: string;
}

export interface GetComponentDefinitionsRequest {
    connectionDefinitions?: boolean;
    connectionInstances?: boolean;
}

/**
 * 
 */
export class ComponentDefinitionsApi extends runtime.BaseAPI {

    /**
     * Get a component definition.
     * Get a component definition.
     */
    async getComponentDefinitionRaw(requestParameters: GetComponentDefinitionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ComponentDefinitionWithBasicActionsModel>> {
        if (requestParameters.componentName === null || requestParameters.componentName === undefined) {
            throw new runtime.RequiredError('componentName','Required parameter requestParameters.componentName was null or undefined when calling getComponentDefinition.');
        }

        if (requestParameters.componentVersion === null || requestParameters.componentVersion === undefined) {
            throw new runtime.RequiredError('componentVersion','Required parameter requestParameters.componentVersion was null or undefined when calling getComponentDefinition.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/component-definitions/{componentName}/{componentVersion}`.replace(`{${"componentName"}}`, encodeURIComponent(String(requestParameters.componentName))).replace(`{${"componentVersion"}}`, encodeURIComponent(String(requestParameters.componentVersion))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ComponentDefinitionWithBasicActionsModelFromJSON(jsonValue));
    }

    /**
     * Get a component definition.
     * Get a component definition.
     */
    async getComponentDefinition(requestParameters: GetComponentDefinitionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ComponentDefinitionWithBasicActionsModel> {
        const response = await this.getComponentDefinitionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get all component definition versions of a component definition.
     * Get all component definition versions of a component definition.
     */
    async getComponentDefinitionVersionsRaw(requestParameters: GetComponentDefinitionVersionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ComponentDefinitionBasicModel>>> {
        if (requestParameters.componentName === null || requestParameters.componentName === undefined) {
            throw new runtime.RequiredError('componentName','Required parameter requestParameters.componentName was null or undefined when calling getComponentDefinitionVersions.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/component-definitions/{componentName}`.replace(`{${"componentName"}}`, encodeURIComponent(String(requestParameters.componentName))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ComponentDefinitionBasicModelFromJSON));
    }

    /**
     * Get all component definition versions of a component definition.
     * Get all component definition versions of a component definition.
     */
    async getComponentDefinitionVersions(requestParameters: GetComponentDefinitionVersionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ComponentDefinitionBasicModel>> {
        const response = await this.getComponentDefinitionVersionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get all component definitions.
     * Get all component definitions.
     */
    async getComponentDefinitionsRaw(requestParameters: GetComponentDefinitionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ComponentDefinitionBasicModel>>> {
        const queryParameters: any = {};

        if (requestParameters.connectionDefinitions !== undefined) {
            queryParameters['connectionDefinitions'] = requestParameters.connectionDefinitions;
        }

        if (requestParameters.connectionInstances !== undefined) {
            queryParameters['connectionInstances'] = requestParameters.connectionInstances;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/component-definitions`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ComponentDefinitionBasicModelFromJSON));
    }

    /**
     * Get all component definitions.
     * Get all component definitions.
     */
    async getComponentDefinitions(requestParameters: GetComponentDefinitionsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ComponentDefinitionBasicModel>> {
        const response = await this.getComponentDefinitionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
