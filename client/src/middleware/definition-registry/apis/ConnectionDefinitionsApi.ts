/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ConnectionDefinitionBasicModel,
  ConnectionDefinitionModel,
} from '../models';
import {
    ConnectionDefinitionBasicModelFromJSON,
    ConnectionDefinitionBasicModelToJSON,
    ConnectionDefinitionModelFromJSON,
    ConnectionDefinitionModelToJSON,
} from '../models';

export interface GetConnectionDefinitionRequest {
    componentName: string;
    componentVersion: number;
}

/**
 * 
 */
export class ConnectionDefinitionsApi extends runtime.BaseAPI {

    /**
     * Get a connection definition of a component definition.
     * Get a connection definition of a component definition.
     */
    async getConnectionDefinitionRaw(requestParameters: GetConnectionDefinitionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ConnectionDefinitionModel>> {
        if (requestParameters.componentName === null || requestParameters.componentName === undefined) {
            throw new runtime.RequiredError('componentName','Required parameter requestParameters.componentName was null or undefined when calling getConnectionDefinition.');
        }

        if (requestParameters.componentVersion === null || requestParameters.componentVersion === undefined) {
            throw new runtime.RequiredError('componentVersion','Required parameter requestParameters.componentVersion was null or undefined when calling getConnectionDefinition.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/connection-definitions/{componentName}/{componentVersion}`.replace(`{${"componentName"}}`, encodeURIComponent(String(requestParameters.componentName))).replace(`{${"componentVersion"}}`, encodeURIComponent(String(requestParameters.componentVersion))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ConnectionDefinitionModelFromJSON(jsonValue));
    }

    /**
     * Get a connection definition of a component definition.
     * Get a connection definition of a component definition.
     */
    async getConnectionDefinition(requestParameters: GetConnectionDefinitionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ConnectionDefinitionModel> {
        const response = await this.getConnectionDefinitionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get all connection definitions.
     * Get all connection definitions.
     */
    async getConnectionDefinitionsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ConnectionDefinitionBasicModel>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/connection-definitions`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ConnectionDefinitionBasicModelFromJSON));
    }

    /**
     * Get all connection definitions.
     * Get all connection definitions.
     */
    async getConnectionDefinitions(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ConnectionDefinitionBasicModel>> {
        const response = await this.getConnectionDefinitionsRaw(initOverrides);
        return await response.value();
    }

}
