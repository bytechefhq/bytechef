/* tslint:disable */
/* eslint-disable */
/**
 * Automation Project API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ProjectInstanceModel,
} from '../models';
import {
    ProjectInstanceModelFromJSON,
    ProjectInstanceModelToJSON,
} from '../models';

export interface CreateProjectInstanceRequest {
    projectInstanceModel: ProjectInstanceModel;
}

export interface DeleteProjectInstanceRequest {
    id: number;
}

export interface EnableProjectInstanceRequest {
    id: number;
    enable: boolean;
}

export interface EnableProjectInstanceWorkflowRequest {
    id: number;
    workflowId: string;
    enable: boolean;
}

export interface GetProjectInstanceRequest {
    id: number;
}

export interface GetProjectInstancesRequest {
    projectId?: number;
    tagId?: number;
}

export interface UpdateProjectInstanceRequest {
    id: number;
    projectInstanceModel: ProjectInstanceModel;
}

/**
 * 
 */
export class ProjectInstancesApi extends runtime.BaseAPI {

    /**
     * Create a new project instance.
     * Create a new project instance
     */
    async createProjectInstanceRaw(requestParameters: CreateProjectInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProjectInstanceModel>> {
        if (requestParameters.projectInstanceModel === null || requestParameters.projectInstanceModel === undefined) {
            throw new runtime.RequiredError('projectInstanceModel','Required parameter requestParameters.projectInstanceModel was null or undefined when calling createProjectInstance.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/project-instances`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ProjectInstanceModelToJSON(requestParameters.projectInstanceModel),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProjectInstanceModelFromJSON(jsonValue));
    }

    /**
     * Create a new project instance.
     * Create a new project instance
     */
    async createProjectInstance(requestParameters: CreateProjectInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProjectInstanceModel> {
        const response = await this.createProjectInstanceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a project instance.
     * Delete a project instance
     */
    async deleteProjectInstanceRaw(requestParameters: DeleteProjectInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteProjectInstance.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/project-instances/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a project instance.
     * Delete a project instance
     */
    async deleteProjectInstance(requestParameters: DeleteProjectInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteProjectInstanceRaw(requestParameters, initOverrides);
    }

    /**
     * Enable/disable a project instance.
     * Enable/disable a project instance
     */
    async enableProjectInstanceRaw(requestParameters: EnableProjectInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling enableProjectInstance.');
        }

        if (requestParameters.enable === null || requestParameters.enable === undefined) {
            throw new runtime.RequiredError('enable','Required parameter requestParameters.enable was null or undefined when calling enableProjectInstance.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/project-instances/{id}/enable/{enable}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"enable"}}`, encodeURIComponent(String(requestParameters.enable))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Enable/disable a project instance.
     * Enable/disable a project instance
     */
    async enableProjectInstance(requestParameters: EnableProjectInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.enableProjectInstanceRaw(requestParameters, initOverrides);
    }

    /**
     * Enable/disable a workflow of a project instance.
     * Enable/disable a workflow of a project instance
     */
    async enableProjectInstanceWorkflowRaw(requestParameters: EnableProjectInstanceWorkflowRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling enableProjectInstanceWorkflow.');
        }

        if (requestParameters.workflowId === null || requestParameters.workflowId === undefined) {
            throw new runtime.RequiredError('workflowId','Required parameter requestParameters.workflowId was null or undefined when calling enableProjectInstanceWorkflow.');
        }

        if (requestParameters.enable === null || requestParameters.enable === undefined) {
            throw new runtime.RequiredError('enable','Required parameter requestParameters.enable was null or undefined when calling enableProjectInstanceWorkflow.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/project-instances/{id}/workflows/{workflowId}/enable/{enable}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"workflowId"}}`, encodeURIComponent(String(requestParameters.workflowId))).replace(`{${"enable"}}`, encodeURIComponent(String(requestParameters.enable))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Enable/disable a workflow of a project instance.
     * Enable/disable a workflow of a project instance
     */
    async enableProjectInstanceWorkflow(requestParameters: EnableProjectInstanceWorkflowRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.enableProjectInstanceWorkflowRaw(requestParameters, initOverrides);
    }

    /**
     * Get a project instance by id.
     * Get a project instance by id
     */
    async getProjectInstanceRaw(requestParameters: GetProjectInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProjectInstanceModel>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getProjectInstance.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/project-instances/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProjectInstanceModelFromJSON(jsonValue));
    }

    /**
     * Get a project instance by id.
     * Get a project instance by id
     */
    async getProjectInstance(requestParameters: GetProjectInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProjectInstanceModel> {
        const response = await this.getProjectInstanceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get project instances.
     * Get project instances
     */
    async getProjectInstancesRaw(requestParameters: GetProjectInstancesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ProjectInstanceModel>>> {
        const queryParameters: any = {};

        if (requestParameters.projectId !== undefined) {
            queryParameters['projectId'] = requestParameters.projectId;
        }

        if (requestParameters.tagId !== undefined) {
            queryParameters['tagId'] = requestParameters.tagId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/project-instances`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ProjectInstanceModelFromJSON));
    }

    /**
     * Get project instances.
     * Get project instances
     */
    async getProjectInstances(requestParameters: GetProjectInstancesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ProjectInstanceModel>> {
        const response = await this.getProjectInstancesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update an existing project instance.
     * Update an existing project instance
     */
    async updateProjectInstanceRaw(requestParameters: UpdateProjectInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProjectInstanceModel>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateProjectInstance.');
        }

        if (requestParameters.projectInstanceModel === null || requestParameters.projectInstanceModel === undefined) {
            throw new runtime.RequiredError('projectInstanceModel','Required parameter requestParameters.projectInstanceModel was null or undefined when calling updateProjectInstance.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/project-instances/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ProjectInstanceModelToJSON(requestParameters.projectInstanceModel),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProjectInstanceModelFromJSON(jsonValue));
    }

    /**
     * Update an existing project instance.
     * Update an existing project instance
     */
    async updateProjectInstance(requestParameters: UpdateProjectInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProjectInstanceModel> {
        const response = await this.updateProjectInstanceRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
