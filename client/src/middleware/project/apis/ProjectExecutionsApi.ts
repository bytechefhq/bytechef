/* tslint:disable */
/* eslint-disable */
/**
 * Project API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime';
import type {PageModel, ProjectExecutionModel} from '../models';
import {
    PageModelFromJSON,
    PageModelToJSON,
    ProjectExecutionModelFromJSON,
    ProjectExecutionModelToJSON,
} from '../models';

export interface GetProjectExecutionRequest {
    id: number;
}

export interface GetProjectExecutionsRequest {
    jobStatus?: GetProjectExecutionsJobStatusEnum;
    jobStartDate?: Date;
    jobEndDate?: Date;
    projectId?: number;
    projectInstanceId?: number;
    workflowId?: string;
    pageNumber?: number;
}

/**
 *
 */
export class ProjectExecutionsApi extends runtime.BaseAPI {
    /**
     * Get project execution by id.
     * Get project executions by id.
     */
    async getProjectExecutionRaw(
        requestParameters: GetProjectExecutionRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<runtime.ApiResponse<ProjectExecutionModel>> {
        if (
            requestParameters.id === null ||
            requestParameters.id === undefined
        ) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter requestParameters.id was null or undefined when calling getProjectExecution.'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request(
            {
                path: `/project-executions/{id}`.replace(
                    `{${'id'}}`,
                    encodeURIComponent(String(requestParameters.id))
                ),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response, (jsonValue) =>
            ProjectExecutionModelFromJSON(jsonValue)
        );
    }

    /**
     * Get project execution by id.
     * Get project executions by id.
     */
    async getProjectExecution(
        requestParameters: GetProjectExecutionRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<ProjectExecutionModel> {
        const response = await this.getProjectExecutionRaw(
            requestParameters,
            initOverrides
        );
        return await response.value();
    }

    /**
     * Get project executions.
     * Get project executions.
     */
    async getProjectExecutionsRaw(
        requestParameters: GetProjectExecutionsRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<runtime.ApiResponse<PageModel>> {
        const queryParameters: any = {};

        if (requestParameters.jobStatus !== undefined) {
            queryParameters['jobStatus'] = requestParameters.jobStatus;
        }

        if (requestParameters.jobStartDate !== undefined) {
            queryParameters['jobStartDate'] = (
                requestParameters.jobStartDate as any
            ).toISOString();
        }

        if (requestParameters.jobEndDate !== undefined) {
            queryParameters['jobEndDate'] = (
                requestParameters.jobEndDate as any
            ).toISOString();
        }

        if (requestParameters.projectId !== undefined) {
            queryParameters['projectId'] = requestParameters.projectId;
        }

        if (requestParameters.projectInstanceId !== undefined) {
            queryParameters['projectInstanceId'] =
                requestParameters.projectInstanceId;
        }

        if (requestParameters.workflowId !== undefined) {
            queryParameters['workflowId'] = requestParameters.workflowId;
        }

        if (requestParameters.pageNumber !== undefined) {
            queryParameters['pageNumber'] = requestParameters.pageNumber;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request(
            {
                path: `/project-executions`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response, (jsonValue) =>
            PageModelFromJSON(jsonValue)
        );
    }

    /**
     * Get project executions.
     * Get project executions.
     */
    async getProjectExecutions(
        requestParameters: GetProjectExecutionsRequest = {},
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<PageModel> {
        const response = await this.getProjectExecutionsRaw(
            requestParameters,
            initOverrides
        );
        return await response.value();
    }
}

/**
 * @export
 */
export const GetProjectExecutionsJobStatusEnum = {
    Created: 'CREATED',
    Started: 'STARTED',
    Stopped: 'STOPPED',
    Failed: 'FAILED',
    Completed: 'COMPLETED',
} as const;
export type GetProjectExecutionsJobStatusEnum =
    (typeof GetProjectExecutionsJobStatusEnum)[keyof typeof GetProjectExecutionsJobStatusEnum];
