/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ConnectionModel } from './ConnectionModel';
import {
    ConnectionModelFromJSON,
    ConnectionModelFromJSONTyped,
    ConnectionModelToJSON,
} from './ConnectionModel';
import type { ProjectModel } from './ProjectModel';
import {
    ProjectModelFromJSON,
    ProjectModelFromJSONTyped,
    ProjectModelToJSON,
} from './ProjectModel';
import type { TagModel } from './TagModel';
import {
    TagModelFromJSON,
    TagModelFromJSONTyped,
    TagModelToJSON,
} from './TagModel';

/**
 * Contains specific configuration required for the execution of project workflows.
 * @export
 * @interface ProjectInstanceModel
 */
export interface ProjectInstanceModel {
    /**
     * The configuration parameters of an project instance used as workflow input values.
     * @type {{ [key: string]: object; }}
     * @memberof ProjectInstanceModel
     */
    configurationParameters?: { [key: string]: object; };
    /**
     * The ids of connections used by a project instance.
     * @type {Array<number>}
     * @memberof ProjectInstanceModel
     */
    connectionIds?: Array<number>;
    /**
     * The connections used by a project instance.
     * @type {Array<ConnectionModel>}
     * @memberof ProjectInstanceModel
     */
    readonly connections?: Array<ConnectionModel>;
    /**
     * The description of a project instance.
     * @type {string}
     * @memberof ProjectInstanceModel
     */
    description?: string;
    /**
     * The created by.
     * @type {string}
     * @memberof ProjectInstanceModel
     */
    readonly createdBy?: string;
    /**
     * The created date.
     * @type {Date}
     * @memberof ProjectInstanceModel
     */
    readonly createdDate?: Date;
    /**
     * The id of a project instance.
     * @type {number}
     * @memberof ProjectInstanceModel
     */
    readonly id?: number;
    /**
     * The last execution date of a project instance.
     * @type {Date}
     * @memberof ProjectInstanceModel
     */
    lastExecutionDate?: Date;
    /**
     * The last modified by.
     * @type {string}
     * @memberof ProjectInstanceModel
     */
    readonly lastModifiedBy?: string;
    /**
     * The last modified date.
     * @type {Date}
     * @memberof ProjectInstanceModel
     */
    readonly lastModifiedDate?: Date;
    /**
     * The name of a project instance.
     * @type {string}
     * @memberof ProjectInstanceModel
     */
    name: string;
    /**
     * 
     * @type {ProjectModel}
     * @memberof ProjectInstanceModel
     */
    project?: ProjectModel;
    /**
     * Th id of a project.
     * @type {number}
     * @memberof ProjectInstanceModel
     */
    projectId?: number;
    /**
     * The status of a project instance.
     * @type {string}
     * @memberof ProjectInstanceModel
     */
    status?: ProjectInstanceModelStatusEnum;
    /**
     * 
     * @type {Array<TagModel>}
     * @memberof ProjectInstanceModel
     */
    tags?: Array<TagModel>;
    /**
     * 
     * @type {number}
     * @memberof ProjectInstanceModel
     */
    version?: number;
}


/**
 * @export
 */
export const ProjectInstanceModelStatusEnum = {
    Disabled: 'DISABLED',
    Enabled: 'ENABLED'
} as const;
export type ProjectInstanceModelStatusEnum = typeof ProjectInstanceModelStatusEnum[keyof typeof ProjectInstanceModelStatusEnum];


/**
 * Check if a given object implements the ProjectInstanceModel interface.
 */
export function instanceOfProjectInstanceModel(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "name" in value;

    return isInstance;
}

export function ProjectInstanceModelFromJSON(json: any): ProjectInstanceModel {
    return ProjectInstanceModelFromJSONTyped(json, false);
}

export function ProjectInstanceModelFromJSONTyped(json: any, ignoreDiscriminator: boolean): ProjectInstanceModel {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'configurationParameters': !exists(json, 'configurationParameters') ? undefined : json['configurationParameters'],
        'connectionIds': !exists(json, 'connectionIds') ? undefined : json['connectionIds'],
        'connections': !exists(json, 'connections') ? undefined : ((json['connections'] as Array<any>).map(ConnectionModelFromJSON)),
        'description': !exists(json, 'description') ? undefined : json['description'],
        'createdBy': !exists(json, 'createdBy') ? undefined : json['createdBy'],
        'createdDate': !exists(json, 'createdDate') ? undefined : (new Date(json['createdDate'])),
        'id': !exists(json, 'id') ? undefined : json['id'],
        'lastExecutionDate': !exists(json, 'lastExecutionDate') ? undefined : (new Date(json['lastExecutionDate'])),
        'lastModifiedBy': !exists(json, 'lastModifiedBy') ? undefined : json['lastModifiedBy'],
        'lastModifiedDate': !exists(json, 'lastModifiedDate') ? undefined : (new Date(json['lastModifiedDate'])),
        'name': json['name'],
        'project': !exists(json, 'project') ? undefined : ProjectModelFromJSON(json['project']),
        'projectId': !exists(json, 'projectId') ? undefined : json['projectId'],
        'status': !exists(json, 'status') ? undefined : json['status'],
        'tags': !exists(json, 'tags') ? undefined : ((json['tags'] as Array<any>).map(TagModelFromJSON)),
        'version': !exists(json, '__version') ? undefined : json['__version'],
    };
}

export function ProjectInstanceModelToJSON(value?: ProjectInstanceModel | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'configurationParameters': value.configurationParameters,
        'connectionIds': value.connectionIds,
        'description': value.description,
        'lastExecutionDate': value.lastExecutionDate === undefined ? undefined : (value.lastExecutionDate.toISOString()),
        'name': value.name,
        'project': ProjectModelToJSON(value.project),
        'projectId': value.projectId,
        'status': value.status,
        'tags': value.tags === undefined ? undefined : ((value.tags as Array<any>).map(TagModelToJSON)),
        '__version': value.version,
    };
}

