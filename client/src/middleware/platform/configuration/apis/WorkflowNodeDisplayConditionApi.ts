/* tslint:disable */
/* eslint-disable */
/**
 * The Platform Configuration API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  EvaluateWorkflowNodeDisplayConditionRequestModel,
} from '../models/index';
import {
    EvaluateWorkflowNodeDisplayConditionRequestModelFromJSON,
    EvaluateWorkflowNodeDisplayConditionRequestModelToJSON,
} from '../models/index';

export interface EvaluateWorkflowNodeDisplayConditionRequest {
    id: string;
    workflowNodeName: string;
    evaluateWorkflowNodeDisplayConditionRequestModel?: EvaluateWorkflowNodeDisplayConditionRequestModel;
}

/**
 * 
 */
export class WorkflowNodeDisplayConditionApi extends runtime.BaseAPI {

    /**
     * Evaluate display condition for an action or trigger property.
     * Evaluate display condition for an action or trigger property
     */
    async evaluateWorkflowNodeDisplayConditionRaw(requestParameters: EvaluateWorkflowNodeDisplayConditionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<boolean>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling evaluateWorkflowNodeDisplayCondition.');
        }

        if (requestParameters.workflowNodeName === null || requestParameters.workflowNodeName === undefined) {
            throw new runtime.RequiredError('workflowNodeName','Required parameter requestParameters.workflowNodeName was null or undefined when calling evaluateWorkflowNodeDisplayCondition.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/workflows/{id}/display-conditions/{workflowNodeName}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"workflowNodeName"}}`, encodeURIComponent(String(requestParameters.workflowNodeName))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EvaluateWorkflowNodeDisplayConditionRequestModelToJSON(requestParameters.evaluateWorkflowNodeDisplayConditionRequestModel),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<boolean>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Evaluate display condition for an action or trigger property.
     * Evaluate display condition for an action or trigger property
     */
    async evaluateWorkflowNodeDisplayCondition(requestParameters: EvaluateWorkflowNodeDisplayConditionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<boolean> {
        const response = await this.evaluateWorkflowNodeDisplayConditionRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
