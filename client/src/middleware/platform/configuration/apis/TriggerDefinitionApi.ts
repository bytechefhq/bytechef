/* tslint:disable */
/* eslint-disable */
/**
 * The Platform Configuration API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  TriggerDefinitionBasicModel,
  TriggerDefinitionModel,
} from '../models/index';
import {
    TriggerDefinitionBasicModelFromJSON,
    TriggerDefinitionBasicModelToJSON,
    TriggerDefinitionModelFromJSON,
    TriggerDefinitionModelToJSON,
} from '../models/index';

export interface GetComponentTriggerDefinitionRequest {
    componentName: string;
    componentVersion: number;
    triggerName: string;
}

export interface GetComponentTriggerDefinitionsRequest {
    componentName: string;
    componentVersion: number;
}

/**
 * 
 */
export class TriggerDefinitionApi extends runtime.BaseAPI {

    /**
     * Get a trigger definition of a component.
     * Get a trigger definition of a component
     */
    async getComponentTriggerDefinitionRaw(requestParameters: GetComponentTriggerDefinitionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TriggerDefinitionModel>> {
        if (requestParameters.componentName === null || requestParameters.componentName === undefined) {
            throw new runtime.RequiredError('componentName','Required parameter requestParameters.componentName was null or undefined when calling getComponentTriggerDefinition.');
        }

        if (requestParameters.componentVersion === null || requestParameters.componentVersion === undefined) {
            throw new runtime.RequiredError('componentVersion','Required parameter requestParameters.componentVersion was null or undefined when calling getComponentTriggerDefinition.');
        }

        if (requestParameters.triggerName === null || requestParameters.triggerName === undefined) {
            throw new runtime.RequiredError('triggerName','Required parameter requestParameters.triggerName was null or undefined when calling getComponentTriggerDefinition.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/component-definitions/{componentName}/{componentVersion}/trigger-definitions/{triggerName}`.replace(`{${"componentName"}}`, encodeURIComponent(String(requestParameters.componentName))).replace(`{${"componentVersion"}}`, encodeURIComponent(String(requestParameters.componentVersion))).replace(`{${"triggerName"}}`, encodeURIComponent(String(requestParameters.triggerName))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TriggerDefinitionModelFromJSON(jsonValue));
    }

    /**
     * Get a trigger definition of a component.
     * Get a trigger definition of a component
     */
    async getComponentTriggerDefinition(requestParameters: GetComponentTriggerDefinitionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TriggerDefinitionModel> {
        const response = await this.getComponentTriggerDefinitionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a list of trigger definitionss for a component.
     * Get a list of trigger definitionss for a component
     */
    async getComponentTriggerDefinitionsRaw(requestParameters: GetComponentTriggerDefinitionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<TriggerDefinitionBasicModel>>> {
        if (requestParameters.componentName === null || requestParameters.componentName === undefined) {
            throw new runtime.RequiredError('componentName','Required parameter requestParameters.componentName was null or undefined when calling getComponentTriggerDefinitions.');
        }

        if (requestParameters.componentVersion === null || requestParameters.componentVersion === undefined) {
            throw new runtime.RequiredError('componentVersion','Required parameter requestParameters.componentVersion was null or undefined when calling getComponentTriggerDefinitions.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/component-definitions/{componentName}/{componentVersion}/trigger-definitions`.replace(`{${"componentName"}}`, encodeURIComponent(String(requestParameters.componentName))).replace(`{${"componentVersion"}}`, encodeURIComponent(String(requestParameters.componentVersion))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TriggerDefinitionBasicModelFromJSON));
    }

    /**
     * Get a list of trigger definitionss for a component.
     * Get a list of trigger definitionss for a component
     */
    async getComponentTriggerDefinitions(requestParameters: GetComponentTriggerDefinitionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<TriggerDefinitionBasicModel>> {
        const response = await this.getComponentTriggerDefinitionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
