/* tslint:disable */
/* eslint-disable */
/**
 * The Platform Configuration API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  OptionModel,
} from '../models/index';
import {
    OptionModelFromJSON,
    OptionModelToJSON,
} from '../models/index';

export interface GetWorkflowOperationOptionsRequest {
    workflowId: string;
    workflowNodeName: string;
    propertyName: string;
    searchText?: string;
}

/**
 * 
 */
export class OptionApi extends runtime.BaseAPI {

    /**
     * Get an action or trigger property options shown in the editor.
     * Get an action or trigger property options shown in the editor
     */
    async getWorkflowOperationOptionsRaw(requestParameters: GetWorkflowOperationOptionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<OptionModel>>> {
        if (requestParameters.workflowId === null || requestParameters.workflowId === undefined) {
            throw new runtime.RequiredError('workflowId','Required parameter requestParameters.workflowId was null or undefined when calling getWorkflowOperationOptions.');
        }

        if (requestParameters.workflowNodeName === null || requestParameters.workflowNodeName === undefined) {
            throw new runtime.RequiredError('workflowNodeName','Required parameter requestParameters.workflowNodeName was null or undefined when calling getWorkflowOperationOptions.');
        }

        if (requestParameters.propertyName === null || requestParameters.propertyName === undefined) {
            throw new runtime.RequiredError('propertyName','Required parameter requestParameters.propertyName was null or undefined when calling getWorkflowOperationOptions.');
        }

        const queryParameters: any = {};

        if (requestParameters.searchText !== undefined) {
            queryParameters['searchText'] = requestParameters.searchText;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/workflows/{workflowId}/{workflowNodeName}/properties/{propertyName}/options`.replace(`{${"workflowId"}}`, encodeURIComponent(String(requestParameters.workflowId))).replace(`{${"workflowNodeName"}}`, encodeURIComponent(String(requestParameters.workflowNodeName))).replace(`{${"propertyName"}}`, encodeURIComponent(String(requestParameters.propertyName))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(OptionModelFromJSON));
    }

    /**
     * Get an action or trigger property options shown in the editor.
     * Get an action or trigger property options shown in the editor
     */
    async getWorkflowOperationOptions(requestParameters: GetWorkflowOperationOptionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<OptionModel>> {
        const response = await this.getWorkflowOperationOptionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
