/* tslint:disable */
/* eslint-disable */
/**
 * The Platform Configuration API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  WorkflowNodeOutputModel,
} from '../models/index';
import {
    WorkflowNodeOutputModelFromJSON,
    WorkflowNodeOutputModelToJSON,
} from '../models/index';

export interface GetWorkflowNodeOutputRequest {
    workflowId: string;
    workflowNodeName: string;
}

export interface GetWorkflowNodeOutputsRequest {
    workflowId: string;
    lastWorkflowNodeName?: string;
}

/**
 * 
 */
export class WorkflowStepOutputApi extends runtime.BaseAPI {

    /**
     * Get dynamic output schema of an action task or trigger used in a workflow.
     * Get dynamic output schema of an action task or trigger used in a workflow
     */
    async getWorkflowNodeOutputRaw(requestParameters: GetWorkflowNodeOutputRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WorkflowNodeOutputModel>> {
        if (requestParameters.workflowId === null || requestParameters.workflowId === undefined) {
            throw new runtime.RequiredError('workflowId','Required parameter requestParameters.workflowId was null or undefined when calling getWorkflowNodeOutput.');
        }

        if (requestParameters.workflowNodeName === null || requestParameters.workflowNodeName === undefined) {
            throw new runtime.RequiredError('workflowNodeName','Required parameter requestParameters.workflowNodeName was null or undefined when calling getWorkflowNodeOutput.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/workflows/{workflowId}/workflow-step-outputs/{workflowNodeName}`.replace(`{${"workflowId"}}`, encodeURIComponent(String(requestParameters.workflowId))).replace(`{${"workflowNodeName"}}`, encodeURIComponent(String(requestParameters.workflowNodeName))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WorkflowNodeOutputModelFromJSON(jsonValue));
    }

    /**
     * Get dynamic output schema of an action task or trigger used in a workflow.
     * Get dynamic output schema of an action task or trigger used in a workflow
     */
    async getWorkflowNodeOutput(requestParameters: GetWorkflowNodeOutputRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WorkflowNodeOutputModel> {
        const response = await this.getWorkflowNodeOutputRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get all dynamic output schemas used in a workflow.
     * Get all dynamic output schemas used in a workflow
     */
    async getWorkflowNodeOutputsRaw(requestParameters: GetWorkflowNodeOutputsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<WorkflowNodeOutputModel>>> {
        if (requestParameters.workflowId === null || requestParameters.workflowId === undefined) {
            throw new runtime.RequiredError('workflowId','Required parameter requestParameters.workflowId was null or undefined when calling getWorkflowNodeOutputs.');
        }

        const queryParameters: any = {};

        if (requestParameters.lastWorkflowNodeName !== undefined) {
            queryParameters['lastWorkflowNodeName'] = requestParameters.lastWorkflowNodeName;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/workflows/{workflowId}/workflow-step-outputs`.replace(`{${"workflowId"}}`, encodeURIComponent(String(requestParameters.workflowId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(WorkflowNodeOutputModelFromJSON));
    }

    /**
     * Get all dynamic output schemas used in a workflow.
     * Get all dynamic output schemas used in a workflow
     */
    async getWorkflowNodeOutputs(requestParameters: GetWorkflowNodeOutputsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<WorkflowNodeOutputModel>> {
        const response = await this.getWorkflowNodeOutputsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
