/* tslint:disable */
/* eslint-disable */
/**
 * The Platform Configuration API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ActionDefinitionModel } from './ActionDefinitionModel';
import {
    ActionDefinitionModelFromJSON,
    ActionDefinitionModelFromJSONTyped,
    ActionDefinitionModelToJSON,
} from './ActionDefinitionModel';
import type { PropertyModel } from './PropertyModel';
import {
    PropertyModelFromJSON,
    PropertyModelFromJSONTyped,
    PropertyModelToJSON,
} from './PropertyModel';
import type { TaskDispatcherDefinitionModel } from './TaskDispatcherDefinitionModel';
import {
    TaskDispatcherDefinitionModelFromJSON,
    TaskDispatcherDefinitionModelFromJSONTyped,
    TaskDispatcherDefinitionModelToJSON,
} from './TaskDispatcherDefinitionModel';

/**
 * The workflow step output
 * @export
 * @interface WorkflowNodeOutputModel
 */
export interface WorkflowNodeOutputModel {
    /**
     * 
     * @type {ActionDefinitionModel}
     * @memberof WorkflowNodeOutputModel
     */
    actionDefinition?: ActionDefinitionModel;
    /**
     * 
     * @type {PropertyModel}
     * @memberof WorkflowNodeOutputModel
     */
    outputSchema: PropertyModel;
    /**
     * The sample value of an output.
     * @type {object}
     * @memberof WorkflowNodeOutputModel
     */
    sampleOutput?: object;
    /**
     * 
     * @type {TaskDispatcherDefinitionModel}
     * @memberof WorkflowNodeOutputModel
     */
    taskDispatcherDefinition?: TaskDispatcherDefinitionModel;
    /**
     * The workflow node name
     * @type {string}
     * @memberof WorkflowNodeOutputModel
     */
    workflowNodeName: string;
}

/**
 * Check if a given object implements the WorkflowNodeOutputModel interface.
 */
export function instanceOfWorkflowNodeOutputModel(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "outputSchema" in value;
    isInstance = isInstance && "workflowNodeName" in value;

    return isInstance;
}

export function WorkflowNodeOutputModelFromJSON(json: any): WorkflowNodeOutputModel {
    return WorkflowNodeOutputModelFromJSONTyped(json, false);
}

export function WorkflowNodeOutputModelFromJSONTyped(json: any, ignoreDiscriminator: boolean): WorkflowNodeOutputModel {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'actionDefinition': !exists(json, 'actionDefinition') ? undefined : ActionDefinitionModelFromJSON(json['actionDefinition']),
        'outputSchema': PropertyModelFromJSON(json['outputSchema']),
        'sampleOutput': !exists(json, 'sampleOutput') ? undefined : json['sampleOutput'],
        'taskDispatcherDefinition': !exists(json, 'taskDispatcherDefinition') ? undefined : TaskDispatcherDefinitionModelFromJSON(json['taskDispatcherDefinition']),
        'workflowNodeName': json['workflowNodeName'],
    };
}

export function WorkflowNodeOutputModelToJSON(value?: WorkflowNodeOutputModel | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'actionDefinition': ActionDefinitionModelToJSON(value.actionDefinition),
        'outputSchema': PropertyModelToJSON(value.outputSchema),
        'sampleOutput': value.sampleOutput,
        'taskDispatcherDefinition': TaskDispatcherDefinitionModelToJSON(value.taskDispatcherDefinition),
        'workflowNodeName': value.workflowNodeName,
    };
}

