/* tslint:disable */
/* eslint-disable */
/**
 * The Platform Configuration API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { DataStreamComponentModel } from './DataStreamComponentModel';
import {
    DataStreamComponentModelFromJSON,
    DataStreamComponentModelFromJSONTyped,
    DataStreamComponentModelToJSON,
} from './DataStreamComponentModel';
import type { WorkflowConnectionModel } from './WorkflowConnectionModel';
import {
    WorkflowConnectionModelFromJSON,
    WorkflowConnectionModelFromJSONTyped,
    WorkflowConnectionModelToJSON,
} from './WorkflowConnectionModel';

/**
 * Represents a definition of a workflow task.
 * @export
 * @interface WorkflowTask1Model
 */
export interface WorkflowTask1Model {
    /**
     * 
     * @type {Array<WorkflowConnectionModel>}
     * @memberof WorkflowTask1Model
     */
    readonly connections?: Array<WorkflowConnectionModel>;
    /**
     * 
     * @type {DataStreamComponentModel}
     * @memberof WorkflowTask1Model
     */
    destination?: DataStreamComponentModel;
    /**
     * The (optional) list of tasks that are to be executed after execution of a task -- regardless of whether it had failed or not.
     * @type {Array<WorkflowTask1Model>}
     * @memberof WorkflowTask1Model
     */
    finalize?: Array<WorkflowTask1Model>;
    /**
     * The human-readable description of the task.
     * @type {string}
     * @memberof WorkflowTask1Model
     */
    label?: string;
    /**
     * The identifier name of the task. Task names are used for assigning the output of one task so it can be later used by subsequent tasks.
     * @type {string}
     * @memberof WorkflowTask1Model
     */
    name: string;
    /**
     * Defines the name of the type of the node that the task execution will be routed to. For instance, if the node value is "encoder", then the task will be routed to the "encoder" queue which is presumably subscribed to by worker nodes of "encoder" type.
     * @type {string}
     * @memberof WorkflowTask1Model
     */
    node?: string;
    /**
     * Key-value map of task parameters.
     * @type {{ [key: string]: object; }}
     * @memberof WorkflowTask1Model
     */
    parameters?: { [key: string]: object; };
    /**
     * The (optional) list of tasks that are to be executed after the successful execution of a task.
     * @type {Array<WorkflowTask1Model>}
     * @memberof WorkflowTask1Model
     */
    post?: Array<WorkflowTask1Model>;
    /**
     * The (optional) list of tasks that are to be executed prior to a task.
     * @type {Array<WorkflowTask1Model>}
     * @memberof WorkflowTask1Model
     */
    pre?: Array<WorkflowTask1Model>;
    /**
     * 
     * @type {DataStreamComponentModel}
     * @memberof WorkflowTask1Model
     */
    source?: DataStreamComponentModel;
    /**
     * The timeout expression which describes when a task should be deemed as timed-out.
     * @type {string}
     * @memberof WorkflowTask1Model
     */
    timeout?: string;
    /**
     * The type of a task.
     * @type {string}
     * @memberof WorkflowTask1Model
     */
    type: string;
}

/**
 * Check if a given object implements the WorkflowTask1Model interface.
 */
export function instanceOfWorkflowTask1Model(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "type" in value;

    return isInstance;
}

export function WorkflowTask1ModelFromJSON(json: any): WorkflowTask1Model {
    return WorkflowTask1ModelFromJSONTyped(json, false);
}

export function WorkflowTask1ModelFromJSONTyped(json: any, ignoreDiscriminator: boolean): WorkflowTask1Model {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'connections': !exists(json, 'connections') ? undefined : ((json['connections'] as Array<any>).map(WorkflowConnectionModelFromJSON)),
        'destination': !exists(json, 'destination') ? undefined : DataStreamComponentModelFromJSON(json['destination']),
        'finalize': !exists(json, 'finalize') ? undefined : ((json['finalize'] as Array<any>).map(WorkflowTask1ModelFromJSON)),
        'label': !exists(json, 'label') ? undefined : json['label'],
        'name': json['name'],
        'node': !exists(json, 'node') ? undefined : json['node'],
        'parameters': !exists(json, 'parameters') ? undefined : json['parameters'],
        'post': !exists(json, 'post') ? undefined : ((json['post'] as Array<any>).map(WorkflowTask1ModelFromJSON)),
        'pre': !exists(json, 'pre') ? undefined : ((json['pre'] as Array<any>).map(WorkflowTask1ModelFromJSON)),
        'source': !exists(json, 'source') ? undefined : DataStreamComponentModelFromJSON(json['source']),
        'timeout': !exists(json, 'timeout') ? undefined : json['timeout'],
        'type': json['type'],
    };
}

export function WorkflowTask1ModelToJSON(value?: WorkflowTask1Model | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'destination': DataStreamComponentModelToJSON(value.destination),
        'finalize': value.finalize === undefined ? undefined : ((value.finalize as Array<any>).map(WorkflowTask1ModelToJSON)),
        'label': value.label,
        'name': value.name,
        'node': value.node,
        'parameters': value.parameters,
        'post': value.post === undefined ? undefined : ((value.post as Array<any>).map(WorkflowTask1ModelToJSON)),
        'pre': value.pre === undefined ? undefined : ((value.pre as Array<any>).map(WorkflowTask1ModelToJSON)),
        'source': DataStreamComponentModelToJSON(value.source),
        'timeout': value.timeout,
        'type': value.type,
    };
}

