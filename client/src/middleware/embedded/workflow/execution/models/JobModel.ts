/* tslint:disable */
/* eslint-disable */
/**
 * Embedded Execution API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ExecutionErrorModel } from './ExecutionErrorModel';
import {
    ExecutionErrorModelFromJSON,
    ExecutionErrorModelFromJSONTyped,
    ExecutionErrorModelToJSON,
} from './ExecutionErrorModel';
import type { TaskExecutionModel } from './TaskExecutionModel';
import {
    TaskExecutionModelFromJSON,
    TaskExecutionModelFromJSONTyped,
    TaskExecutionModelToJSON,
} from './TaskExecutionModel';
import type { WebhookModel } from './WebhookModel';
import {
    WebhookModelFromJSON,
    WebhookModelFromJSONTyped,
    WebhookModelToJSON,
} from './WebhookModel';

/**
 * 
 * @export
 * @interface JobModel
 */
export interface JobModel {
    /**
     * The created by.
     * @type {string}
     * @memberof JobModel
     */
    readonly createdBy?: string;
    /**
     * The created date.
     * @type {Date}
     * @memberof JobModel
     */
    readonly createdDate?: Date;
    /**
     * The time execution entered end status COMPLETED, STOPPED, FAILED
     * @type {Date}
     * @memberof JobModel
     */
    endDate?: Date;
    /**
     * The id of a job.
     * @type {string}
     * @memberof JobModel
     */
    readonly id?: string;
    /**
     * The job's human-readable name.
     * @type {string}
     * @memberof JobModel
     */
    readonly label?: string;
    /**
     * The last modified by.
     * @type {string}
     * @memberof JobModel
     */
    readonly lastModifiedBy?: string;
    /**
     * The last modified date.
     * @type {Date}
     * @memberof JobModel
     */
    readonly lastModifiedDate?: Date;
    /**
     * The priority value.
     * @type {number}
     * @memberof JobModel
     */
    readonly priority: number;
    /**
     * The time of when the job began.
     * @type {Date}
     * @memberof JobModel
     */
    readonly startDate: Date;
    /**
     * The job's status.
     * @type {string}
     * @memberof JobModel
     */
    readonly status: JobModelStatusEnum;
    /**
     * 
     * @type {string}
     * @memberof JobModel
     */
    readonly workflowId?: string;
    /**
     * The index of the step on the job's workflow on which the job is working on right now.
     * @type {number}
     * @memberof JobModel
     */
    readonly currentTask?: number;
    /**
     * 
     * @type {ExecutionErrorModel}
     * @memberof JobModel
     */
    error?: ExecutionErrorModel;
    /**
     * The key-value map of the inputs passed to the job when it was created.
     * @type {{ [key: string]: object; }}
     * @memberof JobModel
     */
    readonly inputs?: { [key: string]: object; };
    /**
     * The key-value map of the outputs returned.
     * @type {{ [key: string]: object; }}
     * @memberof JobModel
     */
    readonly outputs?: { [key: string]: object; };
    /**
     * The id of the parent task that created this job. Required for sub-flows.
     * @type {number}
     * @memberof JobModel
     */
    readonly parentTaskExecutionId?: number;
    /**
     * 
     * @type {Array<TaskExecutionModel>}
     * @memberof JobModel
     */
    taskExecutions?: Array<TaskExecutionModel>;
    /**
     * The list of the webhooks configured.
     * @type {Array<WebhookModel>}
     * @memberof JobModel
     */
    readonly webhooks?: Array<WebhookModel>;
}


/**
 * @export
 */
export const JobModelStatusEnum = {
    Created: 'CREATED',
    Started: 'STARTED',
    Stopped: 'STOPPED',
    Failed: 'FAILED',
    Completed: 'COMPLETED'
} as const;
export type JobModelStatusEnum = typeof JobModelStatusEnum[keyof typeof JobModelStatusEnum];


/**
 * Check if a given object implements the JobModel interface.
 */
export function instanceOfJobModel(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "priority" in value;
    isInstance = isInstance && "startDate" in value;
    isInstance = isInstance && "status" in value;

    return isInstance;
}

export function JobModelFromJSON(json: any): JobModel {
    return JobModelFromJSONTyped(json, false);
}

export function JobModelFromJSONTyped(json: any, ignoreDiscriminator: boolean): JobModel {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'createdBy': !exists(json, 'createdBy') ? undefined : json['createdBy'],
        'createdDate': !exists(json, 'createdDate') ? undefined : (new Date(json['createdDate'])),
        'endDate': !exists(json, 'endDate') ? undefined : (new Date(json['endDate'])),
        'id': !exists(json, 'id') ? undefined : json['id'],
        'label': !exists(json, 'label') ? undefined : json['label'],
        'lastModifiedBy': !exists(json, 'lastModifiedBy') ? undefined : json['lastModifiedBy'],
        'lastModifiedDate': !exists(json, 'lastModifiedDate') ? undefined : (new Date(json['lastModifiedDate'])),
        'priority': json['priority'],
        'startDate': (new Date(json['startDate'])),
        'status': json['status'],
        'workflowId': !exists(json, 'workflowId') ? undefined : json['workflowId'],
        'currentTask': !exists(json, 'currentTask') ? undefined : json['currentTask'],
        'error': !exists(json, 'error') ? undefined : ExecutionErrorModelFromJSON(json['error']),
        'inputs': !exists(json, 'inputs') ? undefined : json['inputs'],
        'outputs': !exists(json, 'outputs') ? undefined : json['outputs'],
        'parentTaskExecutionId': !exists(json, 'parentTaskExecutionId') ? undefined : json['parentTaskExecutionId'],
        'taskExecutions': !exists(json, 'taskExecutions') ? undefined : ((json['taskExecutions'] as Array<any>).map(TaskExecutionModelFromJSON)),
        'webhooks': !exists(json, 'webhooks') ? undefined : ((json['webhooks'] as Array<any>).map(WebhookModelFromJSON)),
    };
}

export function JobModelToJSON(value?: JobModel | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'endDate': value.endDate === undefined ? undefined : (value.endDate.toISOString()),
        'error': ExecutionErrorModelToJSON(value.error),
        'taskExecutions': value.taskExecutions === undefined ? undefined : ((value.taskExecutions as Array<any>).map(TaskExecutionModelToJSON)),
    };
}

