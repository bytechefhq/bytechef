/* tslint:disable */
/* eslint-disable */
/**
 * The Embedded Configuration API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateIntegrationInstanceWorkflowJob200ResponseModel,
  IntegrationInstanceModel,
  IntegrationInstanceWorkflowModel,
} from '../models/index';
import {
    CreateIntegrationInstanceWorkflowJob200ResponseModelFromJSON,
    CreateIntegrationInstanceWorkflowJob200ResponseModelToJSON,
    IntegrationInstanceModelFromJSON,
    IntegrationInstanceModelToJSON,
    IntegrationInstanceWorkflowModelFromJSON,
    IntegrationInstanceWorkflowModelToJSON,
} from '../models/index';

export interface CreateIntegrationInstanceRequest {
    integrationInstanceModel: IntegrationInstanceModel;
}

export interface CreateIntegrationInstanceWorkflowJobRequest {
    id: number;
    workflowId: string;
}

export interface DeleteIntegrationInstanceRequest {
    id: number;
}

export interface EnableIntegrationInstanceRequest {
    id: number;
    enable: boolean;
}

export interface EnableIntegrationInstanceWorkflowRequest {
    id: number;
    workflowId: string;
    enable: boolean;
}

export interface GetIntegrationInstanceRequest {
    id: number;
}

export interface GetIntegrationInstancesRequest {
    integrationId?: number;
    tagId?: number;
}

export interface UpdateIntegrationInstanceRequest {
    id: number;
    integrationInstanceModel: IntegrationInstanceModel;
}

export interface UpdateIntegrationInstanceWorkflowRequest {
    id: number;
    integrationInstanceWorkflowId: number;
    integrationInstanceWorkflowModel: IntegrationInstanceWorkflowModel;
}

/**
 * 
 */
export class IntegrationInstanceApi extends runtime.BaseAPI {

    /**
     * Create a new integration instance.
     * Create a new integration instance
     */
    async createIntegrationInstanceRaw(requestParameters: CreateIntegrationInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IntegrationInstanceModel>> {
        if (requestParameters.integrationInstanceModel === null || requestParameters.integrationInstanceModel === undefined) {
            throw new runtime.RequiredError('integrationInstanceModel','Required parameter requestParameters.integrationInstanceModel was null or undefined when calling createIntegrationInstance.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/integration-instances`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: IntegrationInstanceModelToJSON(requestParameters.integrationInstanceModel),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IntegrationInstanceModelFromJSON(jsonValue));
    }

    /**
     * Create a new integration instance.
     * Create a new integration instance
     */
    async createIntegrationInstance(requestParameters: CreateIntegrationInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IntegrationInstanceModel> {
        const response = await this.createIntegrationInstanceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a request for running a new job.
     * Create a request for running a new job
     */
    async createIntegrationInstanceWorkflowJobRaw(requestParameters: CreateIntegrationInstanceWorkflowJobRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateIntegrationInstanceWorkflowJob200ResponseModel>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling createIntegrationInstanceWorkflowJob.');
        }

        if (requestParameters.workflowId === null || requestParameters.workflowId === undefined) {
            throw new runtime.RequiredError('workflowId','Required parameter requestParameters.workflowId was null or undefined when calling createIntegrationInstanceWorkflowJob.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/integration-instances/{id}/workflows/{workflowId}/jobs`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"workflowId"}}`, encodeURIComponent(String(requestParameters.workflowId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateIntegrationInstanceWorkflowJob200ResponseModelFromJSON(jsonValue));
    }

    /**
     * Create a request for running a new job.
     * Create a request for running a new job
     */
    async createIntegrationInstanceWorkflowJob(requestParameters: CreateIntegrationInstanceWorkflowJobRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateIntegrationInstanceWorkflowJob200ResponseModel> {
        const response = await this.createIntegrationInstanceWorkflowJobRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a integration instance.
     * Delete a integration instance
     */
    async deleteIntegrationInstanceRaw(requestParameters: DeleteIntegrationInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteIntegrationInstance.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/integration-instances/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a integration instance.
     * Delete a integration instance
     */
    async deleteIntegrationInstance(requestParameters: DeleteIntegrationInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteIntegrationInstanceRaw(requestParameters, initOverrides);
    }

    /**
     * Enable/disable a integration instance.
     * Enable/disable a integration instance
     */
    async enableIntegrationInstanceRaw(requestParameters: EnableIntegrationInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling enableIntegrationInstance.');
        }

        if (requestParameters.enable === null || requestParameters.enable === undefined) {
            throw new runtime.RequiredError('enable','Required parameter requestParameters.enable was null or undefined when calling enableIntegrationInstance.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/integration-instances/{id}/enable/{enable}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"enable"}}`, encodeURIComponent(String(requestParameters.enable))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Enable/disable a integration instance.
     * Enable/disable a integration instance
     */
    async enableIntegrationInstance(requestParameters: EnableIntegrationInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.enableIntegrationInstanceRaw(requestParameters, initOverrides);
    }

    /**
     * Enable/disable a workflow of a integration instance.
     * Enable/disable a workflow of a integration instance
     */
    async enableIntegrationInstanceWorkflowRaw(requestParameters: EnableIntegrationInstanceWorkflowRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling enableIntegrationInstanceWorkflow.');
        }

        if (requestParameters.workflowId === null || requestParameters.workflowId === undefined) {
            throw new runtime.RequiredError('workflowId','Required parameter requestParameters.workflowId was null or undefined when calling enableIntegrationInstanceWorkflow.');
        }

        if (requestParameters.enable === null || requestParameters.enable === undefined) {
            throw new runtime.RequiredError('enable','Required parameter requestParameters.enable was null or undefined when calling enableIntegrationInstanceWorkflow.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/integration-instances/{id}/workflows/{workflowId}/enable/{enable}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"workflowId"}}`, encodeURIComponent(String(requestParameters.workflowId))).replace(`{${"enable"}}`, encodeURIComponent(String(requestParameters.enable))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Enable/disable a workflow of a integration instance.
     * Enable/disable a workflow of a integration instance
     */
    async enableIntegrationInstanceWorkflow(requestParameters: EnableIntegrationInstanceWorkflowRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.enableIntegrationInstanceWorkflowRaw(requestParameters, initOverrides);
    }

    /**
     * Get a integration instance by id.
     * Get a integration instance by id
     */
    async getIntegrationInstanceRaw(requestParameters: GetIntegrationInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IntegrationInstanceModel>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getIntegrationInstance.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/integration-instances/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IntegrationInstanceModelFromJSON(jsonValue));
    }

    /**
     * Get a integration instance by id.
     * Get a integration instance by id
     */
    async getIntegrationInstance(requestParameters: GetIntegrationInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IntegrationInstanceModel> {
        const response = await this.getIntegrationInstanceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get integration instances.
     * Get integration instances
     */
    async getIntegrationInstancesRaw(requestParameters: GetIntegrationInstancesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<IntegrationInstanceModel>>> {
        const queryParameters: any = {};

        if (requestParameters.integrationId !== undefined) {
            queryParameters['integrationId'] = requestParameters.integrationId;
        }

        if (requestParameters.tagId !== undefined) {
            queryParameters['tagId'] = requestParameters.tagId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/integration-instances`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(IntegrationInstanceModelFromJSON));
    }

    /**
     * Get integration instances.
     * Get integration instances
     */
    async getIntegrationInstances(requestParameters: GetIntegrationInstancesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<IntegrationInstanceModel>> {
        const response = await this.getIntegrationInstancesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update an existing integration instance.
     * Update an existing integration instance
     */
    async updateIntegrationInstanceRaw(requestParameters: UpdateIntegrationInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IntegrationInstanceModel>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateIntegrationInstance.');
        }

        if (requestParameters.integrationInstanceModel === null || requestParameters.integrationInstanceModel === undefined) {
            throw new runtime.RequiredError('integrationInstanceModel','Required parameter requestParameters.integrationInstanceModel was null or undefined when calling updateIntegrationInstance.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/integration-instances/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: IntegrationInstanceModelToJSON(requestParameters.integrationInstanceModel),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IntegrationInstanceModelFromJSON(jsonValue));
    }

    /**
     * Update an existing integration instance.
     * Update an existing integration instance
     */
    async updateIntegrationInstance(requestParameters: UpdateIntegrationInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IntegrationInstanceModel> {
        const response = await this.updateIntegrationInstanceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update an existing integration instance workflow.
     * Update an existing integration instance workflow
     */
    async updateIntegrationInstanceWorkflowRaw(requestParameters: UpdateIntegrationInstanceWorkflowRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IntegrationInstanceWorkflowModel>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateIntegrationInstanceWorkflow.');
        }

        if (requestParameters.integrationInstanceWorkflowId === null || requestParameters.integrationInstanceWorkflowId === undefined) {
            throw new runtime.RequiredError('integrationInstanceWorkflowId','Required parameter requestParameters.integrationInstanceWorkflowId was null or undefined when calling updateIntegrationInstanceWorkflow.');
        }

        if (requestParameters.integrationInstanceWorkflowModel === null || requestParameters.integrationInstanceWorkflowModel === undefined) {
            throw new runtime.RequiredError('integrationInstanceWorkflowModel','Required parameter requestParameters.integrationInstanceWorkflowModel was null or undefined when calling updateIntegrationInstanceWorkflow.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/integration-instances/{id}/integration-instance-workflows/{integrationInstanceWorkflowId}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"integrationInstanceWorkflowId"}}`, encodeURIComponent(String(requestParameters.integrationInstanceWorkflowId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: IntegrationInstanceWorkflowModelToJSON(requestParameters.integrationInstanceWorkflowModel),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IntegrationInstanceWorkflowModelFromJSON(jsonValue));
    }

    /**
     * Update an existing integration instance workflow.
     * Update an existing integration instance workflow
     */
    async updateIntegrationInstanceWorkflow(requestParameters: UpdateIntegrationInstanceWorkflowRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IntegrationInstanceWorkflowModel> {
        const response = await this.updateIntegrationInstanceWorkflowRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
