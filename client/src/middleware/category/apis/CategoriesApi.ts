/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CategoryModel,
} from '../models';
import {
    CategoryModelFromJSON,
    CategoryModelToJSON,
} from '../models';

export interface DeleteCategoryRequest {
    id: number;
}

export interface GetCategoryRequest {
    id: number;
}

export interface PostCategoryRequest {
    categoryModel: CategoryModel;
}

export interface PutCategoryRequest {
    id: number;
    categoryModel: CategoryModel;
}

/**
 * 
 */
export class CategoriesApi extends runtime.BaseAPI {

    /**
     * Delete a category.
     * Delete a category.
     */
    async deleteCategoryRaw(requestParameters: DeleteCategoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteCategory.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/categories/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a category.
     * Delete a category.
     */
    async deleteCategory(requestParameters: DeleteCategoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteCategoryRaw(requestParameters, initOverrides);
    }

    /**
     * Get all categories.
     * Get all categories.
     */
    async getCategoriesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<CategoryModel>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/categories`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CategoryModelFromJSON));
    }

    /**
     * Get all categories.
     * Get all categories.
     */
    async getCategories(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<CategoryModel>> {
        const response = await this.getCategoriesRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get a category by id.
     * Get a category by id.
     */
    async getCategoryRaw(requestParameters: GetCategoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CategoryModel>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getCategory.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/categories/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CategoryModelFromJSON(jsonValue));
    }

    /**
     * Get a category by id.
     * Get a category by id.
     */
    async getCategory(requestParameters: GetCategoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CategoryModel> {
        const response = await this.getCategoryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a new category.
     * Create a new category.
     */
    async postCategoryRaw(requestParameters: PostCategoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CategoryModel>> {
        if (requestParameters.categoryModel === null || requestParameters.categoryModel === undefined) {
            throw new runtime.RequiredError('categoryModel','Required parameter requestParameters.categoryModel was null or undefined when calling postCategory.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/categories`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CategoryModelToJSON(requestParameters.categoryModel),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CategoryModelFromJSON(jsonValue));
    }

    /**
     * Create a new category.
     * Create a new category.
     */
    async postCategory(requestParameters: PostCategoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CategoryModel> {
        const response = await this.postCategoryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update an existing category.
     * Update an existing category.
     */
    async putCategoryRaw(requestParameters: PutCategoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CategoryModel>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling putCategory.');
        }

        if (requestParameters.categoryModel === null || requestParameters.categoryModel === undefined) {
            throw new runtime.RequiredError('categoryModel','Required parameter requestParameters.categoryModel was null or undefined when calling putCategory.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/categories/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: CategoryModelToJSON(requestParameters.categoryModel),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CategoryModelFromJSON(jsonValue));
    }

    /**
     * Update an existing category.
     * Update an existing category.
     */
    async putCategory(requestParameters: PutCategoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CategoryModel> {
        const response = await this.putCategoryRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
