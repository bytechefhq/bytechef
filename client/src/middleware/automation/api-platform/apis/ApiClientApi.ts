/* tslint:disable */
/* eslint-disable */
/**
 * The Automation API Platform Internal API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ApiClient,
  CreateApiClient200Response,
} from '../models/index';
import {
    ApiClientFromJSON,
    ApiClientToJSON,
    CreateApiClient200ResponseFromJSON,
    CreateApiClient200ResponseToJSON,
} from '../models/index';

export interface CreateApiClientRequest {
    apiClient: Omit<ApiClient, 'createdBy'|'createdDate'|'id'|'lastModifiedBy'|'lastModifiedDate'|'lastUsedDate'|'secretKey'>;
}

export interface DeleteApiClientRequest {
    id: number;
}

export interface GetApiClientRequest {
    id: number;
}

export interface UpdateApiClientRequest {
    id: number;
    apiClient: Omit<ApiClient, 'createdBy'|'createdDate'|'id'|'lastModifiedBy'|'lastModifiedDate'|'lastUsedDate'|'secretKey'>;
}

/**
 * 
 */
export class ApiClientApi extends runtime.BaseAPI {

    /**
     * Create a new API client.
     * Create a new API client
     */
    async createApiClientRaw(requestParameters: CreateApiClientRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateApiClient200Response>> {
        if (requestParameters['apiClient'] == null) {
            throw new runtime.RequiredError(
                'apiClient',
                'Required parameter "apiClient" was null or undefined when calling createApiClient().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api-clients`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ApiClientToJSON(requestParameters['apiClient']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateApiClient200ResponseFromJSON(jsonValue));
    }

    /**
     * Create a new API client.
     * Create a new API client
     */
    async createApiClient(requestParameters: CreateApiClientRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateApiClient200Response> {
        const response = await this.createApiClientRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete an API client.
     * Delete an API client
     */
    async deleteApiClientRaw(requestParameters: DeleteApiClientRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deleteApiClient().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api-client/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete an API client.
     * Delete an API client
     */
    async deleteApiClient(requestParameters: DeleteApiClientRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteApiClientRaw(requestParameters, initOverrides);
    }

    /**
     * Get an API client by id.
     * Get an API client by id
     */
    async getApiClientRaw(requestParameters: GetApiClientRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiClient>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getApiClient().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api-client/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiClientFromJSON(jsonValue));
    }

    /**
     * Get an API client by id.
     * Get an API client by id
     */
    async getApiClient(requestParameters: GetApiClientRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiClient> {
        const response = await this.getApiClientRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get API clients.
     * Get API clients
     */
    async getApiClientsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ApiClient>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api-clients`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ApiClientFromJSON));
    }

    /**
     * Get API clients.
     * Get API clients
     */
    async getApiClients(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ApiClient>> {
        const response = await this.getApiClientsRaw(initOverrides);
        return await response.value();
    }

    /**
     * Update an existing API client.
     * Update an existing API client
     */
    async updateApiClientRaw(requestParameters: UpdateApiClientRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling updateApiClient().'
            );
        }

        if (requestParameters['apiClient'] == null) {
            throw new runtime.RequiredError(
                'apiClient',
                'Required parameter "apiClient" was null or undefined when calling updateApiClient().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api-client/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ApiClientToJSON(requestParameters['apiClient']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Update an existing API client.
     * Update an existing API client
     */
    async updateApiClient(requestParameters: UpdateApiClientRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.updateApiClientRaw(requestParameters, initOverrides);
    }

}
