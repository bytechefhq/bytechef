/* tslint:disable */
/* eslint-disable */
/**
 * Core Definition API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ControlTypeModel } from './ControlTypeModel';
import {
    ControlTypeModelFromJSON,
    ControlTypeModelFromJSONTyped,
    ControlTypeModelToJSON,
} from './ControlTypeModel';

/**
 * 
 * @export
 * @interface ValuePropertyAllOfModel
 */
export interface ValuePropertyAllOfModel {
    /**
     * 
     * @type {ControlTypeModel}
     * @memberof ValuePropertyAllOfModel
     */
    controlType?: ControlTypeModel;
    /**
     * The property default value.
     * @type {object}
     * @memberof ValuePropertyAllOfModel
     */
    defaultValue?: object;
    /**
     * The property sample value.
     * @type {object}
     * @memberof ValuePropertyAllOfModel
     */
    exampleValue?: object;
}

/**
 * Check if a given object implements the ValuePropertyAllOfModel interface.
 */
export function instanceOfValuePropertyAllOfModel(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ValuePropertyAllOfModelFromJSON(json: any): ValuePropertyAllOfModel {
    return ValuePropertyAllOfModelFromJSONTyped(json, false);
}

export function ValuePropertyAllOfModelFromJSONTyped(json: any, ignoreDiscriminator: boolean): ValuePropertyAllOfModel {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'controlType': !exists(json, 'controlType') ? undefined : ControlTypeModelFromJSON(json['controlType']),
        'defaultValue': !exists(json, 'defaultValue') ? undefined : json['defaultValue'],
        'exampleValue': !exists(json, 'exampleValue') ? undefined : json['exampleValue'],
    };
}

export function ValuePropertyAllOfModelToJSON(value?: ValuePropertyAllOfModel | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'controlType': ControlTypeModelToJSON(value.controlType),
        'defaultValue': value.defaultValue,
        'exampleValue': value.exampleValue,
    };
}

