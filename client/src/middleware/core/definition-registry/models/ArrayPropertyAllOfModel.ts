/* tslint:disable */
/* eslint-disable */
/**
 * Core Definition API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { OptionModel } from './OptionModel';
import {
    OptionModelFromJSON,
    OptionModelFromJSONTyped,
    OptionModelToJSON,
} from './OptionModel';
import type { OptionsDataSourceModel } from './OptionsDataSourceModel';
import {
    OptionsDataSourceModelFromJSON,
    OptionsDataSourceModelFromJSONTyped,
    OptionsDataSourceModelToJSON,
} from './OptionsDataSourceModel';
import type { PropertyModel } from './PropertyModel';
import {
    PropertyModelFromJSON,
    PropertyModelFromJSONTyped,
    PropertyModelToJSON,
} from './PropertyModel';

/**
 * 
 * @export
 * @interface ArrayPropertyAllOfModel
 */
export interface ArrayPropertyAllOfModel {
    /**
     * Types of the array items.
     * @type {Array<PropertyModel>}
     * @memberof ArrayPropertyAllOfModel
     */
    items?: Array<PropertyModel>;
    /**
     * If the array can contain multiple items.
     * @type {boolean}
     * @memberof ArrayPropertyAllOfModel
     */
    multipleValues?: boolean;
    /**
     * The list of valid property options.
     * @type {Array<OptionModel>}
     * @memberof ArrayPropertyAllOfModel
     */
    options?: Array<OptionModel>;
    /**
     * 
     * @type {OptionsDataSourceModel}
     * @memberof ArrayPropertyAllOfModel
     */
    optionsDataSource?: OptionsDataSourceModel;
}

/**
 * Check if a given object implements the ArrayPropertyAllOfModel interface.
 */
export function instanceOfArrayPropertyAllOfModel(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ArrayPropertyAllOfModelFromJSON(json: any): ArrayPropertyAllOfModel {
    return ArrayPropertyAllOfModelFromJSONTyped(json, false);
}

export function ArrayPropertyAllOfModelFromJSONTyped(json: any, ignoreDiscriminator: boolean): ArrayPropertyAllOfModel {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'items': !exists(json, 'items') ? undefined : ((json['items'] as Array<any>).map(PropertyModelFromJSON)),
        'multipleValues': !exists(json, 'multipleValues') ? undefined : json['multipleValues'],
        'options': !exists(json, 'options') ? undefined : ((json['options'] as Array<any>).map(OptionModelFromJSON)),
        'optionsDataSource': !exists(json, 'optionsDataSource') ? undefined : OptionsDataSourceModelFromJSON(json['optionsDataSource']),
    };
}

export function ArrayPropertyAllOfModelToJSON(value?: ArrayPropertyAllOfModel | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'items': value.items === undefined ? undefined : ((value.items as Array<any>).map(PropertyModelToJSON)),
        'multipleValues': value.multipleValues,
        'options': value.options === undefined ? undefined : ((value.options as Array<any>).map(OptionModelToJSON)),
        'optionsDataSource': OptionsDataSourceModelToJSON(value.optionsDataSource),
    };
}

