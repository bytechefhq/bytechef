/* tslint:disable */
/* eslint-disable */
/**
 * Core Tag API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  TagModel,
} from '../models';
import {
    TagModelFromJSON,
    TagModelToJSON,
} from '../models';

export interface GetTagRequest {
    id: number;
}

export interface UpdateTagRequest {
    id: number;
    tagModel: TagModel;
}

/**
 * 
 */
export class TagsApi extends runtime.BaseAPI {

    /**
     * Get a tag by id.
     * Get a tag by id.
     */
    async getTagRaw(requestParameters: GetTagRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TagModel>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getTag.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/tags/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TagModelFromJSON(jsonValue));
    }

    /**
     * Get a tag by id.
     * Get a tag by id.
     */
    async getTag(requestParameters: GetTagRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TagModel> {
        const response = await this.getTagRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update an existing tag.
     * Update an existing tag.
     */
    async updateTagRaw(requestParameters: UpdateTagRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TagModel>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateTag.');
        }

        if (requestParameters.tagModel === null || requestParameters.tagModel === undefined) {
            throw new runtime.RequiredError('tagModel','Required parameter requestParameters.tagModel was null or undefined when calling updateTag.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/tags/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: TagModelToJSON(requestParameters.tagModel),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TagModelFromJSON(jsonValue));
    }

    /**
     * Update an existing tag.
     * Update an existing tag.
     */
    async updateTag(requestParameters: UpdateTagRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TagModel> {
        const response = await this.updateTagRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
